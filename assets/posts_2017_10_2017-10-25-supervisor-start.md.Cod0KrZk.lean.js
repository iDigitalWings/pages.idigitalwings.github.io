import{_ as i,a,af as t,o as e}from"./chunks/framework.C87LdZyP.js";const c=JSON.parse('{"title":"Supervisor Tutorial","description":"","frontmatter":{"title":"Supervisor Tutorial","date":"2017-10-25T00:00:00.000Z","tags":["ubuntu","supervisor"]},"headers":[],"relativePath":"posts/2017/10/2017-10-25-supervisor-start.md","filePath":"posts/2017/10/2017-10-25-supervisor-start.md","lastUpdated":1718193786000}'),n={name:"posts/2017/10/2017-10-25-supervisor-start.md"};function l(r,s,p,h,o,d){return e(),a("div",null,s[0]||(s[0]=[t(`<h2 id="install" tabindex="-1">Install <a class="header-anchor" href="#install" aria-label="Permalink to &quot;Install&quot;">​</a></h2><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> apt-get</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> supervisor</span></span></code></pre></div><h2 id="config" tabindex="-1">Config <a class="header-anchor" href="#config" aria-label="Permalink to &quot;Config&quot;">​</a></h2><p>将每个进程的配置文件单独拆分,放在<code>/etc/supervisor/conf.d/</code>目录下, 以<code>.conf</code>作为扩展名,例如 <code>itms.conf</code> 定义的一个简单的HTTP服务器:</p><div class="language-ini vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ini</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">[program:itms]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">command</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">=python -m SimpleHTTPServer</span></span></code></pre></div><h2 id="start" tabindex="-1">Start <a class="header-anchor" href="#start" aria-label="Permalink to &quot;Start&quot;">​</a></h2><p>重启supervisor,让配置文件生效,然后启动itms进程:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">supervisorctl</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> reload</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">supervisorctl</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> start</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> test</span></span></code></pre></div><h2 id="supervisor-config" tabindex="-1">Supervisor Config <a class="header-anchor" href="#supervisor-config" aria-label="Permalink to &quot;Supervisor Config&quot;">​</a></h2><div class="language-ini vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ini</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">[program:meta.txn.recover.on.error]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">command</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">=/cas/bin/meta.txn.recover.on.error </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">; 被监控的进程路径</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">numprocs</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">=1                    </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">; 启动几个进程</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">directory</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">=/cas/bin                </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">; 执行前要不要先cd到目录去，一般不用</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">autostart</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">=true                </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">; 随着supervisord的启动而启动</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">autorestart</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">=true              </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">; 自动重启。。当然要选上了</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">startretries</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">=10               </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">; 启动失败时的最多重试次数</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">exitcodes</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">=0                 </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">; 正常退出代码（是说退出代码是这个时就不再重启了吗？待确定）</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">stopsignal</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">=KILL               </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">; 用来杀死进程的信号</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">stopwaitsecs</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">=10               </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">; 发送SIGKILL前的等待时间</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">redirect_stderr</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">=true          </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">; 重定向stderr到stdout</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">stdout_logfile</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">=logfile        </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">; 指定日志文件</span></span></code></pre></div><h2 id="supervisor-command" tabindex="-1">Supervisor command <a class="header-anchor" href="#supervisor-command" aria-label="Permalink to &quot;Supervisor command&quot;">​</a></h2><ul><li><code>supervisorctl start programxxx</code> 启动某个进程</li><li><code>supervisorctl restart programxxx</code> 重启某个进程</li><li><code>supervisorctl stop groupworker</code> 重启所有属于名为groupworker这个分组的进程(start,restart同理)</li><li><code>supervisorctl stop all</code> 停止全部进程，注：start、restart、stop都不会载入最新的配置文件。</li><li><code>supervisorctl reload</code> 载入最新的配置文件，停止原有进程并按新的配置启动、管理所有进程。</li><li><code>supervisorctl update</code> 根据最新的配置文件，启动新配置或有改动的进程，配置没有改动的进程不会受影响而重启。</li><li><code>supervisor</code> 启动和停止的日志文件存放在/var/log/supervisor/supervisord.log</li></ul><p>注意：显式用stop停止掉的进程，用reload或者update都不会自动重启</p><hr><div style="text-align:center;color:#00000099;font-size:14px;">END</div>`,15)]))}const g=i(n,[["render",l]]);export{c as __pageData,g as default};
