import{_ as a,a as t,af as e,o as p}from"./chunks/framework.C87LdZyP.js";const u=JSON.parse('{"title":"TCPDump Wireshark","description":"TCPDump Wireshark","frontmatter":{"title":"TCPDump Wireshark","date":"2017-04-17T00:00:00.000Z","img":"docker-jekyll.jpg","description":"TCPDump Wireshark","category":["DevOps"],"tags":["netwark","tcpdump","wireshark"]},"headers":[],"relativePath":"posts/2017/04/2017-04-13-tcpdump-wireshark.md","filePath":"posts/2017/04/2017-04-13-tcpdump-wireshark.md","lastUpdated":1718193786000}'),i={name:"posts/2017/04/2017-04-13-tcpdump-wireshark.md"};function n(l,s,d,c,o,r){return p(),t("div",null,s[0]||(s[0]=[e(`<p><code>tcpdump</code>是Linux自带的抓包工具，支持针对网络层. 协议. 主机. 网络或端口的过滤， 并提供 and. or. not等逻辑语句来帮助你去掉无用的信息。</p><p>我这里用<code>Wireshark</code>配合进行分析，那么只需要将所有信息保存下来即可：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span>sudo tcpdump -w tcp.cap</span></span></code></pre></div><p>将文件下载到本地用<code>Wireshark</code>打开即可。</p><p>需要过滤特定端口的HTTP POST请求，过滤表达式为：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span>tcp and tcp.port == 80 and http.request.method == &quot;POST&quot;</span></span></code></pre></div><h3 id="tcpdump" tabindex="-1">TCPDump <a class="header-anchor" href="#tcpdump" aria-label="Permalink to &quot;TCPDump&quot;">​</a></h3><p>命令格式：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span>tcpdump [ 选项 ] [ -c 数量 ] [ -i 网络接口 ] [ -w 文件名 ] [ 表达式 ]</span></span></code></pre></div><p>常用选项：</p><ul><li>-l：使标准输出变为缓冲行形式；</li><li>-c：抓包次数；</li><li>-nn：直接以 IP 及 Port Number 显示，而非主机名与服务名称；</li><li>-s ：&lt;数据包大小&gt; 设置每个数据包的大小；</li><li>-i：指定监听的网络接口；</li><li>-r：从指定的文件中读取包；</li><li>-w：输出信息保存到指定文件；</li><li>-a：将网络地址和广播地址转变成名字；</li><li>-d：将匹配信息包的代码以人们能够理解的汇编格式给出；</li><li>-e：在输出行打印出数据链路层的头部信息；</li><li>-f：将外部的Internet地址以数字的形式打印出来；</li><li>-t：在输出的每一行不打印时间戳；</li><li>-v ：输出稍微详细的报文信息；加一个v更详细。</li></ul><p>示例：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span>sudo tcpdump -i eth0 -nn &#39;tcp&#39;</span></span>
<span class="line"><span>sudo tcpdump -i eth0 -nn &#39;host 192.168.1.231&#39;</span></span>
<span class="line"><span>sudo tcpdump -i wlan0 tcp port 80 -n -s 0 -w tcp33333.cap</span></span>
<span class="line"><span>sudo tcpdump -i wlan0 -nnA &#39;port 80 and src host 192.168.1.123&#39;</span></span>
<span class="line"><span>sudo tcpdump -i wlan0 tcp port 80 -n -s 0 -w tcp.cap</span></span></code></pre></div><h3 id="网络上的一些示例" tabindex="-1">网络上的一些示例 <a class="header-anchor" href="#网络上的一些示例" aria-label="Permalink to &quot;网络上的一些示例&quot;">​</a></h3><ol><li>截获eth0网卡10次收发所有数据包并将抓包结果保存到test文件,再读取test抓包结果文件</li></ol><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span>tcpdump i eth0 c 10 w test</span></span>
<span class="line"><span>tcpdump r test</span></span></code></pre></div><ol start="2"><li>截获来访问80端口的所有数据包（指定端口范围portrange 1-1024）</li></ol><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span>tcpdump port 80</span></span></code></pre></div><ol start="3"><li>截获所有来自主机114.254.151.51的进出所有数据包</li></ol><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span>tcpdump host 114.254.151.51</span></span></code></pre></div><ol start="4"><li>截获ip包中源地址是114.254.151.51的（目的是dst）</li></ol><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span>tcpdump src 114.254.151.51</span></span></code></pre></div><ol start="5"><li>截获主机114.254.151.51和主机114.254.151.52的通信</li></ol><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span>tcpdum host 114.254.151.51 and 114.254.151.52</span></span></code></pre></div><ol start="6"><li>截获tcp协议并且源地址114.254.151.51来访问80的端口</li></ol><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span>tcpdump tcp and src 114.254.151.51 and port 80</span></span></code></pre></div><ol start="7"><li>截获主机114.254.151.51除了和114.254.151.52之外的所有ip包</li></ol><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span>tcpdump ip host 114.254.151.51 and ! 114.254.151.52</span></span></code></pre></div><ol start="8"><li>截获长度大于1000数据包,对于DDOS攻击时，可以使用</li></ol><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span>tcpdump -i eth0 greater 1000</span></span></code></pre></div><hr><div style="text-align:center;color:#00000099;font-size:14px;">END</div>`,32)]))}const m=a(i,[["render",n]]);export{u as __pageData,m as default};
