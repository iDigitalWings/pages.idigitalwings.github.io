import{_ as i,a,af as n,o as t}from"./chunks/framework.C87LdZyP.js";const p="/assets/320918717375291.8QOa1B7n.gif",l="/assets/322112375323833.CEqwiC4U.png",h="/assets/324579250298875.BraD4zjq.png",e="/assets/324882559613500.CB8WNtzi.png",k="/assets/325009909034375.CsN-3b9D.png",r="/assets/325085187997041.BiyMJzXv.png",o="/assets/324836351252708.Dx7_uMEy.png",d="/assets/325149804584250.DdYMwWO0.png",g="/assets/325229497006166.BK67ksOG.png",y="/assets/326254534862708.B5Fd00Vp.png",c="/assets/325522282027291.BdFlSKd5.png",A="/assets/325672045618666.Cb6REfJ4.png",q=JSON.parse('{"title":"AgentScope 可视化的多智能体平台","description":"","frontmatter":{"title":"AgentScope 可视化的多智能体平台","date":"2024-06-14 11:00:00","tags":["llm-tools"],"category":["AI"]},"headers":[],"relativePath":"posts/2024/06/2024-06-14-agentscope-intro.md","filePath":"posts/2024/06/2024-06-14-agentscope-intro.md","lastUpdated":1719973047000}'),F={name:"posts/2024/06/2024-06-14-agentscope-intro.md"};function D(u,s,C,m,B,E){return t(),a("div",null,s[0]||(s[0]=[n('<div class="admonition abstract"><p class="admonition-title">abstract</p><p>多智能体系统是如今 LLM 一个令人兴奋的领域，而 AgentScope 正是一个创新的多智能体平台，本文介绍了 AgentScope 的概念、用法以及 RAG智能体的概念。</p></div><p>AgentScope 旨在帮助开发人员轻松、可靠、高性能地构建多智能体应用程序。 该平台具有三种高级功能：</p><ul><li>易于使用：采用纯 Python 编程，具有各种<strong>预构建的组件</strong>可立即使用，适合具有不同级别定制要求的开发人员或用户。</li><li>高稳健性：支持定制的<strong>容错控制和重试机制</strong>，增强应用程序的稳定性。</li><li>基于参与者的分布：使开发人员能够以集中式编程的方式构建<strong>分布式多代理</strong>应用程序，从而简化开发。</li></ul><blockquote><p>项目地址： <a href="https://github.com/modelscope/agentscope" target="_blank" rel="noreferrer">https://github.com/modelscope/agentscope</a></p></blockquote><p>下面看一下 AgentScope 工作站的预览图：</p><p><img src="'+p+`" alt="AgentScope 工作站的可拖拽界面"></p><h2 id="agentscope-核心概念" tabindex="-1">AgentScope 核心概念 <a class="header-anchor" href="#agentscope-核心概念" aria-label="Permalink to &quot;AgentScope 核心概念&quot;">​</a></h2><p>我们先来了解 AgentScope 的核心概念。</p><h3 id="消息" tabindex="-1">消息 <a class="header-anchor" href="#消息" aria-label="Permalink to &quot;消息&quot;">​</a></h3><p>消息 是 AgentScope 中通信的单位，是不同 Agent 之间进行信息交换的载体。</p><p>消息是 Python 中的字典对象，使用起来很简单，下属代码定义了两个消息：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> agentscope.message </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> Msg</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">message_from_alice </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> Msg(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;Alice&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;Hi!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">message_from_bob </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> Msg(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;Bob&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;What about this picture I took?&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">url</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;/path/to/picture.jpg&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span></code></pre></div><h3 id="智能体-代理" tabindex="-1">智能体（代理） <a class="header-anchor" href="#智能体-代理" aria-label="Permalink to &quot;智能体（代理）&quot;">​</a></h3><p><strong>智能体</strong>是系统中的活动实体，他负责负责<strong>处理信息</strong>、<strong>做出决策</strong>和<strong>采取行动</strong>。</p><p>AgentScope 通过两个主要功能定义其行为：</p><p>回复：将消息作为输入并生成相应的响应，推动对话流程。 观察：处理传入消息而不生成直接回复，允许代理被动收集信息并做出相应的反应。</p><p>下面展示如何定义智能体：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">dialogAgent </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> DialogAgent(</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;assistant&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">model_config_name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;gpt-4&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">sys_prompt</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;You are a helpful ai assistant&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">userAgent </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> UserAgent()</span></span></code></pre></div><h3 id="智能体对话" tabindex="-1">智能体对话 <a class="header-anchor" href="#智能体对话" aria-label="Permalink to &quot;智能体对话&quot;">​</a></h3><p>智能体对话很简单，只需要把消息传入智能体，函数返回值就是智能体的回答。</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> dialogAgent(message_from_alice)</span></span></code></pre></div><p>下面展示两个智能体持续对话，用户输出 <code>exit</code> 退出：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> None</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">while</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> True</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> dialogAgent(x)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> userAgent(x)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    # 如果用户输入&quot;exit&quot;，则终止对话</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> x.content </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">==</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;exit&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">        print</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;Exiting the conversation.&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">        break</span></span></code></pre></div><h3 id="记忆-memory" tabindex="-1">记忆 Memory <a class="header-anchor" href="#记忆-memory" aria-label="Permalink to &quot;记忆 Memory&quot;">​</a></h3><p>记忆（memory）用于<strong>存储历史消息</strong>，从而使智能体能够根据<strong>上下文</strong>提供更加<strong>连贯</strong>，更加<strong>自然</strong>的响应。</p><p><code>TemporaryMemory</code> 是 AgentScope 一个基于内存的Memory实现，</p><h3 id="工具-服务" tabindex="-1">工具(服务) <a class="header-anchor" href="#工具-服务" aria-label="Permalink to &quot;工具(服务)&quot;">​</a></h3><p>工具是智能体连接现实世界的通道，也称之为服务函数（Service Function）。</p><p>服务函数（Service function）是可以增强智能体能力工具，例如执行Python代码、网络搜索、 文件操作等。</p><p>AgentScope 内置了很多函数，通过 <code>agentscope.service.{函数名}</code> 可以快速调用。</p><p><img src="`+l+`" alt="AgentScope 的内置函数"></p><h3 id="创建新的函数" tabindex="-1">创建新的函数 <a class="header-anchor" href="#创建新的函数" aria-label="Permalink to &quot;创建新的函数&quot;">​</a></h3><p>虽然内置的工具函数已经足够满足很多需求，但是免不了希望贴合自身业务来创建自定义工具函数。</p><p>AgentScope 提供了创建函数的功能，新的Service函数必须满足以下要求才能被正常使用：</p><ul><li>具有格式化的函数说明（推荐Google风格），以便ServiceToolkit提取函数说明。</li><li>函数名称应该是自解释的，这样智能体可以理解函数并正确使用它。</li><li>在定义函数时应提供参数的类型（例如<code>def func(a: int, b: str, c: bool)</code>），以便大模型 能够给出类型正确的参数。</li></ul><p>看一个示例：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> create_file</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(file_path: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">str</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, content: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">str</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) -&gt; ServiceResponse:</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">    &quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">    创建文件并向其中写入内容。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">    Args:</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">        file_path (str): 将要创建文件的路径。</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">        content (str): 要写入文件的内容。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">    Returns:</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">        ServiceResponse: 其中布尔值指示成功与否，字符串包含任何错误消息（如果有），包括错误类型。</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">    &quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    # ... [为简洁起见省略代码]</span></span></code></pre></div><h3 id="工作流-pipeline" tabindex="-1">工作流(Pipeline) <a class="header-anchor" href="#工作流-pipeline" aria-label="Permalink to &quot;工作流(Pipeline)&quot;">​</a></h3><p>但是对复杂应用来说，细致的描绘每一次信息交流对开发者来说是非常困难的。 Pipeline 主要用于简化「描述消息传播」的编程工作。</p><h2 id="agent-scope-studio" tabindex="-1">Agent Scope Studio <a class="header-anchor" href="#agent-scope-studio" aria-label="Permalink to &quot;Agent Scope Studio&quot;">​</a></h2><p>AgentScope Studio 是一个开源的 Web UI 工具包，用于构建和监控多智能体应用程序。它提供以下功能：</p><ul><li>Dashboard：一个用户友好的界面，可以在其中监视正在运行的应用程序，并查看运行历史。</li><li>Workstation：一个强大的界面，可通过拖拽的方式构建多智能体应用程序。</li><li>Gallery：即将推出！</li><li>Server Management：即将推出！</li></ul><p>下面我们看一下如何运行 Studio。我直接在 Colab 上运行，速度更快一些，大家本地运行的的时候会更简单。</p><h3 id="本地运行" tabindex="-1">本地运行 <a class="header-anchor" href="#本地运行" aria-label="Permalink to &quot;本地运行&quot;">​</a></h3><p>先安装：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span>pip install agentscope --pre</span></span></code></pre></div><p>然后执行下面 Python 代码，访问浏览器即可：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> agentscope</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">agentscope.studio.init()</span></span></code></pre></div><h3 id="colab-运行" tabindex="-1">Colab 运行 <a class="header-anchor" href="#colab-运行" aria-label="Permalink to &quot;Colab 运行&quot;">​</a></h3><p>Colab 运行复杂一点，我这里单独讲一下。</p><p>仍然是先安装 agentscope 依赖：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#B31D28;--shiki-dark:#FF938A;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">pip install </span><span style="--shiki-light:#B31D28;--shiki-dark:#FF938A;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">--</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">ignore</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">installed  agentscope </span><span style="--shiki-light:#B31D28;--shiki-dark:#FF938A;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">--</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">pre</span></span></code></pre></div><p>获取 外网地址，有下面两种方法：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#B31D28;--shiki-dark:#FF938A;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">pip install ipwhois</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> ipwhois </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> IPWhois</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> requests </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> get</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">ip </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> get(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;https://api.ipify.org&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">).text</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">whois </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> IPWhois(ip).lookup_rdap(</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">depth</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">cidr </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> whois[</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;network&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">][</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;cidr&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> whois[</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;network&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">][</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;name&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;</span><span style="--shiki-light:#005CC5;--shiki-dark:#F47067;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;Provider:  &#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, name)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;Public IP: &#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, ip)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;CIDRs:     &#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, cidr)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"># or</span></span>
<span class="line"><span style="--shiki-light:#B31D28;--shiki-dark:#FF938A;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">curl https:</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">//</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">loca.lt</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">mytunnelpassword</span></span></code></pre></div><p>生成执行脚本，</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#B31D28;--shiki-dark:#FF938A;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">echo </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;import agentscope&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> &gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> run.py</span></span>
<span class="line"><span style="--shiki-light:#B31D28;--shiki-dark:#FF938A;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">echo  </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> run.py</span></span>
<span class="line"><span style="--shiki-light:#B31D28;--shiki-dark:#FF938A;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">echo </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;agentscope.studio.init()&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> &gt;&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> run.py</span></span>
<span class="line"><span style="--shiki-light:#B31D28;--shiki-dark:#FF938A;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">cat run.py</span></span></code></pre></div><p>运行程序：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#B31D28;--shiki-dark:#FF938A;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">python run.py </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> npx localtunnel </span><span style="--shiki-light:#B31D28;--shiki-dark:#FF938A;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">--</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">port </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">5000</span></span></code></pre></div><p>访问即可看到如下界面：</p><p><img src="`+h+'" alt="AgentScope Studio 界面"></p><p>打开工作站可以看到 <strong>示例</strong>，<strong>工作流</strong>和具体的<strong>编辑画布</strong>。</p><h3 id="对话流程" tabindex="-1">对话流程 <a class="header-anchor" href="#对话流程" aria-label="Permalink to &quot;对话流程&quot;">​</a></h3><p>打开<strong>对话</strong> 这个例子，填入必要的 ak，</p><p><img src="'+e+'" alt="简单对话工作流"></p><p>你可以从工具栏里面投入你需要的元素，</p><p><img src="'+k+'" alt="可用的工作流组件"></p><p>当然也可以修改模板中的内容，比如两个智能体的提示语：</p><p><img src="'+r+'" alt="智能体属性配置"></p><p>点击运行，可以看到运行成功的提示：</p><p><img src="'+o+'" alt="后台运行成功的提示"></p><p>我们现在进入 <code>Dashboard</code> 页面，可以看到我们的程序已经运行了：</p><p><img src="'+d+'" alt="Dashboard 查看程序列表"></p><p>点击程序，默认打开程序的对话页面，我们随便问个问题：</p><p><img src="'+g+'" alt="对话页面测试智能体"></p><p>由于这个流程很简单，就是和大模型对话没啥特别的。</p><h3 id="多人对话" tabindex="-1">多人对话 <a class="header-anchor" href="#多人对话" aria-label="Permalink to &quot;多人对话&quot;">​</a></h3><p>现在我们运行一个多人聊天的程序，</p><p>大致的流程如下：</p><p><img src="'+y+'" alt="多人对话的工作流"></p><p>再次来到聊天界面，我的身份是 King，先给大家放个假：</p><p><img src="'+c+'" alt="测试多人对话智能体"></p><p><strong>Boyu</strong> 竟然说英文，朕很生气，拖出去斩了：</p><p><img src="'+A+`" alt="测试多人对话智能体"></p><p>话说，自己肯定不适合搞格局，上朝要是如此，我真的是能烦死。</p><p>对了，运行程序前，我们可以初始化自己的模型配置，这样就不用再到界面上维护大模型的配置了。</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> agentscope</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> agentscope.agents </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> DialogAgent</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> agentscope.agents </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> UserAgent</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> agentscope.pipelines.functional </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> sequentialpipeline</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">agentscope.init(</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">    model_configs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">[</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">            &quot;model_type&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;gemini_chat&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">            &quot;config_name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;gemini-pro&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">            &quot;model_name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;gemini-pro&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">            &quot;api_key&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;xxx&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,  </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"># Load from env if not provided</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">            &quot;organization&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;xxxyyy&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,  </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"># Load from env if not provided</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">            &quot;generate_args&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">                &quot;temperature&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0.5</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">            },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">            &quot;model_type&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;post_api_chat&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">            &quot;config_name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;my_post_api&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">            &quot;api_url&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;https://xxx&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">            &quot;headers&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: {},</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    ],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span></code></pre></div><h2 id="rag-智能体" tabindex="-1">RAG 智能体 <a class="header-anchor" href="#rag-智能体" aria-label="Permalink to &quot;RAG 智能体&quot;">​</a></h2><p>RAG 智能体是可以基于检索到的知识生成答案的智能体。</p><p>可以在 Agent 初始化的时候传入一个 knowledge 的列表：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">knowledge </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> knowledge_bank.get_knowledge(knowledge_id)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">agent </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> LlamaIndexAgent(</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">    name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;rag_worker&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">    sys_prompt</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#F47067;">{your_prompt}</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">    model_config_name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#F47067;">{your_model}</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">    knowledge_list</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">[knowledge], </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"># provide knowledge object directly</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">    similarity_top_k</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">    log_retrieval</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">False</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">    recent_n_mem_for_retrieve</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span></code></pre></div><p>Knowledge bank 构建也很简单，比如读取 <code>./doc/tutorial</code> 目录下的所有 「.md」 文件作为知识库：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">knowledge_bank.add_data_as_knowledge(</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">      knowledge_id</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;agentscope_tutorial_rag&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">      emb_model_name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;qwen_emb_config&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">      data_dirs_and_types</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">{</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">          &quot;./docs/tutorial&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;.md&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">      },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  )</span></span></code></pre></div><p>而 Knowledge Bank 是一组 Knowledge 的组合，Knowledge 包含以下关键属性：</p><ul><li>knowledge_id: 每个knowledge模块的唯一标识符;</li><li>emb_model_config_name: embedding模型的名称;</li><li>chunk_size: 对文件分块的默认大小;</li><li>chunk_overlap: 文件分块之间的默认重叠大小;</li><li>data_processing: 一个list型的数据处理方法集合。</li></ul><p>最后，<strong>知识模块</strong>目前只支持 LlamaIndex, 后续会提供对 LangChain 的支持。</p>`,95)]))}const _=i(F,[["render",D]]);export{q as __pageData,_ as default};
