import{_ as i,a,af as n,o as t}from"./chunks/framework.C87LdZyP.js";const p="/assets/2532385268492375.C3bpklzb.png",h="/assets/2533049482449166.DNXjItlX.png",l="/assets/2534383207006958.Da1atB3j.png",e="/assets/2535091137261666.DZHDsWWh.png",k="/assets/2535917151909333.DOSMclpf.png",d="/assets/2536189641169958.ImRHuATk.gif",r="/assets/2536401063096000.D7b-T8vH.png",g="/assets/2537438097382583.DuV-3-XO.png",o="/assets/2537728215669750.BKpbeJZq.png",F="/assets/2537941999497291.YWxsDoDm.png",y="/assets/2538040265940833.C437kAHt.png",c="/assets/2538158615067958.BYyjNdr6.png",A="/assets/2538292912485416.Blh0fj0q.png",D="/assets/2541991949464041.iPRPqycO.png",q=JSON.parse('{"title":"Streamlit 高级功能讲解并从头实现一个支持多会话的仿 ChatGPT 应用","description":"","frontmatter":{"title":"Streamlit 高级功能讲解并从头实现一个支持多会话的仿 ChatGPT 应用","date":"2023-07-04T00:00:00.000Z","tags":["ai","ml"],"category":["AI"]},"headers":[],"relativePath":"posts/2023/07/2023-07-04-streamlit-advanced.md","filePath":"posts/2023/07/2023-07-04-streamlit-advanced.md","lastUpdated":1718173059000}'),C={name:"posts/2023/07/2023-07-04-streamlit-advanced.md"};function u(m,s,B,E,b,v){return t(),a("div",null,s[0]||(s[0]=[n('<p>今天介绍 Chat 控件以及几个高级概念，包括页面配置、缓存、组件系统和状态管理，以及如何基于昨天的基础控件以及今天提到的知识去构建下面这个 支持多个对话的 ChatGPT 应用。</p><p><img src="'+p+'" alt=""></p><h2 id="页面配置" tabindex="-1">页面配置 <a class="header-anchor" href="#页面配置" aria-label="Permalink to &quot;页面配置&quot;">​</a></h2><p>Streamlit 写的页面默认标题是 Steamlit，APP 区域的宽度也比较小。</p><p><img src="'+h+'" alt=""></p><p>可以使用 <code>set_page_config</code> 方法来进行设置：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">st.set_page_config(</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">layout</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;wide&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">page_title</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;数翼 Streamlit Chat 示例&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span></code></pre></div><p>重新运行，我们发现标题变了，内容区域也变宽了：</p><p><img src="'+l+'" alt=""></p><p><code>set_page_config</code> 还有别的参数如下，不过除了 Icon 用的不多。</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">st.set_page_config(</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">page_title</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">None</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">page_icon</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">None</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">layout</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;centered&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">initial_sidebar_state</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;auto&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">menu_items</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">None</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span></code></pre></div><h2 id="缓存" tabindex="-1">缓存 <a class="header-anchor" href="#缓存" aria-label="Permalink to &quot;缓存&quot;">​</a></h2><p>由于 Streamlit 在每次用户交互或代码更改时从上到下运行脚本。这种执行模型使开发变得超级简单。但它也面临着两大挑战：</p><ol><li>长时间运行的函数会一次又一次地运行，这会减慢您的应用程序的速度。</li><li>对象会一次又一次地重新创建，这使得它们很难在重新运行或会话中持久保存。</li></ol><p>不过别担心，Streamlit 提供了内置的缓存机制解决这两个问题。</p><p>缓存存储慢速函数调用的结果，因此它们只需要运行一次。这使您的应用程序速度更快，并有助于在重新运行时持久保存对象。</p><p>缓存的实现有两个注解 <code>st.cache_data</code> 和 <code>st.cache_resource</code>。</p><p><img src="'+e+`" alt=""></p><h3 id="cache-data" tabindex="-1">cache_data <a class="header-anchor" href="#cache-data" aria-label="Permalink to &quot;cache_data&quot;">​</a></h3><p><code>st.cache_data</code> 是缓存返回数据的计算的推荐方法： 从 CSV 加载 DataFrame、转换 NumPy 数组、查询 API 或返回可序列化数据对象的任何其他函数（str、int、float、DataFrame、数组、列表等） ）。</p><p>它在每次函数调用时创建一个新的数据副本，使其能够安全地抵御突变和竞争条件。大多数时候我们都用这个方法。</p><h3 id="cache-resource" tabindex="-1">cache_resource <a class="header-anchor" href="#cache-resource" aria-label="Permalink to &quot;cache_resource&quot;">​</a></h3><p><code>st.cache_resource</code> 是缓存诸如 ML 模型或数据库连接之类的全局资源（您不想多次加载的不可序列化对象）的推荐方法。 使用它，您可以在应用程序的所有重新运行和会话之间共享这些资源，而无需复制或重复。</p><h3 id="例子" tabindex="-1">例子 <a class="header-anchor" href="#例子" aria-label="Permalink to &quot;例子&quot;">​</a></h3><p>比如我们加载一个 CSV 文件：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">@st.cache_data</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> load_data</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(url):</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    df </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> pd.read_csv(url)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> df</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">df </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> load_data(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;https://xxx.csv&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">st.dataframe(df)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">st.button(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;Rerun&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span></code></pre></div><p>我们就能使用 <code>@st.cache_data</code> 来缓存。</p><p>如果不缓存，程序每次交互（比如点击任何按钮、或者输入内容）都会从网上下载 CSV 并加载，网络不好或者文件较大会让页面变得不流畅。</p><blockquote><p>缓存是根据参数来区分的，比如 <code>load_data(url)</code> 相同 url 的会被缓存，不同 url 调用第一次会执行函数，第二次就从缓存里面获取。</p></blockquote><h2 id="组件系统" tabindex="-1">组件系统 <a class="header-anchor" href="#组件系统" aria-label="Permalink to &quot;组件系统&quot;">​</a></h2><p>Streamlit 是支持实现很复杂的交互应用的，但是 Streamlit 又很简单，就像迄今为止介绍的内容已经包含了 90% 的内容了，那么 构建复杂应用怎么办？答案就是组件。</p><blockquote><p>组件是扩展 Streamlit 的第三方 Python 程序。</p></blockquote><p>我们可以访问官方的组件页面去看看哪有哪些东西：</p><p><a href="https://streamlit.io/components" target="_blank" rel="noreferrer">https://streamlit.io/components</a></p><p><img src="`+k+`" alt=""></p><p>一般情况下，你需要的功能都能在上面找到。</p><h3 id="barfi" tabindex="-1">barfi <a class="header-anchor" href="#barfi" aria-label="Permalink to &quot;barfi&quot;">​</a></h3><p>我们使用 <strong>barfi</strong> 来实现一个图形化编程环境。</p><p>先安装组件：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">pip</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> barfi</span></span></code></pre></div><p>然后就可以在程序中使用：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> barfi </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> st_barfi, Block</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">feed </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> Block(</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;Feed&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">feed.add_output()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> Block(</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;Result&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">result.add_output()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">st_barfi(</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">base_blocks</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">[feed, result])</span></span></code></pre></div><p><img src="`+d+`" alt="barfi demo"></p><h3 id="echarts" tabindex="-1">echarts <a class="header-anchor" href="#echarts" aria-label="Permalink to &quot;echarts&quot;">​</a></h3><p>或者使用我们熟悉的 ECharts 图表库。</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">pip</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> streamlit-echarts</span></span></code></pre></div><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> streamlit_echarts </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> st_echarts</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">options </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">    &quot;xAxis&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">        &quot;type&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;category&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">        &quot;data&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;Mon&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;Tue&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;Wed&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;Thu&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;Fri&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;Sat&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;Sun&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    },</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">    &quot;yAxis&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: {</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;type&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;value&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">},</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">    &quot;series&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        {</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;data&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: [</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">820</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">932</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">901</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">934</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1290</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1330</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1320</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">], </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;type&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;line&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    ],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">st_echarts(</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">options</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">options)</span></span></code></pre></div><p><img src="`+r+`" alt=""></p><p>大家可以自己去找需要的组件，我就不在展示了。</p><h2 id="状态管理" tabindex="-1">状态管理 <a class="header-anchor" href="#状态管理" aria-label="Permalink to &quot;状态管理&quot;">​</a></h2><p>同样由于 Streamlit 的设计思路，程序变量每次都会重新计算，状态是没办法直接保存的，为了解决这个问题：Streamlit 引入了<strong>会话状态</strong>的概念。</p><p>状态是一种在每个用户会话的重新运行之间共享变量的方法。 除了存储和持久状态的能力之外，Streamlit 还公开了使用回调操作状态的能力。</p><p>会话状态也会在多页应用程序内的应用程序之间持续存在。</p><p>会话状态的使用和字典的用法一样，同时也支持属性语法：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"># 初始化</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">if</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> &#39;key&#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> not</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> in</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> st.session_state:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">    st.session_state[</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">&#39;key&#39;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">]</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &#39;value&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"># 属性语法</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">if</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> &#39;key&#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> not</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> in</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> st.session_state:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">    st.session_state.key</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &#39;value&#39;</span></span></code></pre></div><p>读取：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">st.write(st.session_state.key)</span></span></code></pre></div><p>更新：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">st.session_state.key </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &#39;value2&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">     </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">st.session_state[</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;key&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &#39;value2&#39;</span></span></code></pre></div><p>这样讲，可能大家还是觉得有点模糊，不知道怎么用，下面我们直接用这两篇文章的知识，写一个 ChatGPT 应用。</p><h2 id="chatgpt-应用开发" tabindex="-1">ChatGPT 应用开发 <a class="header-anchor" href="#chatgpt-应用开发" aria-label="Permalink to &quot;ChatGPT 应用开发&quot;">​</a></h2><p>首先我们用到了一个 menu 组件，先安装：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">pip</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> streamlit-option-menu</span></span></code></pre></div><h3 id="应用设计" tabindex="-1">应用设计 <a class="header-anchor" href="#应用设计" aria-label="Permalink to &quot;应用设计&quot;">​</a></h3><p>看过我之前《万物皆可 LLM》专栏的朋友对于写 Chat 应用架构设计肯定都不陌生。</p><p>首先定义对话的数据结构，这里我们定义的简单一点：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">conversations </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> [{</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">    &#39;title&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;我是一个哲学爱好者&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">    &#39;messages&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        (</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;user&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;我是一个哲学爱好者，想和你聊聊哲学。&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        (</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;assistant&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;你好！我很乐意和你聊聊哲学。你想聊什么话题？&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        (</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;user&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;我一直在思考自由意志的问题。你认为自由意志是否存在？&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}, {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">    &#39;title&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;我最近在关注强人工智能&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">    &#39;messages&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        (</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;user&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;我最近在关注强人工智能（AGI）技术，想和你聊聊&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        (</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;assistant&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;你好！我很乐意和你聊聊 AGI 技术。你想聊什么方面？&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        (</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;user&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;我一直在思考 AGI 技术的潜在风险。你认为 AGI 技术会对人类造成威胁吗？&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    ],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}]</span></span></code></pre></div><p>同时准备一些样例数据方便开发调试，如上。</p><h3 id="页面边栏" tabindex="-1">页面边栏 <a class="header-anchor" href="#页面边栏" aria-label="Permalink to &quot;页面边栏&quot;">​</a></h3><p>下面我们实现侧边栏。</p><p><img src="`+g+`" alt=""></p><p>有如下四个内容：</p><ul><li>Logo 图片 <ul><li>使用 <code>st.image</code></li></ul></li><li>模型下拉选择 <ul><li>使用 <code>st.selectbox</code></li></ul></li><li>按钮（创建新的对话） <ul><li>使用 <code>st.button</code></li></ul></li><li>当前的对话列表 <ul><li>使用 <code>option_menu</code> 组件</li></ul></li></ul><p>代码也很简单，先定义支持的模型列表：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">AVAILABLE_MODELS</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> [</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">    &quot;gpt-4&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">    &quot;gpt-4-0314&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">    &quot;gpt-4-32k&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">    &quot;gpt-4-32k-0314&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">    &quot;gpt-3.5-turbo&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">    &quot;gpt-3.5-turbo-0301&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">    &quot;text-davinci-003&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">    &quot;code-davinci-002&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">]</span></span></code></pre></div><p>编写页面：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> streamlit_option_menu</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> import</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> option_menu</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">st.set_page_config(layout</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">&quot;wide&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> page_title=&#39;数翼 Streamlit Chat 示例&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">default_title</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &#39;新的对话&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">#  当前选择的对话</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">if</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> &#39;index&#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> not</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> in</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> st.session_state:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">    st.session_state.index</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 0</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">with</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> st.sidebar:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">    st.image(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">&#39;assets/hero.png&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">    st.subheader(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">&#39;&#39;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> divider=&#39;rainbow&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">    st.write(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">&#39;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">    llm</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> st.selectbox</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">&#39;选择您的模型&#39;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> AVAILABLE_MODELS,</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> index=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    if</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> st.button(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">&#39;新的对话&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">):</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">        conversations.append(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&#39;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">title</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">&#39;: default_title, &#39;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">messages</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">&#39;: []})</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">        st.session_state.index = len(conversations) - 1</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">    titles = []</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">    for idx, conversation in enumerate(conversations):</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">        titles.append(conversation[&#39;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">title</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">&#39;])</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">    option = option_menu(</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">        &#39;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">Conversations</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">&#39;,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">        titles,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">        default_index=st.session_state.index</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">    )</span></span></code></pre></div><p>界面效果如下：</p><p><img src="`+o+`" alt=""></p><h3 id="聊天区域" tabindex="-1">聊天区域 <a class="header-anchor" href="#聊天区域" aria-label="Permalink to &quot;聊天区域&quot;">​</a></h3><p>先定义一个输出聊天消息的函数：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> chat</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(user, message):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    with</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> st.chat_message(user):</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">        print</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(user, </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;:&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, message)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        st.markdown(message)</span></span></code></pre></div><p>然后初始化 OpenAI 客户端：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">openai_api_key </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> os.getenv(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;OPENAI_API_KEY&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">openai </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> OpenAI(</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">model_name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">llm)</span></span></code></pre></div><p>初始化消息的会话变量：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">st.session_state.messages </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> conversations[st.session_state.index][</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;messages&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">]</span></span></code></pre></div><p>然后创建聊天输入框，并循环打印消息：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">prompt </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> st.chat_input(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;请输入你的问题&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> prompt:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> conversations[st.session_state.index][</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;title&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> default_title:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        conversations[st.session_state.index][</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;title&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> prompt[:</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">12</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    for</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> user, message </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> st.session_state.messages:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        chat(user, message)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    chat(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;user&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, prompt)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    answer </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> openai.predict(prompt)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    st.session_state.messages.append((</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;user&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, prompt))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    st.session_state.messages.append((</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;assistant&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, answer))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    chat(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;assistant&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, answer)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    for</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> user, message </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> st.session_state.messages:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        chat(user, message)</span></span></code></pre></div><p>再看看效果：</p><p><img src="`+F+'" alt=""></p><p>测试一下聊天功能，让 AI 鼓励一下我：</p><p><img src="'+y+'" alt=""></p><p>测试下新对话功能，点击新对话之后我们多出来了一个会话，并且用默认的会话标题：</p><p><img src="'+c+'" alt=""></p><p>问问 AI 核污水应该怎么处理：</p><p><img src="'+A+'" alt=""></p><p>OK，功能一切正常。</p><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p>不算上数据和导入代码，我们就用了不到 50 行代码就实现了，一个多对话的类 ChatGPT 应用，是不是很简单。</p><p>当然上面的程序也不算完美，比如没有用 OpenAI 的聊天 API，没有记忆能力，改进的话只需要把上下文组织一下，一起传给 OpenAI 的 聊天接口即可。</p><p><img src="'+D+'" alt=""></p><hr><div style="text-align:center;color:#00000099;font-size:14px;">END</div>',103)]))}const f=i(C,[["render",u]]);export{q as __pageData,f as default};
