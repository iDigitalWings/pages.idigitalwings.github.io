import{_ as i,a,af as n,o as p}from"./chunks/framework.C87LdZyP.js";const c=JSON.parse('{"title":"Spring Boot Profile","description":"","frontmatter":{"title":"Spring Boot Profile","date":"2017-05-18T00:00:00.000Z","tags":["spring","spring-boot","profile","yml"],"ref":["https://docs.spring.io/spring-boot/docs/current/reference/html/howto-properties-and-configuration.html"]},"headers":[],"relativePath":"posts/2017/05/2017-05-18-spring-boot-profile.md","filePath":"posts/2017/05/2017-05-18-spring-boot-profile.md","lastUpdated":1718193786000}'),e={name:"posts/2017/05/2017-05-18-spring-boot-profile.md"};function t(l,s,r,h,o,k){return p(),a("div",null,s[0]||(s[0]=[n(`<p><code>yaml</code>文件是根据<code>---</code>行来分割的一个一个的文档，每个文档都会被解析成一个平铺的Map。</p><p>如果一个<code>yaml</code>配置包含<code>spring.profiles</code>，那么profile值（用逗号分隔）会被装进<code>Environment.acceptsProfiles()</code> 并最终合并起来。</p><p>比如下面的配置：</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">server</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">    port</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">9000</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#6CB6FF;">---</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">spring</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">    profiles</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">development</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">server</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">    port</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">9001</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#6CB6FF;">---</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">spring</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">    profiles</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">production</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">server</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">    port</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0</span></span></code></pre></div><p>会有两个profile，每个profile的配置还可以有单独的一个文件来配置，文件名称为<code>application-\${profile}.yaml</code>。</p><p>最终每个profile的配置会被合并起来，<code>active</code>的profile配置内容会生效。</p><hr><div style="text-align:center;color:#00000099;font-size:14px;">END</div>`,8)]))}const g=i(e,[["render",t]]);export{c as __pageData,g as default};
