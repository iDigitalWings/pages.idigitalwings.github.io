import{_ as i,a as e,af as a,o as n}from"./chunks/framework.C87LdZyP.js";const c=JSON.parse('{"title":"Python 多版本管理工具 Pyenv","description":"","frontmatter":{"title":"Python 多版本管理工具 Pyenv","date":"2024-08-09 10:00:00","tags":["llm"],"category":["Python"]},"headers":[],"relativePath":"posts/2024/08/2024-08-09-pyenv.md","filePath":"posts/2024/08/2024-08-09-pyenv.md","lastUpdated":1726327843000}'),t={name:"posts/2024/08/2024-08-09-pyenv.md"};function l(h,s,p,o,d,r){return n(),e("div",null,s[0]||(s[0]=[a(`<p>pyenv 可让您轻松在多个 Python 版本之间切换。它简单、不引人注目，并遵循 UNIX 传统，即使用单一用途的工具来做好一件事。</p><p>pyenv 的作用是什么：</p><ul><li>允许您根据每个用户<strong>更改全局 Python 版本</strong>。</li><li><strong>为每个项目的 Python 版本</strong>提供支持。</li><li>允许您使用<strong>环境变量覆盖 Python 版本</strong>。</li><li>一次<strong>搜索多个 Python 版本</strong>的命令。这可能有助于使用<a href="https://pypi.python.org/pypi/tox" target="_blank" rel="noreferrer">tox</a>跨 Python 版本进行测试。</li></ul><p>与 pythonbrew 和 pythonz 相比，pyenv <strong>没有</strong>：</p><ul><li><strong>依赖于Python本身</strong>。pyenv由纯shell脚本制作。不存在Python的引导问题。</li><li><strong>需要加载到你的 shell 中</strong>。相反，pyenv 的 shim 方法通过向你的 中添加目录来工作PATH。</li><li><strong>管理虚拟环境</strong>。当然，你可以自己创建虚拟环境 ，或者使用 pyenv-virtualenv 来自动化该过程。</li></ul><h2 id="工作原理" tabindex="-1">工作原理 <a class="header-anchor" href="#工作原理" aria-label="Permalink to &quot;工作原理&quot;">​</a></h2><p>从高层次上讲，pyenv 使用 <code>shim</code> 可执行文件注入到你的 <code>PATH</code> 拦截 Python 命令， 确定你的应用程序指定了哪个 Python 版本，并将你的命令传递给正确的 Python 安装。</p><h3 id="了解-path" tabindex="-1">了解 PATH <a class="header-anchor" href="#了解-path" aria-label="Permalink to &quot;了解 PATH&quot;">​</a></h3><p>当您运行 <code>python</code> 或 <code>pip</code> 之类的命令时， 您的 <code>shell</code> (<code>bash</code> / <code>zshrc</code> / ...) 会搜索目录列表以查找具有该名称的可执行文件。 此目录列表位于名为 <code>PATH</code> 的环境变量中，列表中的每个目录都用冒号分隔：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">/usr/local/bin:/usr/bin:/bin</span></span></code></pre></div><p>目录中的<code>PATH</code>从左到右进行搜索， 因此列表开头目录中匹配的可执行文件优先于末尾目录中的可执行文件。 在此示例中， 将首先搜索<code>/usr/local/bin</code>目录，然后搜索<code>/usr/bin</code>，然后搜索<code>/bin</code>。</p><h3 id="了解-shim-垫片" tabindex="-1">了解 shim（垫片） <a class="header-anchor" href="#了解-shim-垫片" aria-label="Permalink to &quot;了解 shim（垫片）&quot;">​</a></h3><p><code>pyenv</code> 的工作原理是在：<code>PATH</code> 前面插入一个<code>shims</code>目录：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">$(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">pyenv</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> root</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)/shims:/usr/local/bin:/usr/bin:/bin</span></span></code></pre></div><p>通过一个称为<code>rehashing</code>的过程， pyenv 在该目录中维护 shim，以匹配每个已安装的 Python 版本中的每个 Python 命令（<code>python</code>、<code>pip</code>等）。</p><p>Shims 是轻量级可执行文件，它只是将你的命令传递给 pyenv。 因此，在安装了 pyenv 的情况下，当你运行 pip 时，你的操作系统将执行以下操作：</p><ul><li>搜索<code>PATH</code>找到名为 <code>pip</code> 的命令</li><li>在 <code>PATH</code> 的开头找到名为 <code>pip</code> 的 <code>pyenv shim</code></li><li>运行名为 <code>pip</code> 的 shim，它将命令传递给 <code>pyenv</code></li></ul><h3 id="了解-python-版本选择" tabindex="-1">了解 Python 版本选择 <a class="header-anchor" href="#了解-python-版本选择" aria-label="Permalink to &quot;了解 Python 版本选择&quot;">​</a></h3><p>当你执行 shim 时，pyenv 将按以下顺序从以下来源读取以确定使用哪个 Python 版本：</p><ol><li>环境变量<code>PYENV_VERSION</code>（如果指定）。您可以使用该<code>pyenv shell</code>命令在当前 shell 会话中设置此环境变量。</li><li>当前目录中的应用程序文件<code>.python-version</code>（如果存在）。您可以使用 <code>pyenv local</code> 命令修改当前目录的 <code>.python-version</code> 文件。</li><li>通过搜索每个父目录找到的第一个<code>.python-version</code> 文件（如果有），直到到达文件系统的根目录。</li><li>全局 <code>$(pyenv root)/version</code> 文件。您可以使用命令 <code>pyenv global</code> 修改此文件。如果不存在全局版本文件，pyenv 会假定您想要使用「 <strong>系统Python</strong>」（见下文）。</li></ol><p>特殊版本名称<code>system</code>表示使用在 shims <code>PATH</code> 条目之后在 <code>PATH</code> 上找到的任何 Python （换句话说，如果 Pyenv shims 不在 PATH 上，则将运行任意的 Python）。 Pyenv 认为这些安装不在其控制范围内，并且不会尝试以任何方式检查或区分它们。 因此，例如，如果您使用的是 MacOS，并且拥有 OS 捆绑的 Python 3.8.9 和 Homebrew 安装的 Python 3.9.12 和 3.10.2， 对于 Pyenv，这仍然是一个「<code>system</code>系统」版本，并且将运行您指定的可执行文件名称下 PATH 上的第一个版本。</p><div class="admonition note"><p class="admonition-title">注意</p><p>您可以同时激活多个版本，包括同时激活多个版本的 Python2 或 Python3。 这允许并行使用 Python2 和 Python3，并且是 <code>tox</code> 等工具所必需的。 例如，要指示 Pyenv 首先使用系统 Python 和 Python3（例如 2.7.9 和 3.4.2）， 但也有 Python 3.3.6、3.2.1 和 2.5.2 可用， 您首先需要<code>pyenv install</code>缺少的版本， 然后设置<code>pyenv global system 3.3.6 3.2.1 2.5.2</code>。 然后，您将能够使用适当的<code>pythonX</code>或<code>pythonX.Y</code>名称调用其中任何一个版本。 您还可以手动在文件<code>.python-version</code>中指定多个版本，用换行符分隔。以 <code>#</code> 开头的行将被忽略。</p></div><p><code>pyenv which &lt;command&gt;</code>显示通过 shim 调用 <code>&lt;command&gt;</code> 时将运行哪个实际可执行文件。 例如，如果您安装了 3.3.6、3.2.1 和 2.5.2， 其中选择了 3.3.6 和 2.5.2，并且您的系统 Python 是 3.2.5， <code>pyenv which python2.5</code> 应该显示<code>$(pyenv root)/versions/2.5.2/bin/python2.5</code>。 则由于 <code>fall-through</code>（见下文）， <code>pyenv which python3</code>显示<code>$(pyenv root)/versions/3.3.6/bin/python3</code>和<code>pyenv which python3.2</code>（system环境的）。</p><p>如果相应的可执行文件不存在于任何选定的 Python 安装中，则 Shim 还会继续执行其他操作<code>PATH</code>。 这样，您就可以使用安装在系统其他地方的任何程序，只要它们未被选定的 Python 安装所遮蔽。</p><h3 id="找到-pyenv-提供的-python-安装" tabindex="-1">找到 Pyenv 提供的 Python 安装 <a class="header-anchor" href="#找到-pyenv-提供的-python-安装" aria-label="Permalink to &quot;找到 Pyenv 提供的 Python 安装&quot;">​</a></h3><p>一旦 pyenv 确定了您的应用程序指定了哪个版本的 Python，它就会将命令传递给相应的 Python 安装。</p><p>每个 Python 版本都安装在 下的各自目录中 <code>$(pyenv root)/versions</code>。</p><p>例如，您可能安装了以下版本：</p><ul><li><code>$(pyenv root)/versions/2.7.8/</code></li><li><code>$(pyenv root)/versions/3.4.2/</code></li><li><code>$(pyenv root)/versions/pypy-2.4.0/</code></li></ul><p>就 Pyenv 而言，版本名称只是<code>$(pyenv root)/versions</code>下的目录。</p><h2 id="安装" tabindex="-1">安装 <a class="header-anchor" href="#安装" aria-label="Permalink to &quot;安装&quot;">​</a></h2><h3 id="unix-macos" tabindex="-1">UNIX/MacOS <a class="header-anchor" href="#unix-macos" aria-label="Permalink to &quot;UNIX/MacOS&quot;">​</a></h3><h4 id="macos-中的-homebrew" tabindex="-1">macOS 中的 Homebrew <a class="header-anchor" href="#macos-中的-homebrew" aria-label="Permalink to &quot;macOS 中的 Homebrew&quot;">​</a></h4><p>考虑使用Homebrew安装：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">brew</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> update</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">brew</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> pyenv</span></span></code></pre></div><p>如果您想安装（并更新到）Pyenv 的最新开发版而不是最新版本，请运行：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">brew</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> pyenv</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> --head</span></span></code></pre></div><h4 id="shell-命令自动安装" tabindex="-1">shell 命令自动安装 <a class="header-anchor" href="#shell-命令自动安装" aria-label="Permalink to &quot;shell 命令自动安装&quot;">​</a></h4><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">curl</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> https://pyenv.run</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> bash</span></span></code></pre></div><h3 id="windows" tabindex="-1">Windows <a class="header-anchor" href="#windows" aria-label="Permalink to &quot;Windows&quot;">​</a></h3><p>Pyenv 不正式支持 Windows，并且无法在 Windows Subsystem for Linux 之外的 Windows 上运行。</p><p>如果您使用的是 Windows，我们建议您使用 @kirankotari 的 <a href="https://github.com/pyenv-win/pyenv-win" target="_blank" rel="noreferrer">pyenv-win</a> Fork项目。</p><h2 id="为-pyenv-设置-shell-环境" tabindex="-1">为 Pyenv 设置 shell 环境 <a class="header-anchor" href="#为-pyenv-设置-shell-环境" aria-label="Permalink to &quot;为 Pyenv 设置 shell 环境&quot;">​</a></h2><h3 id="bash" tabindex="-1">Bash <a class="header-anchor" href="#bash" aria-label="Permalink to &quot;Bash&quot;">​</a></h3><p>通过在终端中运行以下命令添加 <code>~/.bashrc </code>命令：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">echo</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &#39;export PYENV_ROOT=&quot;$HOME/.pyenv&quot;&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> &gt;&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> ~/.bashrc</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">echo</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &#39;command -v pyenv &gt;/dev/null || export PATH=&quot;$PYENV_ROOT/bin:$PATH&quot;&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> &gt;&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> ~/.bashrc</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">echo</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &#39;eval &quot;$(pyenv init -)&quot;&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> &gt;&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> ~/.bashrc</span></span></code></pre></div><p>如果您有<code>~/.profile</code>、<code>~/.bash_profile</code>或<code>~/.bash_login</code>，也请将命令添加到那里。 如果您没有这些，请将它们添加到<code>~/.profile</code>。</p><h3 id="zsh" tabindex="-1">Zsh： <a class="header-anchor" href="#zsh" aria-label="Permalink to &quot;Zsh：&quot;">​</a></h3><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">echo</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &#39;export PYENV_ROOT=&quot;$HOME/.pyenv&quot;&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> &gt;&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> ~/.zshrc</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">echo</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &#39;[[ -d $PYENV_ROOT/bin ]] &amp;&amp; export PATH=&quot;$PYENV_ROOT/bin:$PATH&quot;&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> &gt;&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> ~/.zshrc</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">echo</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &#39;eval &quot;$(pyenv init -)&quot;&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> &gt;&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> ~/.zshrc</span></span></code></pre></div><p>如果您也希望在非交互式登录 shell 中获取 Pyenv，也可以将命令添加到<code>~/.zprofile</code>或<code>~/.zlogin</code>。</p><h3 id="重启-shell" tabindex="-1">重启 shell <a class="header-anchor" href="#重启-shell" aria-label="Permalink to &quot;重启 shell&quot;">​</a></h3><p>以使PATH更改生效。</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">exec</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">$SHELL</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;</span></span></code></pre></div><h2 id="使用" tabindex="-1">使用 <a class="header-anchor" href="#使用" aria-label="Permalink to &quot;使用&quot;">​</a></h2><h3 id="安装-python-版本" tabindex="-1">安装 Python 版本 <a class="header-anchor" href="#安装-python-版本" aria-label="Permalink to &quot;安装 Python 版本&quot;">​</a></h3><p>运行<code>pyenv install -l </code>会给出所有可用版本的列表。</p><p>要安装其他 Python 版本，请使用<code>pyenv install</code>。</p><p>例如，要下载并安装 Python 3.10.4，请运行：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">pyenv</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> install</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 3.10.14</span></span></code></pre></div><p>输出大概如下：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> pyenv install 3.10.14</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">python-build:</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> use</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> openssl</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> from</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> homebrew</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">python-build:</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> use</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> readline</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> from</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> homebrew</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">Downloading</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> Python-3.10.14.tar.xz...</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt; </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">https://www.python.org/ftp/python/3.10.14/Python-3.10.14.tar.xz</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">Installing</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> Python-3.10.14...</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">python-build:</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> use</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> tcl-tk</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> from</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> homebrew</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">python-build:</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> use</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> readline</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> from</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> homebrew</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">python-build:</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> use</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> zlib</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> from</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> xcode</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> sdk</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">Installed</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> Python-3.10.14</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> to</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> /Users/shuyi/.pyenv/versions/3.10.14</span></span></code></pre></div><div class="admonition note"><p class="admonition-title">注意</p><p>大多数 Pyenv 提供的 Python 版本都是源代码版本，并且是在安装过程中从源代码构建的（这就是为什么您需要预先安装 Python 构建依赖项） 。</p></div><p>安装之后可以查看 Python 目录位置：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> which python                                                                                                         ok </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">|</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> 08:14:41</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">/Users/shuyi/.pyenv/shims/python</span></span></code></pre></div><h3 id="python-版本" tabindex="-1">Python 版本 <a class="header-anchor" href="#python-版本" aria-label="Permalink to &quot;Python 版本&quot;">​</a></h3><p>除了<code>uninstall</code>之外的所有 Pyenv 子命令都会自动将完整前缀解析为相应版本行中的最新版本。</p><p><code>pyenv install</code>选择最新的已知版本，而其他子命令则选择最新安装的版本。</p><p>例如安装然后切换到最新的 3.10 版本：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">pyenv</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> install</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 3.10</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">pyenv</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> global</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 3.10</span></span></code></pre></div><p>您可以运行<code>pyenv latest -k &lt;prefix&gt;</code>来查看<code>pyenv install</code>如何解析特定前缀， 或者<code>pyenv latest &lt;prefix&gt;</code>查看其他子命令如何解析它。</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> pyenv latest -k 3.10                                                                                                 ok </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">|</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> 08:15:36</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">3.10.14</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> pyenv latest -k 3.11                                                                                                 ok </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">|</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> 08:20:20</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">3.11.9</span></span></code></pre></div><h2 id="python-版本切换" tabindex="-1">Python 版本切换 <a class="header-anchor" href="#python-版本切换" aria-label="Permalink to &quot;Python 版本切换&quot;">​</a></h2><p>要选择 Pyenv 安装的 Python 作为要使用的版本，请运行以下命令之一：</p><ul><li><code>pyenv shell &lt;version&gt;</code> 仅为当前 shell 会话选择</li><li><code>pyenv local &lt;version&gt;</code> 当您位于当前目录（或其子目录）时自动选择</li><li><code>pyenv global &lt;version&gt;</code> 为您的用户帐户进行全局选择</li><li></li></ul><p>例如，选择上面提到的新安装的 Python 3.10.14 作为您的首选版本：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">pyenv</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> global</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 3.10.14</span></span></code></pre></div><p>现在，无论何时调用<code>pip</code>等 Python 命令，都会运行 Pyenv 提供的 3.10.4 安装中的可执行文件，而不是系统 Python。</p><p>使用<code>system</code>作为版本名称会将选择重置为系统提供的 Python。</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">pyenv</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> global</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> system</span></span></code></pre></div><h2 id="卸载-python-版本" tabindex="-1">卸载 Python 版本 <a class="header-anchor" href="#卸载-python-版本" aria-label="Permalink to &quot;卸载 Python 版本&quot;">​</a></h2><p>随着时间的推移，你的 <code>$(pyenv root)/versions</code> 目录中会积累大量的 Python 版本。</p><p>要删除旧的 Python 版本，请使用<code>pyenv uninstall &lt;versions&gt;</code>。</p><p>或者，您可以简单地<code>rm -rf</code>找到要删除的版本的目录。 您可以使用 <code>pyenv prefix</code> 命令找到特定 Python 版本的目录， 例如<code>pyenv prefix 2.6.8</code>。</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> pyenv prefix                                                                                                         ok </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">|</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> 08:22:59</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">/Users/shuyi/.pyenv/versions/3.10.14</span></span></code></pre></div><div class="admonition note"><p class="admonition-title">插件卸载</p><p>插件可能会在卸载时运行其他操作，您也需要手动执行这些操作。例如 <code>Pyenv-Virtualenv</code> 还会删除链接到要卸载的版本的任何虚拟环境。</p></div><h2 id="升级" tabindex="-1">升级 <a class="header-anchor" href="#升级" aria-label="Permalink to &quot;升级&quot;">​</a></h2><h3 id="使用-homebrew-升级" tabindex="-1">使用 Homebrew 升级 <a class="header-anchor" href="#使用-homebrew-升级" aria-label="Permalink to &quot;使用 Homebrew 升级&quot;">​</a></h3><p>如果你已经使用 Homebrew 安装了 Pyenv，请使用以下命令进行升级：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">brew</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> upgrade</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> pyenv</span></span></code></pre></div><p>要从 Pyenv 的一个版本切换到最新的开发版本，请使用：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">brew</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> uninstall</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> pyenv</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">brew</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> pyenv</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> --head</span></span></code></pre></div><p>然后您就可以照常 \`brew upgrade pyenv 升级它。</p><h3 id="使用安装程序" tabindex="-1">使用安装程序 <a class="header-anchor" href="#使用安装程序" aria-label="Permalink to &quot;使用安装程序&quot;">​</a></h3><p>如果您已经使用 Pyenv-installer 安装了 Pyenv，那么您可以升级 Pyenv 和所有已安装插件的 Pyenv-Update 插件：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">pyenv</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> update</span></span></code></pre></div><h2 id="卸载-pyenv" tabindex="-1">卸载 pyenv <a class="header-anchor" href="#卸载-pyenv" aria-label="Permalink to &quot;卸载 pyenv&quot;">​</a></h2><p>pyenv 的简单性使其可以轻松地暂时禁用它，或从系统中卸载。</p><ol><li><p>要<strong>禁用 Pyenv</strong> 管理您的 Python 版本，只需从 shell 启动配置中删除 <code>pyenv init</code>调用即可。 这将从<code>PATH</code>中删除 Pyenv shims 目录 ，并且将来的调用将执行系统 Python 版本，就像在 Pyenv 之前一样。</p><p>pyenv 仍可通过命令行访问，但您的 Python 应用程序不会受到版本切换的影响。</p></li><li><p>要完全卸载 Pyenv，请从 shell 启动配置中删除所有 Pyenv 配置行，然后删除其根目录。 这将删除目录下安装的所有 Python 版本<code>$(pyenv root)/versions/</code>：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">rm</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> -rf</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> $(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">pyenv</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> root</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span></code></pre></div><p>如果您使用包管理器安装了 Pyenv，最后一步是删除 Pyenv 包。例如，对于 Homebrew：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">brew</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> uninstall</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> pyenv</span></span></code></pre></div></li></ol><h2 id="pyenv-插件" tabindex="-1">Pyenv 插件 <a class="header-anchor" href="#pyenv-插件" aria-label="Permalink to &quot;Pyenv 插件&quot;">​</a></h2><p>Pyenv 提供了一种通过插件扩展和定制其功能的简单方法：</p><ul><li>只需创建一个插件目录并将 shell 脚本放在它的某个子路径上，</li><li>并添加在特定时刻需要运行的任何额外逻辑。</li></ul><p>大多数可以放在 <code>$PYENV_ROOT/&lt;whatever&gt;</code> 之下的东西，也可以放在 <code>$PYENV_ROOT/plugins/your_plugin_name/&lt;whatever&gt;</code> 之下。</p><p>可以在<a href="https://github.com/pyenv/pyenv/wiki/Plugins" target="_blank" rel="noreferrer">插件列表</a>查看常用的插件，或者开发自己的插件。</p><p>官方的插件有：</p><ul><li><a href="https://github.com/pyenv/pyenv-virtualenv" target="_blank" rel="noreferrer">virtualenv</a> - 使用 pyenv 管理虚拟环境的标准方式（以前称为<a href="https://github.com/pyenv/python-virtualenv" target="_blank" rel="noreferrer">python-virtualenv</a>）</li><li><a href="https://github.com/pyenv/pyenv-virtualenvwrapper" target="_blank" rel="noreferrer">virtualenvwrapper</a> - 允许你使用 virtualenvwrapper 玩 pyenv</li><li><a href="https://github.com/pyenv/pyenv-pip-migrate" target="_blank" rel="noreferrer">pip-migrate</a> - 将 pip 包从一个 Python 版本迁移到另一个版本</li><li><a href="https://github.com/pyenv/pyenv-update" target="_blank" rel="noreferrer">update</a> - 更新 pyenv 和插件</li><li><a href="https://github.com/pyenv/pyenv-installer" target="_blank" rel="noreferrer">安装程序</a> - 此工具用于安装<code>pyenv</code>和朋友</li><li><a href="https://github.com/pyenv/pyenv-doctor" target="_blank" rel="noreferrer">doctor-</a> - 验证 pyenv 安装</li><li><a href="https://github.com/pyenv/pyenv-ccache" target="_blank" rel="noreferrer">ccache</a> - 通过利用，使 Python 的构建速度更快<code>ccache</code>。</li></ul><h2 id="项目信息" tabindex="-1">项目信息 <a class="header-anchor" href="#项目信息" aria-label="Permalink to &quot;项目信息&quot;">​</a></h2><ul><li>源码： <a href="https://github.com/pyenv/pyenv" target="_blank" rel="noreferrer">https://github.com/pyenv/pyenv</a></li></ul>`,107)]))}const y=i(t,[["render",l]]);export{c as __pageData,y as default};
