import{_ as a,a as n,af as t,o as p}from"./chunks/framework.C87LdZyP.js";const l="/assets/3257071455626166.DiArjuGp.png",e="/assets/3256693885522583.S5NoUb7N.png",h="/assets/3248650423926416.C6-EpfKO.png",r="/assets/3247049674360000.C1Ld6gOM.png",k="/assets/3247528121239708.BjwDFMuF.png",o="/assets/3247737675267333.CGeydFVL.png",d="/assets/3247650692078375.BOOBPgKs.png",g="/assets/3244954746217500.Dkty0NaU.png",c="/assets/3248530231206375.DXReWO33.png",y="/assets/3242456949043541.D5S_XVjL.png",A="/assets/3249457225536458.Bq2a9pTF.png",D="/assets/3216666843557791.5XxeXaW6.png",C="/assets/3216989072562916.FMVu20eA.png",F="/assets/3217675533819083.DrEnnqz_.png",m="/assets/3250605215566708.CC9dpqDi.png",B="/assets/3250215218004916.-zhPK9NQ.png",u="/assets/3250944243059833.eFkkXOtF.png",b="/assets/3252370856404625.CdZWUF7v.png",E="/assets/3252862216427125.CIgJDpba.png",i="/assets/3252218850578958._9rvBGhi.png",_="/assets/3253621290555750.C2aBisX8.png",v="/assets/3254476879047416.DPrtWPJ5.png",N=JSON.parse('{"title":"《构建个人知识图谱》002：规划你的「第二大脑」","description":"","frontmatter":{"title":"《构建个人知识图谱》002：规划你的「第二大脑」","date":"2023-07-19T00:00:00.000Z","tags":["ai","ml"],"category":["AI"]},"headers":[],"relativePath":"topics/knowledge-graph/articles/2023-07-19-knowledge-graph-002-design.md","filePath":"topics/knowledge-graph/articles/2023-07-19-knowledge-graph-002-design.md","lastUpdated":1718173059000}'),f={name:"topics/knowledge-graph/articles/2023-07-19-knowledge-graph-002-design.md"};function x(q,s,P,O,j,w){return p(),n("div",null,s[0]||(s[0]=[t('<div class="admonition abstract"><p class="admonition-title">abstract</p><p>今天跟大家聊聊如何规划个人知识图谱。每个人对图谱的需求和理解不同，规划设计以及使用方式当然也不同， 包括上一篇讲的收集数据、清理数据、抽取融合这些步骤也不尽相同，只有把自己的需求想清楚才能构建出能 充当自己「第二大脑」的知识图谱。</p></div><h2 id="为什么构建个人知识图谱" tabindex="-1">为什么构建个人知识图谱 <a class="header-anchor" href="#为什么构建个人知识图谱" aria-label="Permalink to &quot;为什么构建个人知识图谱&quot;">​</a></h2><blockquote><p>第一个要回答的问题就是为什么构建 <strong>个人知识图谱？</strong></p></blockquote><p>这个问题对于我个人来说很简单，就是为了<strong>管理自己的知识，构建完整的知识体系，打造第二大脑</strong>，当然我的要求在知识管理的基础上对知识实体识别的需求可能更贴合知识图谱的概念。</p><h3 id="知识管理的形式" tabindex="-1">知识管理的形式？ <a class="header-anchor" href="#知识管理的形式" aria-label="Permalink to &quot;知识管理的形式？&quot;">​</a></h3><blockquote><p>是不是所有人都需要构建知识图谱？</p></blockquote><p>答案肯定是否定的。知识管理有很多形式。你可以记日记、记笔记、用书签管理、写博客、用带着目录树的工具整理资料、或者画各种知识导图沉淀。</p><p><img src="'+l+'" alt="知识管理的方式"></p><p>而知识图谱知识一种比较好的可视化方式，并且和人类大脑的神经网络原理比较类似的一种实现方式， 而恰恰对于我来说，大家最常用的按照目录总结知识不能够满足我的需求，因为除了<strong>大数据量下不够直观</strong>，就单单把<strong>所有知识都归类到目录</strong>里面，就是一件很困难的事情。</p><p><img src="'+e+'" alt="谷歌和哈弗绘制的大脑神经网络(百万分之一大脑)"></p><h2 id="现有工具能满足么" tabindex="-1">现有工具能满足么？ <a class="header-anchor" href="#现有工具能满足么" aria-label="Permalink to &quot;现有工具能满足么？&quot;">​</a></h2><p>我觉得这个是大家在计划构建知识图谱之后第一个要考虑的问题：是不是有现有的工具能满足你对知识管理的需求。</p><p>除了我的脑子，我用到（用过）的工具很多，包含但不限于下面这些，我觉得他们中的某一款能已经能满足大多数人的需求：</p><ul><li>Microsoft OneNote</li><li>MacOS Notes</li><li>Quiver</li><li>Youdao Notes</li><li>印象笔记</li><li>Obsidian</li><li>XMind</li><li>The Brain</li><li>iThoughtX</li><li>VuePress</li><li>Notion</li><li>Excel</li></ul><p><img src="'+h+'" alt="使用过的各种工具"></p><p>所有的工具都有各自的优点，但是也都有不那么满足我需求的地方，经常想要是能把他们的优点结合起来就好了。</p><ul><li>一些脑图工具适合简答的展示，但是<strong>复杂内容关联</strong>，<strong>大数据管理</strong> 和搜索能力不够；</li><li>大多数笔记工具<strong>写作体验</strong>很好、<strong>全文搜索</strong>很方便，但是<strong>关键词搜索</strong>不行；</li><li>类似 Obsidian 这样的包含图谱能力的工具提供了很棒的功能，其实能解决很多人的问题，但是其扩展方式包括 UI 体验，有点儿不太适合我打造第二大脑的想法。</li></ul><p>如果你只是想画一些脑图，有很多优秀的工具来实现。</p><div class="admonition note"><p class="admonition-title">XMind</p><p><a href="https://xmind.app/features/" target="_blank" rel="noreferrer">XMind</a> 是很流行的脑图工具。</p><p><img src="'+r+'" alt="XMind"></p></div><div class="admonition note"><p class="admonition-title">iThoughts </p><p><a href="https://www.toketaware.com/ithoughts-osx" target="_blank" rel="noreferrer">iThoughts</a> 同样是一款优秀的脑图工具，他支持多个文件进行关联，显示在同一个脑图里， 让你能够更自由的组织大规模脑图。</p><p><img src="'+k+'" alt="iThoughts"></p></div><p>同样的，笔记软件也有很多优秀的。</p><div class="admonition note"><p class="admonition-title"> 有道云笔记</p><p>有道云笔记是我比较喜欢的笔记工具，支持、文档、 表格，流程图，脑图，Markdown 等多种格式。</p><p><img src="'+o+'" alt="有道云笔记"></p></div><div class="admonition note"><p class="admonition-title">微软 OneNote</p><p>微软的 OneNote 也是一款很棒的笔记工具。</p><p><img src="'+d+'" alt=""></p></div><p>Obsidian 包括很多国产的类似工具提供了知识关联和脑图展示。</p><div class="admonition note"><p class="admonition-title">Obsidian</p><p>Obsidian 是一款很强大的知识管理工具，也支持脑图模式，并且有各种插件可以用。</p><p><img src="'+g+'" alt="Obsidian 社区图谱展示"></p><p><img src="'+c+'" alt="Obsidian 社区图谱展示"></p></div><p>而现如今我觉得最大的问题就是搜索、知识关联、资源连接。而做一个一劳永逸的工具，可能对我来说是比较好的方案。</p><h2 id="个人知识图谱放什么" tabindex="-1">个人知识图谱放什么 <a class="header-anchor" href="#个人知识图谱放什么" aria-label="Permalink to &quot;个人知识图谱放什么&quot;">​</a></h2><p>好了，既然我们已经确定了要做知识图谱，而不仅仅是记录，下一个问题就是个人知识图谱里面<strong>放什么</strong>内容？</p><p><img src="'+y+'" alt="个人知识图谱内容"></p><p>由于我现在还主要和各种<strong>技术</strong>打交道，所以我的知识图谱主要就是各种技术工具（包含各种开源项目）、技能、方法论等。</p><p>另外我还写了很多<strong>文章</strong>，除了很早之前在 JavaEye、博客园等平台的「旧文章」之外，还有大几百篇博客文章，也没有很认真的进行分类归纳， 内容也比较杂，不能整体进行查看管理，这块后期我也要集成到知识图谱里面。</p><p>除了技术和历史文章，国内外的公司以及产品，一些商业思维和管理框架我也很感兴趣，当然一并放入我的知识图谱里面了。</p><h2 id="如何动手做个人知识图谱" tabindex="-1">如何动手做个人知识图谱？ <a class="header-anchor" href="#如何动手做个人知识图谱" aria-label="Permalink to &quot;如何动手做个人知识图谱？&quot;">​</a></h2><blockquote><p>经常有人开玩笑说，价值一个亿的商业想法有了，就差一个程序员、一个产品经理、一个设计师？</p></blockquote><p>做<strong>个人知识图谱</strong>，首先要有<strong>知识</strong>吧，其次要有<strong>图谱</strong>吧，咱们简单粗暴一点拆解，知识图谱就先做这两个东西。 既然定位是<strong>个人</strong> 的，那肯定怎么开心怎么搞了。</p><p><img src="'+A+'" alt="知识 + 图谱"></p><h3 id="如何进行知识存储" tabindex="-1">如何进行知识存储 <a class="header-anchor" href="#如何进行知识存储" aria-label="Permalink to &quot;如何进行知识存储&quot;">​</a></h3><p>为了检索效率以及满足未来扩展能力，我们直接用最简单的方案，使用数据库存储知识。</p><div class="admonition note"><p class="admonition-title">图数据库 vs 关系数据库</p><p>用来存储图数据首选当然是用图数据库了，比如大名鼎鼎的 Neo4j，有很多牛逼的图计算功能。</p><p>但是，图数据库的强大功能隐藏了很多技术细节，从使用和理解上对初学者有一定难度。 所以这个系列文章我们从头开始定义图结构，使用关系数据库来实现后端存储。</p></div><p>我们先实现一个最最简单的图模型，有两个对象：「<strong>节点</strong>」和「<strong>边</strong>」。</p><p><img src="'+D+'" alt="最基本的节点和边对象"></p><p>节点和边只有最基本的属性，足矣支撑我们实现最初的知识图谱。 后续可以在此基础上为节点和边<strong>补充更多的属性</strong>， 比如节点类型、节点标签、节点颜色，边类型等。</p><p>这里简单用代码表示一下数据结构：</p><p><img src="'+C+`" alt=""></p><p>转换成代码可能是这样：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">class</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> KgNode</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">    String</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> id</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">    String</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> name</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">class</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> KgEdge</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">    String</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> source</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">    String</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> target</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><p>有很多可用的 ORM 和数据库框架来实现数据存储，比如 Python 的 SqlAlchemy，Java 的 Spring Data JPA等， 后端实现我就不再赘述，大家可以参考使用自己喜欢的方法来实现，</p><div class="admonition note"><p class="admonition-title">一定要用数据库么？</p><p>当然不一定啦，比如前面提到的一些笔记工具，就没有用传统的数据库。</p><p>我们数据也可以记录在 <strong>Json\\CSV 文本文件</strong>里面，这样就不用需要后端程序处理了， 我之前做<strong>技术雷达</strong>的时候就是用 Json 存储的数据，数据量不大的话很方便，而且数据通用型好，数据迁移也很容易。</p><p><img src="`+F+'" alt="AOE的技术雷达，就不放我的数据了"></p></div><h3 id="如何进行图谱展示" tabindex="-1">如何进行图谱展示？ <a class="header-anchor" href="#如何进行图谱展示" aria-label="Permalink to &quot;如何进行图谱展示？&quot;">​</a></h3><p>我们还是使用通用的方式，使用 Web 浏览器来展示图谱，简单说，就是写一个网页。</p><p><strong>工欲善其事，必先利其器</strong>，对图谱进行可视化肯定要有个趁手的工具，常见(或者不常见)的可视化库有下面几个：</p><ul><li>d3.js</li><li>ECharts</li><li>AntV</li><li>Graphology</li><li>cola.js</li></ul><div class="admonition note"><p class="admonition-title">d3-force</p><p><a href="https://d3js.org/" target="_blank" rel="noreferrer">d3.js</a> 是一个超棒的可视化图形库，而 <a href="https://d3js.org/d3-force" target="_blank" rel="noreferrer">d3-force</a> 组件实现了引力图可以很好的进行图谱展示。</p><p><img src="'+m+'" alt="d3.js"></p></div><div class="admonition note"><p class="admonition-title">d3-force-3d</p><p><a href="https://github.com/vasturiano/3d-force-graph" target="_blank" rel="noreferrer">D3 Force 3d</a> 是一个基于 d3.js 的 3D 引力图实现。</p><p><img src="'+B+'" alt="d3 force 3d"></p></div><div class="admonition note"><p class="admonition-title">ECharts</p><p><a href="https://echarts.apache.org/" target="_blank" rel="noreferrer">ECharts</a> 我们很熟悉了，之前《万物皆可 LLM》系列里面也用到了 ECharts 进行可视化。 它也提供了关系图来帮助我们进行图谱可视化。</p><p><img src="'+u+'" alt="ECharts 关系图"></p></div><div class="admonition note"><p class="admonition-title">AntV G6</p><p>AntV 的 <a href="https://g6.antv.antgroup.com/" target="_blank" rel="noreferrer">G6</a> 提供了图可视化能力，之前我是很看好这个工具的， 但是用过了几天，越用越火大，可能是我和阿里系的开源工具无缘吧。</p><p><img src="'+b+'" alt="AntV G6"></p><p>它还提供了基于 G6 的封装 <a href="https://graphin.antv.vision/zh" target="_blank" rel="noreferrer">Graphin</a>，文档和介绍都挺好，就是用起来感觉太复杂了，试了试还是放弃了。</p></div><div class="admonition note"><p class="admonition-title">Graphology</p><p>可以通过查看 <a href="https://graphology.github.io/" target="_blank" rel="noreferrer">Graphology 的文档</a> 或者 可以通过查看 <a href="https://graphology.github.io/" target="_blank" rel="noreferrer">Graphology 的文档</a> 或者 <a href="https://codesandbox.io/examples/package/graphology" target="_blank" rel="noreferrer">在线Examples</a> 来使用。</p><p><img src="'+E+'" alt="Graphology Example"></p></div><p>我最终选择了使用 <strong>d3-force-3d</strong> 来实现图谱展现的第一版。</p><p><img src="'+i+'" alt="图谱可视化预览"></p><h2 id="知识图谱实现" tabindex="-1">知识图谱实现 <a class="header-anchor" href="#知识图谱实现" aria-label="Permalink to &quot;知识图谱实现&quot;">​</a></h2><p>个人知识图谱的方案如上所述，下面大概讲一下我怎么实现的。</p><h3 id="后端-可选" tabindex="-1">后端（可选） <a class="header-anchor" href="#后端-可选" aria-label="Permalink to &quot;后端（可选）&quot;">​</a></h3><p>后端功能我估计未来会比较复杂，所以没用 Python，直接用 Java 做原型开发。</p><p>首先就是<a href="https://start.spring.io/" target="_blank" rel="noreferrer">初始化</a>一个 SpringBoot 项目。</p><p><img src="'+_+'" alt="初始化SpringBoot项目"></p><p>然后连接上咱的 Postgres 数据库，写两个 API 接口返回下数据。</p><p><img src="'+v+`" alt="后端实现"></p><h3 id="前端实现" tabindex="-1">前端实现 <a class="header-anchor" href="#前端实现" aria-label="Permalink to &quot;前端实现&quot;">​</a></h3><p>直接参考<a href="https://github.com/vasturiano/3d-force-graph/blob/master/example/click-to-focus/index.html" target="_blank" rel="noreferrer">例子</a> 写一个界面，然后用我们《三天速成JavaScript》的知识来修改一下：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> elem</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">getElementById</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;3d-graph&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> Graph</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> ForceGraph3D</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  (elem)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">graphData</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(data)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">nodeLabel</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;id&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">nodeAutoColorBy</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;group&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">nodeLabel</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">node</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">      return</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> node.name</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">onNodeClick</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">node</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">      // Aim at node from outside it</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">      const</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> distance</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 40</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">      const</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> distRatio</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> distance</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Math.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">hypot</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(node.x, node.y, node.z);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">      const</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> newPos</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> node.x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">||</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> node.y </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">||</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> node.z</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">        ?</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> { x: node.x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> distRatio, y: node.y </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> distRatio, z: node.z </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> distRatio }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">        :</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> { x: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, y: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, z: distance }; </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// special case if node is in (0,0,0)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">      Graph.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">cameraPosition</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        newPos, </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// new position</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        node, </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// lookAt ({ x, y, z })</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">        3000</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">  // ms transition duration</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">      );</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    });</span></span></code></pre></div><p>如果是后端数据源，</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> axios.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;/api/graphData&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span></code></pre></div><p>如果没有写后端，咱们直接把数据给写出来就好：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  nodes: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    {id: llm, name: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;LLM&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">},</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    {id: openai, name: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;OpenAI&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  ],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  edges: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    {source: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;llm&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, target: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;openai&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><p>最后补充下数据，看看结果：</p><p><img src="`+i+'" alt="图谱可视化预览"></p><h2 id="结语" tabindex="-1">结语 <a class="header-anchor" href="#结语" aria-label="Permalink to &quot;结语&quot;">​</a></h2><p>首先现有的五花八门的工具能满足大多数人的个人知识管理以及知识图谱的需求。</p><p>其次对于我这种没事儿找事儿的，先把思路理清楚，出个原型，构建个人知识图谱也很容易实现。</p><p>万事开头难，明天继续补充细节和功能。</p>',80)]))}const S=a(f,[["render",x]]);export{N as __pageData,S as default};
