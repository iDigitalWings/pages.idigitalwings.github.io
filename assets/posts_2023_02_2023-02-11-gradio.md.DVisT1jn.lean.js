import{_ as i,a,af as n,o as t}from"./chunks/framework.C87LdZyP.js";const h="/assets/preview.B6LFPAN4.png",p="/assets/screenshot.BRcyF-7B.gif",l="/assets/screenshot-2.BUdV1kTH.gif",k="/assets/screenshot-3.Bp5KSlVq.gif",e="/assets/screenshot-4.Dpqnb77n.gif",r="/assets/screenshot-5.B5yZ7bSQ.gif",d="/assets/screenshot-6.BdsqLSXp.gif",u=JSON.parse('{"title":"Gradio: 用Python构建机器学习网页APP","description":"","frontmatter":{"title":"Gradio: 用Python构建机器学习网页APP","date":"2023-02-11T00:00:00.000Z","tags":["ai","ai-tools","python"],"category":["AI"]},"headers":[],"relativePath":"posts/2023/02/2023-02-11-gradio.md","filePath":"posts/2023/02/2023-02-11-gradio.md","lastUpdated":1718175555000}'),g={name:"posts/2023/02/2023-02-11-gradio.md"};function o(A,s,y,c,D,F){return t(),a("div",null,s[0]||(s[0]=[n('<ul><li><a href="https://gradio.app/" target="_blank" rel="noreferrer">Gradio 官网</a></li><li><a href="https://github.com/gradio-app/gradio" target="_blank" rel="noreferrer">Gradio Github</a></li></ul><p>Gradio是一个开源的Python库，用于构建演示机器学习或数据科学，以及web应用程序。</p><p>使用Gradio，您可以基于您的机器学习模型或数据科学工作流快速创建一个漂亮的用户界面，让用户可以”尝试“拖放他们自己的图像、粘贴文本、录制他们自己的声音，并通过浏览器与您的演示程序进行交互。</p><p><img src="'+h+`" alt="preview.png"></p><p>Gradio适用于:</p><ul><li><p>向客户/合伙人/用户/学生<strong>演示</strong>您的机器学习模型。</p></li><li><p>通过自动共享链接快速<strong>部署</strong>您的模型，并获得模型性能反馈。</p></li><li><p>在开发过程中使用内置的操作和解释工具交互式地<strong>调试</strong>模型。</p></li></ul><h3 id="快速开始" tabindex="-1">快速开始 <a class="header-anchor" href="#快速开始" aria-label="Permalink to &quot;快速开始&quot;">​</a></h3><p><strong>依赖</strong>: Gradio只需要Python 3.7及以上版本！</p><h4 id="gradio能做什么" tabindex="-1">Gradio能做什么？ <a class="header-anchor" href="#gradio能做什么" aria-label="Permalink to &quot;Gradio能做什么？&quot;">​</a></h4><p>与他人共享机器学习模型、API或数据科学工作流程的最佳方法之一就是创建一个<strong>交互式应用</strong>，让用户或同事在他们的浏览器中试用。</p><p>Gradio让你可以<strong>用Python构建演示并分享它们</strong>，而且通常只需几行代码！下面让我们开始吧。</p><h4 id="hello-world" tabindex="-1">Hello, World <a class="header-anchor" href="#hello-world" aria-label="Permalink to &quot;Hello, World&quot;">​</a></h4><p>要用Gradio运行&quot;Hello World&quot;示例，需要以下三个步骤：</p><p>1. 用pip下载Gradio:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">pip</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> gradio</span></span></code></pre></div><p>2. 用Python脚本或在Jupyter Notebook中运行下面的代码 （或者使用 <a href="https://colab.research.google.com/drive/18ODkJvyxHutTN0P5APWyGFO_xwNcgHDZ?usp=sharing" target="_blank" rel="noreferrer">Google Colab</a>）:</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> gradio </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> gr</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> greet</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(name):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    return</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;Hello &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;!&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">demo </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> gr.Interface(</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">fn</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">greet, </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">inputs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;text&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">outputs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;text&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">demo.launch()</span></span></code></pre></div><p>3. 下面的演示会自动出现在Jupyter Notebook中，如果使用脚本运行则会在浏览器<a href="http://127.0.0.1:7860" target="_blank" rel="noreferrer">http://127.0.0.1:7860</a>弹出:</p><p><img src="`+p+`" alt="screenshot.gif"></p><h4 id="interface-类" tabindex="-1"><code>Interface</code> 类 <a class="header-anchor" href="#interface-类" aria-label="Permalink to &quot;\`Interface\` 类&quot;">​</a></h4><p>你可能会注意到，在运行示例时我们创建了一个 <code>gradio.Interface</code> 。 <code>Interface</code> 类可以用用户接口包装任意的Python函数。在上面的示例中，我们使用了一个基于文本的简单函数，但这个函数可以是任何东西，从音乐生成器到税率计算器，再到预训练机器学习模型的预测函数。</p><p><code>Interface</code> 类核心需要三个参数初始化：</p><ul><li><code>fn</code> : 被UI包装的函数</li><li><code>inputs</code> : 作为输入的组件 (例如： <code>&quot;text&quot;</code>, <code>&quot;image&quot;</code> or <code>&quot;audio&quot;</code>)</li><li><code>outputs</code> : 作为输出的组件 (例如： <code>&quot;text&quot;</code>, <code>&quot;image&quot;</code> or <code>&quot;label&quot;</code>)</li></ul><p>下面我们进一步分析用于输入和输出的组件。</p><h4 id="组件属性" tabindex="-1">组件属性 <a class="header-anchor" href="#组件属性" aria-label="Permalink to &quot;组件属性&quot;">​</a></h4><p>在之前的示例中我们可以看到一些简单的文本框组件 <code>Textbox</code> ，但是如果您想改变UI组件的外观或行为呢?</p><p>假设您想要自定义输入文本字段，例如您希望它更大并有一个文本占位符。如果我们使用 <code>Textbox</code> 的实际类，而不是使用字符串快捷方式，就可以通过组件属性实现个性化。</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> gradio </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> gr</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> greet</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(name):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    return</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;Hello &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;!&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">demo </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> gr.Interface(</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">    fn</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">greet,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">    inputs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">gr.Textbox(</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">lines</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">placeholder</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;Name Here...&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">),</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">    outputs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;text&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">demo.launch()</span></span></code></pre></div><p><img src="`+l+`" alt="screenshot-2.gif"></p><h4 id="多输入和输出组件" tabindex="-1">多输入和输出组件 <a class="header-anchor" href="#多输入和输出组件" aria-label="Permalink to &quot;多输入和输出组件&quot;">​</a></h4><p>假设您有一个更复杂的函数，有多个输入和输出。在下面的示例中，我们定义了一个函数，该函数接受字符串、布尔值和数字，并返回字符串和数字。观察应该如何传递输入和输出组件列表。</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> gradio </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> gr</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> greet</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(name, is_morning, temperature):</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    salutation </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;Good morning&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> is_morning </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">else</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;Good evening&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    greeting </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> f</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#F47067;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">salutation</span><span style="--shiki-light:#005CC5;--shiki-dark:#F47067;">}</span><span style="--shiki-light:#005CC5;--shiki-dark:#F47067;"> {</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">name</span><span style="--shiki-light:#005CC5;--shiki-dark:#F47067;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">. It is </span><span style="--shiki-light:#005CC5;--shiki-dark:#F47067;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">temperature</span><span style="--shiki-light:#005CC5;--shiki-dark:#F47067;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> degrees today&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    celsius </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (temperature </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 32</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 5</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> /</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 9</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> greeting, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">round</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(celsius, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">demo </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> gr.Interface(</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">    fn</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">greet,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">    inputs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">[</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;text&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;checkbox&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, gr.Slider(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)],</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">    outputs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">[</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;text&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;number&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">demo.launch()</span></span></code></pre></div><p><img src="`+k+`" alt="screenshot-3.gif"></p><p>您只需将组件包装在列表中。输入列表<code>inputs</code>中的每个组件依次对应函数的一个参数。输出列表<code>outputs</code>中的每个组件都对应于函数的一个返回值，两者均按顺序对应。</p><h4 id="一个图像示例" tabindex="-1">一个图像示例 <a class="header-anchor" href="#一个图像示例" aria-label="Permalink to &quot;一个图像示例&quot;">​</a></h4><p>Gradio支持多种类型的组件，如 <code>Image</code>、<code>DateFrame</code>、<code>Video</code>或<code>Label</code> 。让我们尝试一个图像到图像的函数来感受一下！</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> numpy </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> np</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> gradio </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> gr</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> sepia</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(input_img):</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    sepia_filter </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> np.array([</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        [</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0.393</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0.769</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0.189</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">], </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        [</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0.349</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0.686</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0.168</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">], </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        [</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0.272</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0.534</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0.131</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    ])</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    sepia_img </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> input_img.dot(sepia_filter.T)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    sepia_img </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">/=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> sepia_img.max()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> sepia_img</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">demo </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> gr.Interface(sepia, gr.Image(</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">shape</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">200</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">200</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)), </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;image&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">demo.launch()</span></span></code></pre></div><p><img src="`+e+`" alt="screenshot-4.gif"></p><p>当使用<code>Image</code>组件作为输入时，您的函数将接收一个形状为 <code>(width, height, 3)</code> 的NumPy数组，其中最后一个维度表示RGB值。我们还将以NumPy数组的形式返回一张图像。</p><p>你也可以用 <code>type=</code> 关键字参数设置组件使用的数据类型。例如，如果你想让你的函数获取一个图像的文件路径，而不是一个NumPy数组时，输入 <code>Image</code> 组件可以写成：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">gr.Image(</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">type</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;filepath&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">shape</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span></code></pre></div><p>还要注意，我们的输入 <code>Image</code> 组件带有一个编辑按钮 🖉，它允许裁剪和放大图像。以这种方式操作图像可以帮助揭示机器学习模型中的偏见或隐藏的缺陷！</p><p>您可以在<a href="https://gradio.app/docs" target="_blank" rel="noreferrer">Gradio文档</a>中阅读更多关于组件以及如何使用它们。</p><h4 id="blocks-更加灵活且可控" tabindex="-1">Blocks: 更加灵活且可控 <a class="header-anchor" href="#blocks-更加灵活且可控" aria-label="Permalink to &quot;Blocks: 更加灵活且可控&quot;">​</a></h4><p>Gradio 提供了两个类来构建应用程序</p><p>1. <strong>Interface</strong>，这为创建到目前为止我们一直在讨论的示例提供了一个高级抽象。</p><p>2. <strong>Blocks</strong>，一个用于设计具有更灵活布局和数据流的web应用程序的初级API。block可以做许多事，比如特征化多个数据流和演示，控制组件在页面上出现的位置，处理复杂的数据流（例如，输出可以作为其他函数的输入），以及根据用户交互更新组件的属性/可见性，且仍然在Python中。如果您需要这种个性化，那就试试 <code>Blocks</code> 吧！</p><h4 id="你好-blocks" tabindex="-1">你好, Blocks <a class="header-anchor" href="#你好-blocks" aria-label="Permalink to &quot;你好, Blocks&quot;">​</a></h4><p>让我们看一个简单的例子。注意这里的API与 <code>Interface</code> 有何不同。</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> gradio </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> gr</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> greet</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(name):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    return</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;Hello &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;!&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">with</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> gr.Blocks() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> demo:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> gr.Textbox(</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">label</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;Name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    output </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> gr.Textbox(</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">label</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;Output Box&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    greet_btn </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> gr.Button(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;Greet&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    greet_btn.click(</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">fn</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">greet, </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">inputs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">name, </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">outputs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">output)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">demo.launch()</span></span></code></pre></div><p><img src="`+r+`" alt="screenshot-5.gif"></p><p>注意事项：</p><ul><li><code>Blocks</code> 由 <code>with</code> 子句组成，在该子句中创建的任何组件都会自动添加到应用程序中。</li><li>组件在应用程序中按创建的顺序垂直显示，（稍后我们将介绍自定义布局！）</li><li>一个 按钮 <code>Button</code> 被创建，然后添加了一个 <code>click</code> 事件监听器。这个API看起来很熟悉！就像 <code>Interface</code>一样， <code>click</code> 方法接受一个Python函数、输入组件和输出组件。</li></ul><h4 id="更多复杂性" tabindex="-1">更多复杂性 <a class="header-anchor" href="#更多复杂性" aria-label="Permalink to &quot;更多复杂性&quot;">​</a></h4><p>这里有一个应用程序可以让你感受一下<code>Blocks</code>的更多可能：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> numpy </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> np</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> gradio </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> gr</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> flip_text</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(x):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> x[::</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> flip_image</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(x):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> np.fliplr(x)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">with</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> gr.Blocks() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> demo:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    gr.Markdown(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;Flip text or image files using this demo.&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    with</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> gr.Tabs():</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">        with</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> gr.TabItem(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;Flip Text&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">):</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">            text_input </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> gr.Textbox()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">            text_output </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> gr.Textbox()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">            text_button </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> gr.Button(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;Flip&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">        with</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> gr.TabItem(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;Flip Image&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">            with</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> gr.Row():</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">                image_input </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> gr.Image()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">                image_output </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> gr.Image()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">            image_button </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> gr.Button(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;Flip&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    text_button.click(flip_text, </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">inputs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">text_input, </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">outputs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">text_output)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    image_button.click(flip_image, </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">inputs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">image_input, </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">outputs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">image_output)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">demo.launch()</span></span></code></pre></div><p><img src="`+d+`" alt="screenshot-6.gif"></p><p>还有很多事情可以做！我们将在<a href="https://gradio.app/building_with_blocks" target="_blank" rel="noreferrer">使用blocks构建</a>部分为您介绍如何创建像这样复杂的 <code>Blocks</code> 应用程序。</p><p>恭喜你，你现在已经熟悉了Gradio的基础使用！🥳 去我们的<a href="https://gradio.app/key_features" target="_blank" rel="noreferrer">下一章</a> 了解Gradio的更多功能。</p><h2 id="开源栈" tabindex="-1">开源栈 <a class="header-anchor" href="#开源栈" aria-label="Permalink to &quot;开源栈&quot;">​</a></h2><p>Gradio是由许多很棒的开源库构建的，请一并支持它们!</p><h2 id="协议" tabindex="-1">协议 <a class="header-anchor" href="#协议" aria-label="Permalink to &quot;协议&quot;">​</a></h2><p>Gradio is licensed under the Apache License 2.0 found in the <strong>LICENSE</strong> file in the root directory of this repository.</p><h2 id="引用" tabindex="-1">引用 <a class="header-anchor" href="#引用" aria-label="Permalink to &quot;引用&quot;">​</a></h2><p>另外请参阅论文 <em><a href="https://arxiv.org/abs/1906.02569" target="_blank" rel="noreferrer">Gradio: Hassle-Free Sharing and Testing of ML Models in the Wild</a>, ICML HILL 2019</em>，如果您在工作中使用Gradio请引用它。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span>@article{abid2019gradio,</span></span>
<span class="line"><span>  title = {Gradio: Hassle-Free Sharing and Testing of ML Models in the Wild},</span></span>
<span class="line"><span>  author = {Abid, Abubakar and Abdalla, Ali and Abid, Ali and Khan, Dawood and Alfozan, Abdulrahman and Zou, James},</span></span>
<span class="line"><span>  journal = {arXiv preprint arXiv:1906.02569},</span></span>
<span class="line"><span>  year = {2019},</span></span>
<span class="line"><span>}</span></span></code></pre></div>`,66)]))}const B=i(g,[["render",o]]);export{u as __pageData,B as default};
