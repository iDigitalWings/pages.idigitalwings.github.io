import{_ as s,a,af as e,o as l}from"./chunks/framework.C87LdZyP.js";const t="/assets/img.CsFW5oqu.png",p="/assets/img_1.Bubxoc-N.png",n="/assets/pulumi-exec-flow.B7-nzKH2.png",g=JSON.parse('{"title":"深入 Pulumi - 1","description":"","frontmatter":{"title":"深入 Pulumi - 1","date":"2022-04-27T00:00:00.000Z","tags":["IaC"],"category":["运维"]},"headers":[],"relativePath":"posts/2022/04/2022-04-27-dive-into-pulumi-1.md","filePath":"posts/2022/04/2022-04-27-dive-into-pulumi-1.md","lastUpdated":1718173059000}'),h={name:"posts/2022/04/2022-04-27-dive-into-pulumi-1.md"};function d(o,i,u,r,k,c){return l(),a("div",null,i[0]||(i[0]=[e('<p>Pulumi 是一个现代的<code>基础设施即代码</code>平台。Pulumi 充分利用现有的编程语言通过 Pulumi SDK 来管理云资源。</p><h2 id="概述" tabindex="-1">概述 <a class="header-anchor" href="#概述" aria-label="Permalink to &quot;概述&quot;">​</a></h2><p>下面展示 Pulumi 程序的构成： <img src="'+t+'" alt=""></p><p>Pulumi 程序使用编程语言描述基础设施应该如何组织：</p><ul><li>声明基础设施，</li><li>分配资源对象，</li><li>设置对象的属性（基础设置状态）。</li></ul><p>一个 Pulumi 项目可以包含多个 Stack，每个 Stack 可以代表一套环境（开发、测试、生产）， 每个 Stack 使用不同的配置文件来定义自己的配置，比如 <code>Pulumi.dev.yaml</code>。</p><h2 id="工作原理" tabindex="-1">工作原理 <a class="header-anchor" href="#工作原理" aria-label="Permalink to &quot;工作原理&quot;">​</a></h2><p>和 Kubernetes 类似，Pulumi 使用期望的状态模型来管理基础设置，你只需要在程序中 定义你期望的资源是什么状态即可。程序运行的时候，引擎会比较期望状态和当前状态的区别， 用来确定要创建、更新或者删除哪些资源。</p><p><img src="'+p+'" alt=""></p><h3 id="语言主机-language-hosts" tabindex="-1">语言主机 Language Hosts <a class="header-anchor" href="#语言主机-language-hosts" aria-label="Permalink to &quot;语言主机 Language Hosts&quot;">​</a></h3><p>语言主机负责运行一个 Pulumi 程序并设置一个可以向部署引擎注册的环境，包含：</p><ul><li>语言执行器 <ul><li>一个二进制文件 <code>pulumi-language-&lt;language-name&gt;</code></li><li>和 Pulumi CLI 一起分发</li><li>负责启动编程语言运行时，比如 JRE、Node、Python...</li></ul></li><li>语言运行时 <ul><li>对应语言的应用包，遵循对应语言的包分发机制</li><li>比如 Node 运行时的 <code>@pulumi/pulumi</code> 包</li></ul></li></ul><h2 id="部署引擎-deploy-engine" tabindex="-1">部署引擎 Deploy Engine <a class="header-anchor" href="#部署引擎-deploy-engine" aria-label="Permalink to &quot;部署引擎 Deploy Engine&quot;">​</a></h2><p>部署引擎负责将基础设施当前状态变成程序所表示的期望状态。</p><p>部署引擎嵌入在 Pulumi CLI 中。</p><h3 id="资源提供者-resources-providers" tabindex="-1">资源提供者 Resources Providers <a class="header-anchor" href="#资源提供者-resources-providers" aria-label="Permalink to &quot;资源提供者 Resources Providers&quot;">​</a></h3><p>Providers 包含：</p><ul><li>资源插件 <ul><li>部署引擎用来管理资源的二进制文件</li><li>缓存在<code>~/.pulumi/plugins</code></li><li>使用 <code>pulumi plugin</code> 命令集来管理</li></ul></li><li>管理资源的 SDK <ul><li>SDK 和对应语言 SDK 的用法相同</li><li>比如：<code>@pulumi/aws</code>在 npm 上的<code>pulumi_aws</code>包</li></ul></li></ul><h3 id="执行过程" tabindex="-1">执行过程 <a class="header-anchor" href="#执行过程" aria-label="Permalink to &quot;执行过程&quot;">​</a></h3><p>执行过程大致如下：</p><p><img src="'+n+`" alt=""></p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>如果不同资源有依赖关系，那么依赖关系也会作为一个状态记录在部署引擎里面。</p></div><h2 id="项目" tabindex="-1">项目 <a class="header-anchor" href="#项目" aria-label="Permalink to &quot;项目&quot;">​</a></h2><p>Pulumi 项目是包含 <code>Pulumi.yaml</code> 的任何文件夹。可以使用<code>pulumi new</code> 来创建一个新项目。</p><p>项目目录为：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">├──</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> Pulumi.dev.yaml</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">├──</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> Pulumi.yaml</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">├──</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> index.ts</span></span></code></pre></div><p>文件作用如下：</p><ul><li><code>Pulumi.yaml</code> 定义项目</li><li><code>Pulumi.dev.yaml</code> 包含了刚刚初始化 stack 的配置值 <ul><li>如果没有配置，生成的项目可能没有这个文件</li></ul></li><li><code>index.ts</code> 定义 Pulumi 程序的 stack 资源</li></ul><h3 id="项目文件" tabindex="-1">项目文件 <a class="header-anchor" href="#项目文件" aria-label="Permalink to &quot;项目文件&quot;">​</a></h3><p>项目文件可以为 <code>Pulumi.yaml</code>或者<code>Pulumi.yml</code>，该文件指定了项目的元数据。</p><p>比如：</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">quickstart</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">runtime</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">nodejs</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">description</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">A minimal Kubernetes TypeScript Pulumi program</span></span></code></pre></div><h3 id="路径" tabindex="-1">路径 <a class="header-anchor" href="#路径" aria-label="Permalink to &quot;路径&quot;">​</a></h3><p>路径在 Pulumi 项目中总以相对路径来表示，比如：</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> myTask</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> cloud.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">Task</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;myTask&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, {  build: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;./app&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,  </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> });</span></span></code></pre></div><p>可通过<code>getProject</code>获取当前项目的名称：</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> project </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> pulumi.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">getProject</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span></code></pre></div><h3 id="stack-文件" tabindex="-1">Stack 文件 <a class="header-anchor" href="#stack-文件" aria-label="Permalink to &quot;Stack 文件&quot;">​</a></h3><p>项目中的每个 Stack 都有一个名为<code>Pulumi.&lt;stackname&gt;.yaml</code>的文件，来 定义该 Stack 的配置。</p><p>比如 <code>Pulumi.dev.yaml</code>：</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">config</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">  quickstart:useLoadBalancer</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;false&quot;</span></span></code></pre></div><hr><ul><li><a href="https://www.pulumi.com/registry/packages/kubernetes/api-docs/" target="_blank" rel="noreferrer">Pulumi Node.js API</a></li><li><a href="https://github.com/pulumi/pulumi-kubernetes" target="_blank" rel="noreferrer">Pulumi Kubernetes</a></li><li><a href="https://www.pulumi.com/" target="_blank" rel="noreferrer">Pulumi 官网</a></li></ul>`,43)]))}const y=s(h,[["render",d]]);export{g as __pageData,y as default};
