import{_ as a,a as t,af as o,o as s}from"./chunks/framework.C87LdZyP.js";const d=JSON.parse('{"title":"康威定律","description":"","frontmatter":{"title":"康威定律","date":"2021-04-30T00:00:00.000Z","tags":[],"category":["架构"]},"headers":[],"relativePath":"posts/2021/04/2021-04-30-conways-law.md","filePath":"posts/2021/04/2021-04-30-conways-law.md","lastUpdated":1718173059000}'),r={name:"posts/2021/04/2021-04-30-conways-law.md"};function n(i,e,l,p,h,c){return s(),t("div",null,e[0]||(e[0]=[o('<h2 id="起源" tabindex="-1">起源 <a class="header-anchor" href="#起源" aria-label="Permalink to &quot;起源&quot;">​</a></h2><p>Conway’s law 最初来自于Conway在1967年发表的论文 <a href="http://www.melconway.com/Home/pdf/committees.pdf" target="_blank" rel="noreferrer">《How Do Committees Invent?》</a>，之后在《人月神话》 这本书中引用了论文的结论，并命名为康威定律（Conway’s law）得以推广。</p><blockquote><p>Conway’s law: Organizations which design systems are constrained to produce designs which are copies of the communication structures of these organizations. - Melvin Conway(1967)</p><p>设计系统的组织其产生的设计等价于组织间的沟通结构。</p></blockquote><p>反向理解：</p><blockquote><p>Conway’s law reversed：You won’t be able to successfully establish an efficient organizational structure that is not supported by your system architecture design.</p><p>如果系统架构不支持，你无法建立一个高效的组织。</p></blockquote><h2 id="解读" tabindex="-1">解读 <a class="header-anchor" href="#解读" aria-label="Permalink to &quot;解读&quot;">​</a></h2><p>Mike Amundsen 归纳了如下四个核心观点:</p><h3 id="第一定律" tabindex="-1">第一定律 <a class="header-anchor" href="#第一定律" aria-label="Permalink to &quot;第一定律&quot;">​</a></h3><blockquote><p>Communication dictates the design</p><p>组织沟通方式会通过系统设计表达出来</p></blockquote><p>对于复杂的，需要协作完成的系统开发，沟通是必须要持续提升的问题。 每个团队由5-10人组成（沟通成本 = n(n-1)/2 - 《人月神话》），在团队内部进行频繁的、细粒度的沟通。对于团队外部，定义好接口，契约，只进行粗粒度的沟通。这样可以降低沟通成本，同时也符合高内聚，低耦合原则（代码和人员管理有些时候真是相通的）。</p><h3 id="第二定律" tabindex="-1">第二定律 <a class="header-anchor" href="#第二定律" aria-label="Permalink to &quot;第二定律&quot;">​</a></h3><blockquote><p>There is never enough time to do something right, but there is always enough time to do it over</p><p>时间再多一件事情也不可能做的完美，但总有时间做完一件事情</p></blockquote><p>这就是我们在用kanban管理迭代时几乎都有一列是BAU（Business As Usual ），其中会包括一些日常修复的Bug Story。敏捷开发中将迭代引入，做到持续交付，快速验证，迅速反馈，持续改进。</p><h3 id="第三定律" tabindex="-1">第三定律 <a class="header-anchor" href="#第三定律" aria-label="Permalink to &quot;第三定律&quot;">​</a></h3><blockquote><p>There is a homomorphism from the linear graph of a system to the linear graph of its design organization</p><p>线型系统和线型组织架构间有潜在的异质同态特性</p></blockquote><p>大白话就是，你想要架构成为什么样，就将团队分成怎样的结构。比如前后端分离的团队，架构就是基于前后端分离。在基于微服务设计的团队里，一个很好的理念是自管理。团队内部对于自己所负责的模块高度负责，进行端对端的开发以及运维。</p><h3 id="第四定律" tabindex="-1">第四定律 <a class="header-anchor" href="#第四定律" aria-label="Permalink to &quot;第四定律&quot;">​</a></h3><blockquote><p>The structures of large systems tend to disintegrate during development, qualitatively more so than with small systems</p><p>大的系统组织总是比小系统更倾向于分解</p></blockquote><p>合久必分，分久必合，团队以及架构都是在不断优化的。一个团队随着人员的增加，沟通以及管理成本一定会增加。</p><hr><p>来源：</p><ul><li><a href="https://www.jianshu.com/p/ba2d444c89d2" target="_blank" rel="noreferrer">https://www.jianshu.com/p/ba2d444c89d2</a></li></ul>',22)]))}const m=a(r,[["render",n]]);export{d as __pageData,m as default};
