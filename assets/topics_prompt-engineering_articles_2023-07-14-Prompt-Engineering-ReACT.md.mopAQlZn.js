import{_ as a,a as n,af as t,o as e}from"./chunks/framework.C87LdZyP.js";const i="/assets/2828481445324833.rbWTwr9r.png",p="/assets/2823967824772041.Bnt-LyR-.png",h="/assets/2824040129798500.9-Ek5lr3.png",l="/assets/2824456896989375.DaHSmOX0.png",A=JSON.parse('{"title":"PromptEngineering：ReAct 框架（LangChain 使用的 Agents 框架）","description":"","frontmatter":{"title":"PromptEngineering：ReAct 框架（LangChain 使用的 Agents 框架）","date":"2023-07-14T00:00:00.000Z","tags":["ai","ml"],"category":["AI"]},"headers":[],"relativePath":"topics/prompt-engineering/articles/2023-07-14-Prompt-Engineering-ReACT.md","filePath":"topics/prompt-engineering/articles/2023-07-14-Prompt-Engineering-ReACT.md","lastUpdated":1718173059000}'),k={name:"topics/prompt-engineering/articles/2023-07-14-Prompt-Engineering-ReACT.md"};function r(g,s,o,d,c,F){return e(),n("div",null,s[0]||(s[0]=[t('<div class="admonition abstract"><p class="admonition-title">abstract</p><p>今天介绍 ReAct 框架，前面介绍的提示工程技术除了 CoT 大家可能很少接触到，那么今天的主角会稍有名气。 ReAct 是著名工具 LangChain 最主要的代理类型。</p></div><p>ReAct 的全称是<a href="https://arxiv.org/abs/2210.03629" target="_blank" rel="noreferrer">《语言模型中的协同推理和同步》</a>， 论文名字是<a href="https://arxiv.org/abs/2210.03629" target="_blank" rel="noreferrer">《ReAct: Synergizing Reasoning and Acting in Language Models 》</a>。</p><p>ReAct 由 <strong>Shunyu Yao</strong> 等人 2022年10月提出，用以解决语言模型语言理解和交互式决策制定等任务中<strong>推理</strong>（例如思维链提示）和<strong>行动</strong>（例如行动计划生成）<strong>能力结合</strong>的问题。</p><h2 id="背景" tabindex="-1">背景 <a class="header-anchor" href="#背景" aria-label="Permalink to &quot;背景&quot;">​</a></h2><blockquote><p>虽然大型语言模型（LLM）在语言理解和交互式决策制定等任务中表现出了令人印象深刻的能力， 但它们的推理（例如思维链提示）和行动（例如行动计划生成）能力主要作为单独的主题进行研究。</p></blockquote><p>使用 LLM 以交错的方式生成推理轨迹和特定于任务的动作，从而实现两者之间更大的<strong>协同作用</strong>： <strong>推理轨迹</strong>帮助模型归纳、跟踪和更新行动计划以及处理异常，而<strong>操作</strong>允许它与外部源（例如知识库或环境）交互，以收集附加信息。</p><p>简而言之就是先利用 LLM 的推理能力，如果某个步骤 LLM 不能很好的解决，那么就和外部资源（文档、物联网、数据库、代码执行等）交互，以获取额外的信息，得到更好的答案。</p><p><img src="'+i+'" alt=""></p><p>下面是 ReAct 学术上的战绩：</p><h3 id="问答和事实验证" tabindex="-1">问答和事实验证 <a class="header-anchor" href="#问答和事实验证" aria-label="Permalink to &quot;问答和事实验证&quot;">​</a></h3><p>在问答（<a href="https://hotpotqa.github.io/" target="_blank" rel="noreferrer">HotpotQA</a>）和事实验证（<a href="https://www.amazon.science/blog/the-fever-data-set-what-doesnt-kill-it-will-make-it-stronger" target="_blank" rel="noreferrer">Fever</a>）方面， ReAct 通过与简单的维基百科 API 交互，克服了思维链推理中普遍存在的幻觉和错误传播问题，并生成类似人类的任务解决轨迹，比没有推理痕迹的基线更容易解释。</p><h3 id="决策" tabindex="-1">决策 <a class="header-anchor" href="#决策" aria-label="Permalink to &quot;决策&quot;">​</a></h3><p>在两个交互式决策基准（<a href="http://alfworld.github.io/" target="_blank" rel="noreferrer">ALFWorld</a> 和 <a href="https://arxiv.org/abs/2207.01206" target="_blank" rel="noreferrer">WebShop</a>）上， ReAct 的表现优于模仿和强化学习方法，绝对成功率分别为 34% 和 10%，同时仅用一两个上下文示例进行提示。</p><h2 id="代码" tabindex="-1">代码 <a class="header-anchor" href="#代码" aria-label="Permalink to &quot;代码&quot;">​</a></h2><p><a href="https://react-lm.github.io/" target="_blank" rel="noreferrer">ReAct 网站</a> 也开放了代码，Github 地址为： <a href="https://github.com/ysymyth/ReAct" target="_blank" rel="noreferrer">https://github.com/ysymyth/ReAct</a> ，大家可以运行代码来重新任务测试结果或者来定制自己的项目。</p><p><img src="'+p+'" alt="ReAct 和 CoT/ACT 对比"></p><p><img src="'+h+'" alt="ReAct 测试结果"></p><p>当然，几乎不会有人真的去运行 ReAct 的代码（虽然很方便），但是不妨看一眼，他的主要部分，拿 HotpotQA 问答数据集的代码为例：</p><p><img src="'+l+`" alt="谁是小李子的女朋友?她现在的年龄加到0.43次方是多少?"></p><blockquote><p>注意： ReAct 和 前面文章介绍的 ART 一样，不同的任务会有不同的提示模板（相当于任务库）。</p></blockquote><h2 id="react-和-langchain" tabindex="-1">ReAct 和 LangChain <a class="header-anchor" href="#react-和-langchain" aria-label="Permalink to &quot;ReAct 和 LangChain&quot;">​</a></h2><p>最简单或者最流行的实践 ReAct 的方法肯定是用 LangChain 的<a href="https://python.langchain.com/docs/modules/agents/agent_types/react" target="_blank" rel="noreferrer">示例</a>了。</p><p>LangChain 默认使用 ReAct 实现代理逻辑，所以也不需要关注怎么实现，直接看效果就好了。</p><p>首先引入包，使用 OpenAI 作为语言模型，同时加载一些工具。</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> langchain.agents </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> load_tools</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> langchain.agents </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> initialize_agent</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> langchain.agents </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> AgentType</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> langchain.llms </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> OpenAI</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">llm </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> OpenAI(</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">temperature</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">tools </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> load_tools([</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;serpapi&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;llm-math&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">], </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">llm</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">llm)</span></span></code></pre></div><p>接下来创建代理执行器，代理执行器内部会根据 ReAct 的原理去帮我们拆解任务，并调用工具。</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">agent_executor </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> initialize_agent(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  tools, </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  llm, </span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">  agent</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">AgentType.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">ZERO_SHOT_REACT_DESCRIPTION</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">  verbose</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">True</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span></code></pre></div><p>接下来我们问他一个奇怪的问题：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">agent_executor.invoke({</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;input&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;谁是小李子的女朋友?她现在的年龄加到0.43次方是多少?&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">})</span></span></code></pre></div><p>以为我们刚刚开启了 <code>verbose=True</code>，所以可以看到详细的输出：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> Entering new AgentExecutor chain...</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> 我得查出里奥·迪卡普里奥的女朋友是谁然后算出她的年龄的0.43次方.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">Action:</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> Search</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">Action</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> Input:</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;小李子女朋友&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">Observation:</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> 模特</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> 维多利亚·塞雷蒂</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">Thought:</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> 我要找出</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> 维多利亚·塞雷蒂</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> 的年龄</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">Action:</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> Search</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">Action</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> Input:</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;维多利亚·塞雷蒂的年龄&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">Observation:</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 25</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> years</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">Thought:</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> 我需要计算25的0.43次方</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">Action:</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> Calculator</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">Action</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> Input:</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> 25^0.43</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">Observation:</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> Answer:</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 3.991298452658078</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">Thought:</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> 我知道了最终的方案</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">Final</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> Answer:</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> 小李子的女朋友是维多利亚·塞雷蒂，她现在的年龄是3.991298452658078的0.43次方.</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> Finished chain.</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">{</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">&#39;input&#39;</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;谁是小李子的女朋友?她现在的年龄加到0.43次方是多少?&quot;,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> &#39;output&#39;</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;小李子的女朋友是维多利亚·塞雷蒂，她现在的年龄是3.991298452658078的0.43次方.&quot;}</span></span></code></pre></div><p>可以看到过程如下，不断重复 <strong>Action+ Input -&gt; 结果 -&gt; 下一个想法</strong>，一直到找到最终答案。</p><p><img src="`+i+'" alt="谁是小李子的女朋友?她现在的年龄加到0.43次方是多少?"></p><h2 id="结语" tabindex="-1">结语 <a class="header-anchor" href="#结语" aria-label="Permalink to &quot;结语&quot;">​</a></h2><p>虽然 Prompt Engineering 这个系列主要介绍提示工程的理论和技术，但是这些看起来不那么贴地气的技术，正在真真切切改变这个世界。</p>',35)]))}const D=a(k,[["render",r]]);export{A as __pageData,D as default};
