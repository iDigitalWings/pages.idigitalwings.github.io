import{_ as e,a as t,af as s,o as n}from"./chunks/framework.C87LdZyP.js";const u=JSON.parse('{"title":"Tomcat Post Request Header Invalid Character","description":"","frontmatter":{"title":"Tomcat Post Request Header Invalid Character","date":"2017-05-18T00:00:00.000Z","tags":["tomcat"],"category":["Java"]},"headers":[],"relativePath":"posts/2017/05/2017-05-18-tomcat-post-request-Invalid-character.md","filePath":"posts/2017/05/2017-05-18-tomcat-post-request-Invalid-character.md","lastUpdated":1718193786000}'),o={name:"posts/2017/05/2017-05-18-tomcat-post-request-Invalid-character.md"};function r(p,a,c,i,l,d){return n(),t("div",null,a[0]||(a[0]=[s(`<p>使用Tomcat之后，遇到了下面一个报错：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span> org.apache.coyote.http11.Http11Processor.service Error parsing HTTP request header</span></span>
<span class="line"><span> Note: further occurrences of HTTP header parsing errors will be logged at DEBUG level.</span></span>
<span class="line"><span> java.lang.IllegalArgumentException: Invalid character found in the request target. The valid characters are defined in RFC 7230 and RFC 3986</span></span>
<span class="line"><span>        at org.apache.coyote.http11.Http11InputBuffer.parseRequestLine(Http11InputBuffer.java:472)</span></span>
<span class="line"><span>        at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:683)</span></span>
<span class="line"><span>        at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)</span></span>
<span class="line"><span>        at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:861)</span></span>
<span class="line"><span>        at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1455)</span></span>
<span class="line"><span>        at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)</span></span>
<span class="line"><span>        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)</span></span>
<span class="line"><span>        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)</span></span>
<span class="line"><span>        at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)</span></span>
<span class="line"><span>        at java.lang.Thread.run(Thread.java:745)</span></span></code></pre></div><p>stackoverflow上面发现了这样一个回答：</p><p>This behavior is introduced in all major Tomcat releases:</p><ul><li>Tomcat 7.0.73, 8.0.39, 8.5.7</li></ul><p>For a quick fix, you can downgrade to one of older versions.</p><p>Based on <a href="https://tomcat.apache.org/tomcat-8.5-doc/changelog.html" target="_blank" rel="noreferrer">changelog</a>, those changes could affect this behavior:</p><p>Tomcat 8.5.3:</p><blockquote><p>Ensure that requests with HTTP method names that are not tokens (as required by RFC 7231) are rejected with a 400 response Tomcat 8.5.7:</p></blockquote><blockquote><p>Add additional checks for valid characters to the HTTP request line parsing so invalid request lines are rejected sooner. But eventually you want to encode your URL on client:</p></blockquote><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span>encodeURI(&quot;http://127.0.0.1:8080/app/handleResponse?msg=name|id|&quot;)</span></span>
<span class="line"><span>&gt; http://127.0.0.1:8080/app/handleResponse?msg=name%7Cid%7C</span></span></code></pre></div><p>or just query string:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span>encodeURIComponent(&quot;msg=name|id|&quot;)</span></span>
<span class="line"><span>&gt; msg%3Dname%7Cid%7C</span></span></code></pre></div><p>It will secure you from other problematic characters (list of invalid URI characters).</p><p>另一种解决方法：</p><p>Since <code>Tomcat 7.0.76, 8.0.42, 8.5.12</code> you can define property <a href="https://tomcat.apache.org/tomcat-8.5-doc/config/systemprops.html" target="_blank" rel="noreferrer">requestTargetAllow</a> to allow forbiden characters.</p><p>Add this line in your <code>catalina.properties</code></p><div class="language-properties vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">properties</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">tomcat.util.http.parser.HttpParser.requestTargetAllow</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">=|{}</span></span></code></pre></div><hr><p>参考： <a href="http://stackoverflow.com/questions/41053653/tomcat-8-is-not-able-to-handle-get-request-with-in-query-parameters" target="_blank" rel="noreferrer">http://stackoverflow.com/questions/41053653/tomcat-8-is-not-able-to-handle-get-request-with-in-query-parameters</a></p><hr><div style="text-align:center;color:#00000099;font-size:14px;">END</div>`,22)]))}const g=e(o,[["render",r]]);export{u as __pageData,g as default};
