import{_ as e,a as o,af as r,o as p}from"./chunks/framework.C87LdZyP.js";const i="/assets/517186198015041.TndwERBp.png",n="/assets/518949282924791.Qu3NEPJt.png",l="/assets/520240735516250.CZt6c989.png",s="/assets/520372739484958.TlKdjudL.png",c="/assets/526158453894750.BzGrg8P7.png",m="/assets/523578105653458.BGQMtFFH.png",g="/assets/523620463187625.o1iSeA1K.png",u="/assets/523692013210250.k8o64Agd.png",h="/assets/523746204979458.BvDpjKry.png",a="/assets/523823393584083.DEGSg2Nr.png",d="/assets/525541272706000.CNPo6SGd.png",_="/assets/525598270893791.uNZKm2Qt.png",b="/assets/525727910150625.6sA0-7rK.png",y="/assets/525788258116041.CatzHLEw.png",f="/assets/525889080951041.DbB0nnNS.png",w="/assets/534166721440000.BFmfRo9o.png",A="/assets/533298227824458.BWlR3s7-.png",G=JSON.parse('{"title":"人工智能案例研究：OutSystems在软件开发中的应用","description":"","frontmatter":{"title":"人工智能案例研究：OutSystems在软件开发中的应用","date":"2024-04-04T00:00:00.000Z","tags":["ai","llm"],"category":["ai"]},"headers":[],"relativePath":"topics/aigc-cases/articles/2024-04-04-aigccase-outsystems.md","filePath":"topics/aigc-cases/articles/2024-04-04-aigccase-outsystems.md","lastUpdated":1718173059000}'),q={name:"topics/aigc-cases/articles/2024-04-04-aigccase-outsystems.md"};function S(I,t,k,C,P,O){return p(),o("div",null,t[0]||(t[0]=[r('<div class="admonition abstract"><p class="admonition-title">abstract</p><p>一起看看低代码厂商 OutSystems 如何把 AIGC 能力，引入到自己的产品生态中。</p></div><h2 id="关于-outsystems" tabindex="-1">关于 OutSystems <a class="header-anchor" href="#关于-outsystems" aria-label="Permalink to &quot;关于 OutSystems&quot;">​</a></h2><p>先看看这家公司是做什么以及做了什么。</p><p>OutSystems 2001 年成立，是低代码市场的先驱和开创者，他们的愿景也是与此相关：<strong>转变企业软件交付方式</strong>。 全球设有办事处、超过 700,000 名社区成员、 超过 500 名合作伙伴以及遍布 79 个国家/地区、21 个行业的数千名活跃客户</p><p><img src="'+i+'" alt=""></p><h3 id="产品迭代" tabindex="-1">产品迭代 <a class="header-anchor" href="#产品迭代" aria-label="Permalink to &quot;产品迭代&quot;">​</a></h3><p>从 2001 年发布 OutSystems Platform 1.0 开始，一直到 2020 发布 OutSystems Platform 11.0， 只做工具，不做业务产品，这份坚持也实属难得。</p><p><img src="'+n+'" alt=""></p><p>随着 OutSystems 的强大，与之而来的是臃肿和架构的老化。 于是 OutSystems 在2021年11月推出了其下一代云开发应用程序平台 <strong>Project Neo</strong>。 这个平台旨在帮助开发团队能够构建更先进的云应用程序，提供卓越的<strong>云原生</strong>开发能力。</p><h3 id="aigc" tabindex="-1">AIGC <a class="header-anchor" href="#aigc" aria-label="Permalink to &quot;AIGC&quot;">​</a></h3><p>随着 AIGC 浪潮的来临，生成式人工智能正在改变一切，也包括低代码领域。</p><p>OutSystems 通过和微软的深度合作。并推出 ChatGPT 器，可以轻易将 GPT 嵌入到应用程序中。 仅仅几分钟就可以利用生成式 AI 的力量。</p><p>当然，这是只开始，所有人都知道AI可以聊天、可以写文档、可以做总结，但是这些所有的功能， 都是强行和AIGC绑定， 并不对生产力做一些真正的提升。</p><h2 id="人工智能和低代码" tabindex="-1">人工智能和低代码 <a class="header-anchor" href="#人工智能和低代码" aria-label="Permalink to &quot;人工智能和低代码&quot;">​</a></h2><p>下面来探讨下我觉得AIGC在 OutSystems 里面的真正应用。</p><div class="admonition note"><p class="admonition-title">note</p><p>因为我们关注的是<strong>场景</strong>，所以我不计划话费太多时间试用研究其产品，下面内容均从官网和文档获取。</p></div><h3 id="agent" tabindex="-1">Agent <a class="header-anchor" href="#agent" aria-label="Permalink to &quot;Agent&quot;">​</a></h3><p>首先也是一个 AIGC 的通用应用场景：<strong>AGENT</strong>。</p><p><img src="'+l+'" alt=""></p><p>构建智能代理很简单，分为三步。</p><ul><li>选择大模型，</li><li>添加数据，</li><li>编写指令。</li></ul><p>当然你也可以直接使用现有的模板。</p><p><img src="'+s+'" alt=""></p><p>Agent 在国内网的大模型厂商也都标准支持了，这个更偏向 2C 的场景，不是咱们关注的重点。</p><h4 id="如何区分2c和2b" tabindex="-1">如何区分2C和2B <a class="header-anchor" href="#如何区分2c和2b" aria-label="Permalink to &quot;如何区分2C和2B&quot;">​</a></h4><p>AIGC 入场天然的2C属性，让很多人都分不清楚2C和2B的区别。这里给出一个简单的判断条件：</p><ul><li>2B 提高效率，节约时间和成本；</li><li>2C 增加用户使用时长，不一定产生价值，可有可无。</li></ul><h2 id="人工智能导师和应用程序开发" tabindex="-1">人工智能导师和应用程序开发 <a class="header-anchor" href="#人工智能导师和应用程序开发" aria-label="Permalink to &quot;人工智能导师和应用程序开发&quot;">​</a></h2><p>OutSystems 使用人工智能导师优化了应用程序，开发整个生命周期中的每个阶段。</p><p><img src="'+c+'" alt=""></p><p>主要是5个部分：</p><ul><li>代码</li><li>架构</li><li>性能</li><li>安全</li><li>以及可维护性。</li></ul><h2 id="ai-代码导师" tabindex="-1">AI 代码导师 <a class="header-anchor" href="#ai-代码导师" aria-label="Permalink to &quot;AI 代码导师&quot;">​</a></h2><p>AI 代码导师（Code Mentor） 这个才是真正有意思的事情。</p><p>用 AI 帮开发人员从<strong>重复性的开销任务</strong>中解放出来。同时<strong>指导</strong>他们去构建复杂的业务逻辑。</p><blockquote><p>这里的指导就是在对应节点给出建议。</p></blockquote><p>先看看视频： <img src="'+s+'" alt=""></p><p>没看明白是不，我们简单讲一下，在构建流程的时候，根据你的初始条件给出对应的建议 『Suggestions』:</p><p><img src="'+m+'" alt=""></p><p>选择之后自动生成 Action 动作，</p><p><img src="'+g+'" alt=""></p><p>然后你选择主要的参数，比如『TransactionsData』用哪个字段，后面的属性表单也帮你自动选择填充了。</p><p><img src="'+u+'" alt=""></p><p>同样的一些逻辑赋值也帮你自动完成：</p><p><img src="'+h+'" alt=""></p><p>后续一步一步的都是选择建议，然后 AI 帮你自动完成。</p><p><img src="'+a+'" alt=""></p><p>当然，上面的都是宣传片，可能和实际出入比较大。不过这个场景确实当前AI能力范围之事。</p><div class="admonition note"><p class="admonition-title">代码导师总结</p><p>Code Mentor 是一个 <strong>人工智能辅助开发</strong> 系统，预测下一步要做什么， 建议最佳选择，并将其添加到开发人员的代码中， 完全配置并<strong>适应业务逻辑和上下文</strong>。 此外，Code Mentor 使开发人员能够使用<strong>自然语言</strong> 来描述应用程序所需的复杂数据， 内置的 AI 将自动生成<strong>正确的 SQL 查询</strong>，从而为开发人员节省大量时间。</p></div><h2 id="ai-架构导师" tabindex="-1">AI 架构导师 <a class="header-anchor" href="#ai-架构导师" aria-label="Permalink to &quot;AI 架构导师&quot;">​</a></h2><p>因为 OutSystems 负责了应用的完整生命周期，所以他还推出了了一个 AI 架构导师（Architecture Mentor）。 来确保代码符合关键的架构标准。</p><p>先看下视频：</p><p><img src="'+a+'" alt=""></p><p>首先在仪表盘上可以看到所有的应用，同时不同的颜色表示不同的应用健康状态。</p><p><img src="'+d+'" alt=""></p><p>选择对应的应用就可以看到应用的介绍，技术再无，以及功能入口：</p><p><img src="'+_+'" alt=""></p><p>上面的技术债务都是根据平台的架构标准来对比统计汇总。</p><p>点击查看模块可以看到应用所有模块的信息，同样使用不同颜色标出来。 <img src="'+b+'" alt=""></p><p>进入报告页面，可以根据不同的查询条件来过滤具体的问题，比如问题的分类，是架构问题？是性能问题？还是安全问题？</p><p><img src="'+y+'" alt=""></p><p>点击某个问题就可以查看这个问题的描述，它的影响以及如何解决。</p><p><img src="'+f+'" alt=""></p><p>说实话，我觉得这个架构导师并没有把ai的能力体现得淋漓尽致。 更多的是像代码审查一样的工具去做安全检测。</p><p>同样的还有，<strong>AI性能导师</strong>、<strong>AI可维护性导师</strong>，没有特别的亮点，我们就不逐一的看了。</p><h2 id="应用能力" tabindex="-1">应用能力 <a class="header-anchor" href="#应用能力" aria-label="Permalink to &quot;应用能力&quot;">​</a></h2><p>当然 OutSystems 还支持将人工智能的能力赋予应用，比如内容生成、聊天机器人、对话摘要等等。</p><p><img src="'+w+'" alt=""></p><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p>OutSystems 对 AI 的应用中最有趣的就是 <strong>人工智能导师系统</strong>，而其中最有效的 就是<strong>人工智能代码导师</strong>，这个才是低代码平台直接用户（全民开发者）最常见的场景。</p><p><img src="'+A+'" alt=""></p><hr><ul><li><a href="https://www.outsystems.com/company/" target="_blank" rel="noreferrer">https://www.outsystems.com/company/</a></li><li><a href="https://www.outsystems.com/blog/posts/next-gen-ai/" target="_blank" rel="noreferrer">https://www.outsystems.com/blog/posts/next-gen-ai/</a></li><li><a href="https://www.outsystems.com/blog/posts/introducing-outsystems-11/" target="_blank" rel="noreferrer">https://www.outsystems.com/blog/posts/introducing-outsystems-11/</a></li><li><a href="https://www.outsystems.com/blog/posts/ai-software-development/" target="_blank" rel="noreferrer">https://www.outsystems.com/blog/posts/ai-software-development/</a></li><li><a href="https://www.outsystems.com/blog/posts/ai-app-development/" target="_blank" rel="noreferrer">https://www.outsystems.com/blog/posts/ai-app-development/</a></li></ul>',73)]))}const v=e(q,[["render",S]]);export{G as __pageData,v as default};
