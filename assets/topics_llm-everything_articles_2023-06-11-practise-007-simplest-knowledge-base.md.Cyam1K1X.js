import{_ as i,a,af as t,o as n}from"./chunks/framework.C87LdZyP.js";const h="/assets/1971327785138958.CpK7twMX.png",p="/assets/1969219380076750.CBrb9NBB.png",e="/assets/1969518649398791.DazpmDFo.png",l="/assets/1955463839725708.DdS2nkSX.png",k="/assets/1955537824737666.Dq_ht5Ld.png",d="/assets/1962935386447708.Cj2mAy3a.png",r="/assets/1963005135957875.CqX0mOWF.png",g="/assets/1963425675755250.CInnGm_d.png",o="/assets/1963485073001333.B-0NQFpV.png",y="/assets/1963786681915583.D9jeHQf3.png",E=JSON.parse('{"title":"《万物皆可LLM》007：LangChain + Chroma 实现多知识库问答和切换","description":"","frontmatter":{"title":"《万物皆可LLM》007：LangChain + Chroma 实现多知识库问答和切换","date":"2023-06-11T00:00:00.000Z","tags":["ai","ml"],"category":["AI"]},"headers":[],"relativePath":"topics/llm-everything/articles/2023-06-11-practise-007-simplest-knowledge-base.md","filePath":"topics/llm-everything/articles/2023-06-11-practise-007-simplest-knowledge-base.md","lastUpdated":1718173059000}'),c={name:"topics/llm-everything/articles/2023-06-11-practise-007-simplest-knowledge-base.md"};function A(D,s,C,F,m,B){return n(),a("div",null,s[0]||(s[0]=[t('<blockquote><p>今天使用 LangChain 和 Chroma 实现一个简单的多知识库检索问答和切换功能。</p></blockquote><p>看下运行结果的截图：</p><p><img src="'+h+'" alt=""></p><h2 id="实现方案" tabindex="-1">实现方案 <a class="header-anchor" href="#实现方案" aria-label="Permalink to &quot;实现方案&quot;">​</a></h2><p>先看下单个知识库的方案：</p><p><img src="'+p+'" alt=""></p><p>多知识库的方案就是把多分知识库数据分开存数，然后用户指定知识库 Key，查询的时候根据知识库 Key 进行判断：</p><p><img src="'+e+'" alt=""></p><h3 id="知识库准备" tabindex="-1">知识库准备 <a class="header-anchor" href="#知识库准备" aria-label="Permalink to &quot;知识库准备&quot;">​</a></h3><p>首先我们在定义一个 Base 目录，放一些知识文件，比如：</p><p><img src="'+l+'" alt="txt、docx、csv、pdf 按照你的需求增加数据库资料"></p><p>比如你有一个暑假假期安排（为了方便我用 txt 演示）：</p><p><img src="'+k+`" alt=""></p><p>然后我们用不多的代码来实现知识库功能。</p><h3 id="文件加载器-loader" tabindex="-1">文件加载器（loader） <a class="header-anchor" href="#文件加载器-loader" aria-label="Permalink to &quot;文件加载器（loader）&quot;">​</a></h3><p>定义需要解析的文件格式和 Base 目录</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">file_types </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> [</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;pdf&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;txt&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;docx&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;csv&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">root_path </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &#39;/...&#39;</span></span></code></pre></div><p>根据 LangChain 的语法，每个格式定义一个文件 Loader：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">loaders </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> [DirectoryLoader( root_path, </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">glob</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;**/*.&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> x) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> file_types]</span></span></code></pre></div><p>加载所有文件：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">documents </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> []</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> loader </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> loaders:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    documents.extend(loader.load())</span></span></code></pre></div><h3 id="文本分割-splitter" tabindex="-1">文本分割 （splitter） <a class="header-anchor" href="#文本分割-splitter" aria-label="Permalink to &quot;文本分割 （splitter）&quot;">​</a></h3><p>将文本拆分为 1k 个标记，</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">text_splitter </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> CharacterTextSplitter(</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">chunk_size</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1000</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">chunk_overlap</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">documents </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> text_splitter.split_documents(documents)</span></span></code></pre></div><h3 id="嵌入-embedding" tabindex="-1">嵌入 （embedding） <a class="header-anchor" href="#嵌入-embedding" aria-label="Permalink to &quot;嵌入 （embedding）&quot;">​</a></h3><p>声明 OpenAI 嵌入:</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">vectorstore_path </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &#39;vectorstore&#39;</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> # 向量文件存储目录</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">embeddings </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> OpenAIEmbeddings()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">vectorstore </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> Chroma.from_documents(documents, embeddings, </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">persist_directory</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">vectorstore_path)</span></span></code></pre></div><h3 id="知识问答" tabindex="-1">知识问答 <a class="header-anchor" href="#知识问答" aria-label="Permalink to &quot;知识问答&quot;">​</a></h3><p>会话检索链，之后就用这个 qa 来进行知识库问答，</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">qa </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> ConversationalRetrievalChain.from_llm(ChatOpenAI(</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">temperature</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">), vectorstore.as_retriever())</span></span></code></pre></div><p>就可以提问啦：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">history </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> []</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">user_message </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &#39;暑假第三周周一要做什么&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">answer </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> qa({</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;question&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: user_message, </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;chat_history&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: history})[</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;answer&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">]</span></span></code></pre></div><p>看看 qa 的 Response：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">{</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;question&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;暑假第三周周一要做什么&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;chat_history&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: [], </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;answer&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;暑假第三周周一的计划是进行户外活动，锻炼身体。&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><p>我们最终的 Answer 就是：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">暑假第三周周一的计划是进行户外活动，锻炼身体。</span></span></code></pre></div><h2 id="多知识库实现" tabindex="-1">多知识库实现 <a class="header-anchor" href="#多知识库实现" aria-label="Permalink to &quot;多知识库实现&quot;">​</a></h2><blockquote><p>人生中我们不止扮演一个角色。</p></blockquote><p>知识库也一样，大部分时候我们需要不止一个知识库。</p><p>我这里同样用最简单粗暴的方式实现多知识库的支持。</p><h3 id="多知识库存储" tabindex="-1">多知识库存储 <a class="header-anchor" href="#多知识库存储" aria-label="Permalink to &quot;多知识库存储&quot;">​</a></h3><p>我们为每个知识库设置一个编码 &#39;key&#39;，数据存储和文档存储都用这个目录来区分。</p><p>比如下图对应了两个知识库，<code>documents</code>和<code>orders</code>：</p><p><img src="`+d+'" alt=""></p><p>文件目录也用目录名来区分：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">file_path</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> join</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">root_path,</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &#39;knowledgebase&#39;,</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> key</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span></code></pre></div><p>数据库存储也分目录存储：</p><p><img src="'+r+`" alt=""></p><p>对应的目录也都改成如下写法：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">vectorstore_path </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> join(root_path, </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;vectorstore&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, key)</span></span></code></pre></div><h3 id="嵌入数据库复用" tabindex="-1">嵌入数据库复用 <a class="header-anchor" href="#嵌入数据库复用" aria-label="Permalink to &quot;嵌入数据库复用&quot;">​</a></h3><p>上面提到，我们先用 OpenAI（其他的 LLM 也可以）来把文本给向量化存到向量数据库中。</p><p>当我们的文档没有变化时，每次执行都进行向量化是比较浪费资源的。</p><p>这里我们先实现嵌入数据库的复用，如果已经 embedding 过， 那么直接用之前的数据库：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">embeddings </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> OpenAIEmbeddings()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> os.path.exists(join(vectorstore_path, </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;flag&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)):</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    vectorstore </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> Chroma(</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">persist_directory</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">vectorstore_path, </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">embedding_function</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">embeddings)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    vectorstore </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> Chroma.from_documents(documents, embeddings, </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">persist_directory</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">vectorstore_path)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    with</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> open</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(join(vectorstore_path, </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;flag&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">), </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;w&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> f:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        f.write(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;True&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span></code></pre></div><p>上面方案我们用数据库目录下的文件来判断，简单使用。</p><p>如果向量化过的，就存一个文件，之后每次判断这个文件来看是否执行向量化嵌入过程。</p><h3 id="使用-dict-存储多个知识库索引" tabindex="-1">使用 dict 存储多个知识库索引 <a class="header-anchor" href="#使用-dict-存储多个知识库索引" aria-label="Permalink to &quot;使用 dict 存储多个知识库索引&quot;">​</a></h3><p>把上面所有逻辑对象化，然后使用 dict 来存储对象实例：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">knowledges </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> Knowledge</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">():</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> Config</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        arbitrary_types_allowed </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> True</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    documents: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">list</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> []</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    file_types </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> [</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;pdf&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;txt&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;docx&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;csv&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    key: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">str</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> None</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    file_path: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">str</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> None</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    vectorstore_path: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">str</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    qa: BaseConversationalRetrievalChain </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> None</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    vectorstore: Optional[VectorStore] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> None</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    chat_history </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> []</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    def</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> __init__</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(self, key):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">        if</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> not</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> key:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">            raise</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> ValueError</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;Knowledge Validate Error: params \`key\` not set&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        knowledges[key] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> self</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">    ...</span></span></code></pre></div><h3 id="fastapi-逻辑" tabindex="-1">FastAPI 逻辑 <a class="header-anchor" href="#fastapi-逻辑" aria-label="Permalink to &quot;FastAPI 逻辑&quot;">​</a></h3><p>FastAPI 的逻辑就很简单了，只需要根据客户端指定的知识库，加载不同的问答链进行问答即可。</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">@app.post</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;/chat/&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">async</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> chat</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(item: Prompt):</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    llm </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> llms[item.llm]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> item.knowledge:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        knowledge </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> Knowledge(</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">key</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">item.knowledge)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        answer </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> knowledge.chat(item.prompt)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">            &#39;content&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">str</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(answer),</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">            &#39;llm&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: item.llm</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        }</span></span></code></pre></div><p>配合前端，看看运行效果：</p><p><img src="`+g+'" alt="工具列表进行知识库切换"></p><p>右边菜单进行当前知识库问答：</p><p><img src="'+o+'" alt=""></p><p>切换知识库问答：</p><p><img src="'+y+'" alt=""></p><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p>除了知识库搜索优化之外，上面还有一些比较常用的功能没有介绍，比如动态添加删除知识库文件，只需要修改 Chrome 数据即可，就不做 demo 了。</p><hr><div style="text-align:center;color:#00000099;font-size:14px;">END</div>',73)]))}const b=i(c,[["render",A]]);export{E as __pageData,b as default};
