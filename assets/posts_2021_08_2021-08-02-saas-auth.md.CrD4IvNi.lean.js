import{_ as e,a as t,af as o,o as s}from"./chunks/framework.C87LdZyP.js";const r="/assets/img.CJVCkBEZ.png",n="/assets/img_1.BoF0BbjT.png",i="/assets/img_2.5UmOrnlK.png",b=JSON.parse('{"title":"SaaS Gateway","description":"","frontmatter":{"title":"SaaS Gateway","date":"2021-08-02T00:00:00.000Z","tags":["saas","gateway"],"category":["架构"]},"headers":[],"relativePath":"posts/2021/08/2021-08-02-saas-auth.md","filePath":"posts/2021/08/2021-08-02-saas-auth.md","lastUpdated":1718173059000}'),h={name:"posts/2021/08/2021-08-02-saas-auth.md"};function l(p,a,c,d,u,m){return s(),t("div",null,a[0]||(a[0]=[o('<h2 id="微服务常见的认证方案" tabindex="-1">微服务常见的认证方案 <a class="header-anchor" href="#微服务常见的认证方案" aria-label="Permalink to &quot;微服务常见的认证方案&quot;">​</a></h2><p><img src="'+r+'" alt="img.png"></p><h3 id="单点登录" tabindex="-1">单点登录 <a class="header-anchor" href="#单点登录" aria-label="Permalink to &quot;单点登录&quot;">​</a></h3><p>每个面向用户的服务都与认证服务交互，适合系统单独使用，不进行复杂交互的场景。</p><h3 id="分布式-session" tabindex="-1">分布式 Session <a class="header-anchor" href="#分布式-session" aria-label="Permalink to &quot;分布式 Session&quot;">​</a></h3><p>将用户认证信息存储在共享存储中，使用用户回话 ID 作为 key 实现 分布式哈西映射。 用户访问微服务时，从共享存储获取用户数据。</p><h3 id="客户端-token" tabindex="-1">客户端 Token <a class="header-anchor" href="#客户端-token" aria-label="Permalink to &quot;客户端 Token&quot;">​</a></h3><p>比如 JWT。所有请求都携带该 Token。</p><h3 id="客户端-token-和-api-网关结合" tabindex="-1">客户端 Token 和 API 网关结合 <a class="header-anchor" href="#客户端-token-和-api-网关结合" aria-label="Permalink to &quot;客户端 Token 和 API 网关结合&quot;">​</a></h3><p>所有请求通过网关，有效隐藏微服务，访问微服务后客户端令牌转换为服务端回话 ID 令牌。 可以通过网关方便注销用户令牌。</p><h2 id="认证方式" tabindex="-1">认证方式 <a class="header-anchor" href="#认证方式" aria-label="Permalink to &quot;认证方式&quot;">​</a></h2><h3 id="http-basic" tabindex="-1">Http Basic <a class="header-anchor" href="#http-basic" aria-label="Permalink to &quot;Http Basic&quot;">​</a></h3><h3 id="基于-session" tabindex="-1">基于 Session <a class="header-anchor" href="#基于-session" aria-label="Permalink to &quot;基于 Session&quot;">​</a></h3><p>SessionId 返回客户端，存储在客户端 Cookie。</p><p>分布式下，需要 Session 复制或者 Session 粘制来解决服务端 Session 存储。 或者使用分布式存储比如 Redis。</p><p><img src="'+n+'" alt="img_1.png"></p><h3 id="基于-token" tabindex="-1">基于 Token <a class="header-anchor" href="#基于-token" aria-label="Permalink to &quot;基于 Token&quot;">​</a></h3><p>Token 和 SessionId 不同包含用户的相关信息，通过 Token 就可以完成身份校验。 诸如 Twitter、微信、QQ、Github 等共有服务 API 都是基于这种方式认证，OpenStack、 Kubernetes 内部 API 调用也是基于 Token 的认证。</p><p><img src="'+i+'" alt="img_2.png"></p><h2 id="jwt" tabindex="-1">JWT <a class="header-anchor" href="#jwt" aria-label="Permalink to &quot;JWT&quot;">​</a></h2><h2 id="oauth2-0" tabindex="-1">OAuth2.0 <a class="header-anchor" href="#oauth2-0" aria-label="Permalink to &quot;OAuth2.0&quot;">​</a></h2><hr><ul><li><a href="https://cloud.tencent.com/developer/article/1080387" target="_blank" rel="noreferrer">https://cloud.tencent.com/developer/article/1080387</a></li><li><a href="https://zhuanlan.zhihu.com/p/107814066" target="_blank" rel="noreferrer">https://zhuanlan.zhihu.com/p/107814066</a></li><li><a href="https://mtide.net/%E5%B9%B3%E5%8F%B0%E7%BA%A7SAAS%E6%9E%B6%E6%9E%84%E7%9A%84%E5%9F%BA%E7%A1%80-%E7%BB%9F%E4%B8%80%E8%BA%AB%E4%BB%BD%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F.html" target="_blank" rel="noreferrer">https://mtide.net/平台级SAAS架构的基础-统一身份管理系统.html</a></li></ul>',23)]))}const f=e(h,[["render",l]]);export{b as __pageData,f as default};
