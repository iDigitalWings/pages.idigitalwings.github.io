import{_ as a,a as n,af as l,o as h}from"./chunks/framework.C87LdZyP.js";const p="/assets/1732569893717750.DaN7lQhm.png",t="/assets/1732106895954750.BbHA_xp7.png",k="/assets/1732338924041250.wAoMnTBG.png",i="/assets/1731949987054458.DnZnlYjp.png",e="/assets/1732039193874375.ClZZNlXt.png",D=JSON.parse('{"title":"《万物皆可LLM》004：LangChain 自定义工具生成色板来做 PPT 主题","description":"","frontmatter":{"title":"《万物皆可LLM》004：LangChain 自定义工具生成色板来做 PPT 主题","date":"2023-06-06T00:00:00.000Z","tags":["ai","ml"],"category":["AI"]},"headers":[],"relativePath":"topics/llm-everything/articles/2023-06-06-practise-004-colors.md","filePath":"topics/llm-everything/articles/2023-06-06-practise-004-colors.md","lastUpdated":1718173059000}'),r={name:"topics/llm-everything/articles/2023-06-06-practise-004-colors.md"};function d(g,s,A,o,y,C){return h(),n("div",null,s[0]||(s[0]=[l('<p>PS：之前系列名字『AI 开发实战』总感觉像是买课的，还是 9.9 那种，所以之后系列合集名字更新成：<strong>《万事万物皆可 LLM》</strong>。</p><blockquote><p>上回说到怎么自定义 LangChain 的工具，今天正好做 PPT，图片配色成了个问题。 秉承 <strong>万事万物皆可 LLM</strong> 的原则，颜色啥的必须让 LLM 搞定。</p></blockquote><p>先看结果：</p><p><img src="'+p+`" alt=""></p><p>可以实现指定颜色生成色板，比如提问：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span>生成 #8A2BE2 的色板</span></span></code></pre></div><p>也可以支持描述颜色生成，比如提问：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">生成淡蓝色色板</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"># or</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">中国传统颜色水红色色板</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"># or</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">活泼可爱一点的颜色色板</span></span></code></pre></div><p><img src="`+t+'" alt="根据描述生成色板"></p><p>当然描述颜色生成色板可能一下子达不到预期，比如：</p><p><img src="'+k+'" alt="更复杂的描述"></p><p>可以先让 GPT 生成一些颜色，再挑选喜欢的颜色生成，</p><p><img src="'+i+'" alt="推荐颜色"></p><p>然后指定 RGB 生成：</p><p><img src="'+e+`" alt="RGB 色板"></p><h3 id="ui-改动" tabindex="-1">UI 改动 <a class="header-anchor" href="#ui-改动" aria-label="Permalink to &quot;UI 改动&quot;">​</a></h3><p>UI 也有两个改动 ：</p><ul><li>增加了工具栏，可以点击切换当前使用那些工具</li><li>消息实现了颜色解析，虽然还有点儿小 Bug，无伤大雅</li></ul><p>接下来看怎么实现。</p><h2 id="后端" tabindex="-1">后端 <a class="header-anchor" href="#后端" aria-label="Permalink to &quot;后端&quot;">​</a></h2><p>后端的流程从入口开始讲，好理解一点。</p><h3 id="定义接口" tabindex="-1">定义接口 <a class="header-anchor" href="#定义接口" aria-label="Permalink to &quot;定义接口&quot;">​</a></h3><p>先约定 API 结构，我们使用 POST 格式传递数据，定义三个参数：</p><ul><li>llm：使用哪个大语言模型</li><li>prompt：对话提示语</li><li>tools：启用的工具</li></ul><p>这三个参数都是前端传递过来的，代码如下：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> Prompt</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6CB6FF;">BaseModel</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">):</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    llm: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">str</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    prompt: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">str</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    tools: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">list</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> []</span></span></code></pre></div><h3 id="处理工具" tabindex="-1">处理工具 <a class="header-anchor" href="#处理工具" aria-label="Permalink to &quot;处理工具&quot;">​</a></h3><p>工具的话我们使用 LangChain 的 agent 加载，由于接口参数不允许0工具调用，我们简单粗暴的判断一下，如果客户端选择了工具就是用 agent， 如果没有选择工具就直接对话：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">@app.post</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;/chat/&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">async</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> create_item</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(item: Prompt):</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    llm </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> llms[item.llm]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    logger.info(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;Prompt: &#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> item.prompt)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    tool </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> [tools.get(x) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> item.tools </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> tools.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">__contains__</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(x)]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> tool:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        agent </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> initialize_agent(tool, llm, </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">agent</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">AgentType.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">ZERO_SHOT_REACT_DESCRIPTION</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">verbose</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">True</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        answer </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> agent.run(item.prompt)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        logger.info(answer)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">            &#39;content&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: answer,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">            &#39;llm&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: item.llm</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    else</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        messages </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">            SystemMessage(</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">content</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;简单回答，使用中文&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">            HumanMessage(</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">content</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">item.prompt)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        answer </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> llm(messages).content</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        logger.info(answer)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">            &#39;content&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: answer,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">            &#39;llm&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: item.llm</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        }</span></span></code></pre></div><h3 id="llms-实现" tabindex="-1">llms 实现 <a class="header-anchor" href="#llms-实现" aria-label="Permalink to &quot;llms 实现&quot;">​</a></h3><p>我们把 llm 重构到单独模块，让代码清晰一点：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">claude </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> ChatClaude()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">openai </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> ChatOpenAI()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">bard </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> ChatBard()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">llms </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">    &quot;claude&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: claude,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">    &quot;openai&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: openai,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">    &quot;bard&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: bard</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><h3 id="tools-实现" tabindex="-1">tools 实现 <a class="header-anchor" href="#tools-实现" aria-label="Permalink to &quot;tools 实现&quot;">​</a></h3><p>同样，tools 也重构到单独模块，使用的地方可以根据 key 选择，不用关心实现：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">tools </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">    &#39;colors&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: ColorTool(),</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">    &#39;random-color&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: RandomColorTool(),</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">    &#39;balabala&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: Balabala()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><h3 id="colors-tool-实现" tabindex="-1">colors tool 实现 <a class="header-anchor" href="#colors-tool-实现" aria-label="Permalink to &quot;colors tool 实现&quot;">​</a></h3><p>实现色板的代码并无新意，根据 HSL 明度和保护度递增递减。</p><p>我这版本实现的比较粗糙，想让变化曲线更平滑一点，但是值去的并不好，后面有时间用其他曲线来替换正弦曲线。</p><p>RGB 颜色 和 HSL 颜色的转换可以用下面函数实现：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">colorsys.rgb_to_hls</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">colorsys.hls_to_rgb</span></span></code></pre></div><p>生成五个浅色，默认输入颜色为第六个颜色（主色），如果输入颜色饱和明暗不够，最终的色板可能会有多个黑色或者白色。</p><p>浅色生成：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"># 浅色</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">count </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 5</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">in</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> range</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(count):</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    h </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">-=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> hue_step</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    l </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">-=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> math.sin(light_step) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (count </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 3</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    s </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">+=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> math.sin(sat_step) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 20</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> l </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">        print</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;l=0&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        l </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 0</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> s </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">        print</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;s=1&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        s </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    colors.insert(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, colorsys.hls_to_rgb(h, l, s))</span></span></code></pre></div><p>同样再生成四个深色：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">in</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> range</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(count):</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    h </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">+=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> hue_step</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    l </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">+=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> math.sin(light_step) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (count)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    s </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">-=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> math.sin(sat_step) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 20</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> l </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">        print</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;l=1&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        l </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 1</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> s </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">        print</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;s=0&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        s </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 0</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    color_scale.append(colorsys.hls_to_rgb(h, l, s))</span></span></code></pre></div><h4 id="langchain-tool-实现" tabindex="-1">LangChain Tool 实现 <a class="header-anchor" href="#langchain-tool-实现" aria-label="Permalink to &quot;LangChain Tool 实现&quot;">​</a></h4><p>实现 Tool 和上文讲的一样，我这里提示写了好几个版本，效果有些差别但是差别不大。</p><p>中英文提示也有差异，但是 LLM 一般都是翻译成英文执行的，所以测试下来中文写还是英文写 LLM 自动翻译成英文之后也大差不差。</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> ColorsTool</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6CB6FF;">BaseTool</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">):</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;colors&quot;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    # description = &quot;当需要生成色卡的时候，请使用它，输入的参数是一个十六进制的 RGB 颜色,比如 #FFFFFF，输出一个RGB颜色数组。&quot;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    # description = &quot;色卡或者色板生成的任务是请使用它，输入的参数是一个十六进制的 RGB 颜色，如果输入不是十六进制的 RGB 颜色，需要先转换成十六进制 RGB 颜色再使用该工具&quot;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    # 任务是色卡或者色板生成时请使用该工具,输入需要是一个十六进制的颜色值,请先转换成十六进制格式后再调用。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    #</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    description </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;Use this tool when the task is to generate a color palette. The input should be a hexadecimal color value or the color name or descirption&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    return_direct </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> True</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> _run</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(self, rgb_hex: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">str</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, run_manager: Optional[CallbackManagerForToolRun] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> None</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) -&gt; </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">str</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        r, g, b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> hex_to_rgb(rgb_hex)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        hls </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> colorsys.rgb_to_hls(r </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 255.0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, g </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 255.0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 255.0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        pallet </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> generate_color_scale(hls, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0.02</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0.2</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0.1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        pallet </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> [rgbscale_to_hex(x) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> pallet]</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">        # return json.dumps(pallet)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">        return</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &#39; &#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.join(pallet)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    async</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> _arun</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(self, url: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">str</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, run_manager: Optional[AsyncCallbackManagerForToolRun] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> None</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, ) -&gt; </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">str</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">        raise</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> NotImplementedError</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;暂不支持异步&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span></code></pre></div><h2 id="前端" tabindex="-1">前端 <a class="header-anchor" href="#前端" aria-label="Permalink to &quot;前端&quot;">​</a></h2><p>前端使用 Marked 实现了 Markdown 的解析，这次也加上了 颜色解析（颜色和背景是同一个颜色，选中之后就可以看到了）。</p><p><img src="`+i+'" alt="推荐颜色"></p><p>Vue 和 TS 代码，大家也不爱看就不贴了。</p><h2 id="后记" tabindex="-1">后记 <a class="header-anchor" href="#后记" aria-label="Permalink to &quot;后记&quot;">​</a></h2><p>说话间，又接到了个活：要负责公司 Gitlab 账号审批创建，继续开搞，明天见。</p><hr><div style="text-align:center;color:#00000099;font-size:14px;">END</div>',57)]))}const F=a(r,[["render",d]]);export{D as __pageData,F as default};
