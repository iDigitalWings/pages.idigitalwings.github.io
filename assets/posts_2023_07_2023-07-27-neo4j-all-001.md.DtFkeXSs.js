import{_ as i,a,af as t,o as n}from"./chunks/framework.C87LdZyP.js";const p="/assets/353435666512166.Cnxr3Y3D.png",h="/assets/3955137934838000.C3jo7Uiv.png",l="/assets/3955174288617958.DArXt4dS.png",e="/assets/3955503088402833.B2SEhiGD.png",k="/assets/3955767527178916.Cl1s1Lab.png",r="/assets/3956114976762750.CIcKeGar.png",o="/assets/3956765062852000.BSXT3C36.png",d="/assets/3957842005459375.DzuLEI9G.png",g="/assets/3957954701392875.DZAhcSGf.png",c="/assets/3958100734043791.BxuvdM1S.png",A="/assets/3958293925119833.DBgH-R0T.png",y="/assets/3959917013305833.DhQx_ZEd.png",C="/assets/3958986576264625.B7YQd4a9.png",F="/assets/3962753340939000.BxuUD3_Z.png",D="/assets/3963165552305541.Cr55Ep4l.png",E="/assets/3970404464824541.DVL_Z_wA.png",u="/assets/4008016730479500.CIMyXe27.png",m="/assets/4008026574431666.BW33es_X.png",B="/assets/4008155336197291.ByFulHnL.png",b="/assets/4010751260871458.DtYX3ZEE.png",q="/assets/4010884174307041.CHxMJ0MN.png",_="/assets/4011028729356375.CGo4hb1s.png",N="/assets/4011889302606291.vpb0g6x-.png",v="/assets/4011988836009166.BBJaaJBB.png",j="/assets/4012672138257375.D9wpNHo4.png",f="/assets/4068582195778458.CNMIoCSD.png",T="/assets/4068662648224958.DsB0JV5i.png",x="/assets/4069467380049041.B8n5EYxt.png",L=JSON.parse('{"title":"关于图数据库（Neo4j）你应该知道的一切","description":"","frontmatter":{"title":"关于图数据库（Neo4j）你应该知道的一切","date":"2023-07-27T00:00:00.000Z","tags":["ai","ml"],"category":["AI"]},"headers":[],"relativePath":"posts/2023/07/2023-07-27-neo4j-all-001.md","filePath":"posts/2023/07/2023-07-27-neo4j-all-001.md","lastUpdated":1718173059000}'),M={name:"posts/2023/07/2023-07-27-neo4j-all-001.md"};function R(S,s,P,G,O,H){return n(),a("div",null,s[0]||(s[0]=[t('<div class="admonition abstract"><p class="admonition-title">abstract</p><p>图数据库（Graph Database）是一种<strong>非关系型数据库</strong>，它使用<strong>图结构</strong>来存储和查询数据。 开源图数据库的代表产品是 Neo4j，今天就以 Neo4j 为例，介绍一下图数据库的基本概念、设计模式、查询方法以及部分最佳实践。</p></div><p>首先 Neo4j 是一个图数据库管理系统，应该是知名度最广的开源图数据库，由「Neo4j, Inc.」公司开发。</p><div class="admonition note"><p class="admonition-title">图数据库和 Neo4j</p><p>由于图数据库应用没有关系数据库广泛，造成同类产品比较少， Neo4j 又占据了开源和先发的优势， 2010 年 2 月就发布了 1.0 版本，导致很长一段时间内，说起图数据库，大家只知道 Neo4j。</p></div><p>从我们之前维护的数据库知识图谱中可以看到，图数据库分类下还是有很多产品的：</p><p><img src="'+p+'" alt="图数据库（排名不分先后）"></p><h2 id="名字由来" tabindex="-1">名字由来 <a class="header-anchor" href="#名字由来" aria-label="Permalink to &quot;名字由来&quot;">​</a></h2><p>Google Group 上有一个帖子问『<strong>Neo4j 这个名字是是什么意思</strong>』， <strong>4j</strong> 肯定是 『for Java』的意思， Neo 有人说可能是参考黑客帝国的角色 Neo。</p><blockquote><p>I think &quot;Neo&quot; is a reference to the Matrix character.</p></blockquote><p>也有人说是「<strong>物之新生</strong>」或者「<strong>物联引擎</strong>」：</p><blockquote><p>&quot;Neo&quot; has also been transcribed to &quot;New Energy for Objects&quot; and &quot;Network Engine for Objects&quot; 😃</p></blockquote><p>我也只是好奇八卦一下，名字怎么来的并不影响咱们后面的使用。</p><h2 id="neo4j-vs-auradb-vs-cypher" tabindex="-1">Neo4j vs AuraDB vs Cypher <a class="header-anchor" href="#neo4j-vs-auradb-vs-cypher" aria-label="Permalink to &quot;Neo4j vs AuraDB vs Cypher&quot;">​</a></h2><p>「Neo4j Inc」 公司的数据库产品叫 《<a href="https://neo4j.com/product/neo4j-graph-database/" target="_blank" rel="noreferrer">Neo4j Graph Database</a>》也就是我们常说的 Neo4j 数据库， 也叫 <strong>Neo4j DBMS</strong>。</p><p><img src="'+h+'" alt="Neo4j DBMS"></p><p>除了 Neo4j 数据库，Neo4j 公司还开发了新的产品 《<a href="https://neo4j.com/cloud/platform/aura-graph-database/" target="_blank" rel="noreferrer">Neo4j AuraDB</a>》。 这是一个完全托管的云服务，相当于 Neo4j DBMS 的 SaaS 版本。</p><p><img src="'+l+'" alt="Neo4j AuraDB"></p><p>Neo4j 公司另外一个最重要的产品就是 《<a href="https://neo4j.com/product/cypher-graph-query-language/" target="_blank" rel="noreferrer">Cypher</a>》， 这是 Neo4j 数据库的查询语言，他的作用就相当于 SQL 之于关系数据库。</p><p><img src="'+e+'" alt="Cypher"></p><h2 id="下载安装" tabindex="-1">下载安装 <a class="header-anchor" href="#下载安装" aria-label="Permalink to &quot;下载安装&quot;">​</a></h2><p>如果大家想在本地开发测试使用 Neo4j 那就<strong>不要</strong>在官网点击「免费试用」， 直接打开<a href="https://neo4j.com/download/" target="_blank" rel="noreferrer">Neo4j 下载中心</a>， 点击下载即可：</p><p><img src="'+k+'" alt="Neo4j 下载中心"></p><p>不过注意， <strong>Neo4j Desktop</strong> 虽然把所有的工具都包含进去了，非常方便，但是它并<strong>不适合生产环境使用</strong>。</p><blockquote><p>Neo4j Desktop is not suited for production environments.</p></blockquote><p>安装过程我就不说了，选择合适的版本一路点下去就行。安装之后就有 Neo4j 程序的启动图标。</p><p><img src="'+r+'" alt=""></p><div class="admonition note"><p class="admonition-title">生产环境</p><p>生产环境安装 Neo4j 我建议使用容器安装，把数据文件挂载出来，这样的话安装和运维都比较简单，而且稳定性也高。 可以参考 <a href="https://neo4j.com/docs/operations-manual/current/docker/introduction/" target="_blank" rel="noreferrer">Neo4j 容器安装文档</a>来进行操作。</p></div><h2 id="软件使用" tabindex="-1">软件使用 <a class="header-anchor" href="#软件使用" aria-label="Permalink to &quot;软件使用&quot;">​</a></h2><p>打开 Desktop 就可以看到应用程序界面：</p><p><img src="'+o+'" alt=""></p><p>左上角的三个图标分别是「项目」、「数据库」和「应用」。</p><p>第一个功能是「项目」，Neo4j Desktop 安装好之后会自带一个默认的样例项目，里面有一个电影数据库。</p><p><img src="'+d+'" alt="Desktop 样例项目"></p><p>点击启动按钮可以启动这个数据库，启动之后我们看到数据库的状态是 <strong>Active</strong>：</p><p><img src="'+g+'" alt="启动电影样例数据库"></p><p>点击右上角的 『Open』 按钮，会默认新窗口打开 <strong>Neo4pj Browser</strong>，这是一个 GUI 的客户端工具，你可以通过它查看数据库链接信息、服务状态，还可以执行命令。</p><p><img src="'+c+'" alt=""></p><p>我们先从左侧收藏里面执行下 <code>Hello World</code>，然后返回数据：</p><p><img src="'+A+`" alt=""></p><p>命令如下，你也可以拷贝或者手输命令在执行框里面点击执行。具体 Cypher 代码语法含义我们等到后面讲 Cypher 语言的时候再讲。</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">//</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> Hello</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> World!</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">CREATE</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (database:Database </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">{name:&quot;Neo4j&quot;}</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)-[r:SAYS]-</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&gt;(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">message:Message</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> {name:&quot;Hello World!&quot;})</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> RETURN database, message, r</span></span></code></pre></div><p>上述代码创建了一个具有 <code>Database</code> 标签的节点，一个 <code>Message</code> 标签的节点，以及一个 <code>SAYS</code> 类型的边，并返回。</p><p>!!! explain 语法解释 <code>()</code> 表示一个节点，<code>()-[]-&gt;()</code> 表示一个边</p><br><br><p><code>:</code> 冒号前面表示<strong>变量</strong>，冒号后面来表示 <strong>节点标签</strong> 或者 <strong>边类型</strong> !!!</p><h2 id="图数据库" tabindex="-1">图数据库 <a class="header-anchor" href="#图数据库" aria-label="Permalink to &quot;图数据库&quot;">​</a></h2><h3 id="为什么用图数据库" tabindex="-1">为什么用图数据库 <a class="header-anchor" href="#为什么用图数据库" aria-label="Permalink to &quot;为什么用图数据库&quot;">​</a></h3><p>现实中的很多场景天然就是以图的概念存储的，比如人和人之间的关系，每个人有自己的定义和属性，人与人之间会有各种可能的关系。</p><p><img src="`+y+'" alt=" 任何人之间的关系"></p><p>这样的场景用传统的关系型数据库存储的话，无论是从数据结构设计，还是最终的查询性能上都有很多的损耗，此时图数据库就能很好的满足这些场景。</p><div class="admonition note"><p class="admonition-title">图数据库的优点</p><p>图数据库可以在大图中深度和广度的<strong>恒定时间遍历</strong>，在 <strong>浏览深层结构</strong> 时架构的优越性表现尤其明显。</p><p>图数据库还可以<strong>灵活动态的增加新的关系和属性</strong>，并且没有太多的维护和性能损耗。</p></div><h3 id="图数据库的组成" tabindex="-1">图数据库的组成 <a class="header-anchor" href="#图数据库的组成" aria-label="Permalink to &quot;图数据库的组成&quot;">​</a></h3><p>像我们之前《构建个人知识图谱》文章里提到的一样，图数据库有三个概念来表示数据：<strong>节点</strong>、<strong>关系</strong>和<strong>属性</strong>。 节点和关系又组成了经典的三元组关系：节点-关系-节点，节点和关系上都可以有自己的属性。</p><p><img src="'+C+'" alt="图数据库的基本构成(图片来自 Neo4j 网站)"></p><h3 id="节点" tabindex="-1">节点 <a class="header-anchor" href="#节点" aria-label="Permalink to &quot;节点&quot;">​</a></h3><p>节点可以用 <strong><code>labels</code></strong> 标记， 比如<code>动物</code>、<code>软件</code>、<code>公司</code>、<code>网站</code>、<code>书籍</code> 等都可以作为 <strong>「标签」</strong>，在《构建个人知识图谱》系列中我们称之为「类型」。。</p><blockquote><p>不同的标签在 Neo4j 的工具会被显示成不同的颜色。</p></blockquote><p>节点可以保存任意数量的属性，当然也可以没有属性。比如<code>张三</code>这个节点，可能有 <code>姓名</code>、<code>性别</code>、<code>名族</code>、<code>年龄</code>等众多属性。</p><p>作为数据库节点还可以有一些约束性质的属性。比如 <code>姓名不能为空</code>、<code>身份证号不能重复</code>等。</p><h3 id="关系" tabindex="-1">关系 <a class="header-anchor" href="#关系" aria-label="Permalink to &quot;关系&quot;">​</a></h3><p>Neo4j 的关系是<strong>有方向</strong>的，用于连接两个节点。关系也可以有自己的<strong>类型</strong>和<strong>属性</strong>。</p><p>每个节点的关系数量也是不受限制的，而且我们还可以通过<strong>正向或者逆向</strong>的方向来查找节点。</p><h2 id="数据建模" tabindex="-1">数据建模 <a class="header-anchor" href="#数据建模" aria-label="Permalink to &quot;数据建模&quot;">​</a></h2><p>我们动手开始所有项目和数据库之前，第一件事情肯定是<strong>建模</strong>。所谓建模就是描述清楚你要做事情的结构， 有哪些数据、数据之间的结构是什么。对这些模型<strong>胸有成竹</strong>，后面做事情才可以游刃有余。</p><h3 id="白板数据建模法" tabindex="-1">白板数据建模法 <a class="header-anchor" href="#白板数据建模法" aria-label="Permalink to &quot;白板数据建模法&quot;">​</a></h3><p>Neo4j 官方推荐<strong>白板建模法</strong>，白板建模法：就是直接在白板（黑板当然也行）上绘制想要的模型和关系，然后照搬的图数据库中即可。</p><p>比如我们想围绕李小龙先生进行一个图谱数据建设，第一步就可以列出实体：</p><blockquote><p>我后面直接用绘图软件画图来模拟白板。</p></blockquote><p><img src="'+F+'" alt="绘制实体节点"></p><p>然后绘制好连线，可能是这样子：</p><p><img src="'+D+'" alt="绘制节点之间的关系"></p><blockquote><p>一般来说，主要的连线在白板上绘制实体的时候已经绘制好了。</p></blockquote><p>下一步，添加标签和节点属性，我们用不同颜色表示<strong>不同类型的节点（标签）</strong>，一个节点可能有多种类型标签， 同时完善节点和关系的属性，当然别忘了关系也有自己的<strong>关系类型</strong>哦。</p><p><img src="'+E+'" alt="标记节点属性"></p><p>最后一步就是把我们刚刚梳理的关系原样录入图数据库了。</p><h3 id="建模步骤" tabindex="-1">建模步骤 <a class="header-anchor" href="#建模步骤" aria-label="Permalink to &quot;建模步骤&quot;">​</a></h3><p>我们再画一个例子，一步步看下怎么样从零开始图数据库的建模。</p><h4 id="场景描述" tabindex="-1">场景描述 <a class="header-anchor" href="#场景描述" aria-label="Permalink to &quot;场景描述&quot;">​</a></h4><p>首先我们描述下我们的需求，这次我们换个需求，关注下西游记：</p><blockquote><p>金角大王和银角大王两个妖怪是兄弟俩，他们都想吃唐僧这个和尚的肉。</p></blockquote><h4 id="提取节点" tabindex="-1">提取节点 <a class="header-anchor" href="#提取节点" aria-label="Permalink to &quot;提取节点&quot;">​</a></h4><p>比如可以从上面的场景描述中提取如下节点：</p><ul><li>金角大王</li><li>银角大王</li><li>唐僧</li></ul><p><img src="'+u+'" alt=""></p><div class="admonition note"><p class="admonition-title"> 如何识别节点</p><p>场景中的<strong>每一个实体都是一个节点</strong>，比如<code>金角大王</code>和<code>银角大王</code>这两个<strong>妖怪</strong>，<code>唐僧</code> 是个 <strong>和尚</strong>。</p><p><code>妖怪</code>以及<code>和尚</code>这个<strong>职业</strong>，在我们的场景中更偏向是一种类型，这类节点、和类型（/属性）定位不清楚的<strong>名词</strong>否作为节点我们后面单独讨论。</p></div><h4 id="提取节点标签" tabindex="-1">提取节点标签 <a class="header-anchor" href="#提取节点标签" aria-label="Permalink to &quot;提取节点标签&quot;">​</a></h4><p>前面提到，<strong>一个节点可能有多个标签</strong>，这些标签可以为<strong>节点进行分类或分组</strong>。比如按照对按照职业或者身份进行分组，可能有「教师」、 「学生」、「演员」、「工程师」、「历史学家」等等很多标签，同时一个人也可以兼顾不同的身份。</p><blockquote><p>金角大王和银角大王两个妖怪是兄弟俩，他们都想吃唐僧这个和尚的肉。</p></blockquote><p>这样的话，上面场景我们可以提取出如下标签：</p><ul><li>妖怪</li><li>和尚</li></ul><p><img src="'+m+'" alt=""></p><div class="admonition note"><p class="admonition-title">为什么使用标签</p><p>在图数据库中，标签就相当于一个<strong>集合</strong>，我们在查询的时候可以快速使用标签类划分查询范围，让查询更容易编写以及更加高效。</p><p>通常情况下，我们的查询也都是在集合内，而不是整个图。</p></div><h4 id="定义关系" tabindex="-1">定义关系 <a class="header-anchor" href="#定义关系" aria-label="Permalink to &quot;定义关系&quot;">​</a></h4><p>现在我们有了数据主体，但是这些主体目前还是孤零零的个体，因为还缺少了图数据库中的一个重要部分：『关系』。</p><p>关系允许我们链接两个节点，它有一个源节点、带箭头的方向以及一个目标节点，同时关系也有自己的名字（动作），以及他们自己的属性。</p><blockquote><p>金角大王和银角大王两个妖怪是兄弟俩，他们都想吃唐僧这个和尚的肉。</p></blockquote><p>在上面这个场景中我们可以找到关系：</p><ul><li>金角大王和银角大王<strong>是兄弟</strong></li><li>他们<strong>想吃唐僧</strong></li></ul><p>「师兄弟」和「想吃唐僧」这两个动作就是我们说的关系了。</p><p><img src="'+B+`" alt=""></p><h4 id="定义属性" tabindex="-1">定义属性 <a class="header-anchor" href="#定义属性" aria-label="Permalink to &quot;定义属性&quot;">​</a></h4><p>简单来说，我们已经完成了图数据库的定义，因为画出来的图已经有模有样了。 但是有时候为了存储更多的信息，更准确的描述实体，我们往往还需要定义属性。</p><p>属性是可以存储在节点或关系上的数据的名称/值对。常见的数据类型都可以作为属性值：</p><ul><li>字符</li><li>整数、小数</li><li>布尔</li><li>日期和时间</li></ul><p>我们对于节点本身的任何疑问都可以变成属性来设计：</p><ul><li>金角大王几岁了</li><li>银角大王身高多少</li><li>金角大王的真身是什么</li><li>唐僧是男是女</li><li>唐僧多少斤</li><li>唐僧生日是哪天</li><li>唐僧什么时候当和尚的</li><li>...</li></ul><p>只要你有问有答，他就可以作为一个属性。</p><h4 id="创建模型" tabindex="-1">创建模型 <a class="header-anchor" href="#创建模型" aria-label="Permalink to &quot;创建模型&quot;">​</a></h4><p>创建模型需要使用 Cypher 语句，刚刚的西游记三人组我们使用 <code>MERGE</code> 字据来创建数据模型。在 Neo4j Browser 中运行以下代码：</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">MERGE</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (j:Monster {</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;金角大王&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">})</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    ON</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> CREATE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> set</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> j</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">age</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 3100</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">MERGE</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (y:Monster {</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;银角大王&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">})</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  ON</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> CREATE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> set</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> y</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">age</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 2800</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">MERGE</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (t:Monk {title: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;唐僧&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">})</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  ON</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> CREATE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> set</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> t</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">height</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 182</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">MERGE</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (j)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">[rel1:IS_BROTHER]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(y)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  ON</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> CREATE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> SET</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> rel1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">since</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &#39;-2023&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">MERGE</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (j)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">[rel2:WANT_EAT]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(t)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  ON</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> CREATE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> SET</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> rel2</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">desire</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 4</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">rel2</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">possibility</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 0</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">MERGE</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (y)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">[rel3:WANT_EAT]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(t)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  ON</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> CREATE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> SET</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> rel3</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">desire</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 3</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">rel3</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">possibility</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 0</span></span></code></pre></div><p>!!! explain 语法解释 <code>MERGE ... ON CREATE ...</code> 表示查找节点，如果不存在则创建并设置属性 !!!</p><p>可以看到提示创建成功：</p><p><img src="`+b+`" alt="节点和关系创建成功"></p><p>接着我们执行查询验证下：</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">//</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> Get</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> some </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">data</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">MATCH</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (n1)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">[r]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(n2) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">RETURN</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> r, n1, n2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">LIMIT</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 25</span></span></code></pre></div><p>!!! explain 语法解释 <code>MATCH ()-[]-&gt;() RETURN ...</code> 表示查找所有关系，并返回关系中的节点和边 !!!</p><p>可以看到查询结果：</p><p><img src="`+q+'" alt="查询结果"></p><p>点击「金角大王」节点，可以看到节点标签和属性（其他节点以同样）：金角大王是一个 <code>Monster</code>，年龄是 <code>3100</code> 岁，名字叫<code>金角大王</code>。</p><p><img src="'+_+`" alt="节点标签和属性"></p><div class="admonition note"><p class="admonition-title">图数据的删除</p><p>因为 Neo4j <strong>不允许出现损坏的边</strong>，也就是不能允许边只有一个端点。</p><p>所以我们再删除数据的时候必须<strong>先删除边，再删除节点</strong>。</p></div><p>我们先删除<code>妖怪想吃唐僧</code> 这些边：</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">MATCH</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (n:Monster)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">[r:WANT_EAT]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">DELETE</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> r</span></span></code></pre></div><p>提示成功删除两条边：</p><p><img src="`+N+`" alt=""></p><p>然后删除唐僧这个和尚，执行下面语句：</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">MATCH</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (n:Monk {title: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;唐僧&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">})</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">DELETE</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> n</span></span></code></pre></div><p><img src="`+v+`" alt="唐僧删除成功"></p><p>以及兄弟这条边：</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">MATCH</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (n:Monster)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">[r:IS_BROTHER]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">DELETE</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> r</span></span></code></pre></div><p>删除所有妖怪：</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">MATCH</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (n:Monster)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">DELETE</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> n</span></span></code></pre></div><h3 id="中文标签" tabindex="-1">中文标签 <a class="header-anchor" href="#中文标签" aria-label="Permalink to &quot;中文标签&quot;">​</a></h3><p>我们刚才用 <code>Monk</code> <code>Moster</code> <code>WANT_EAT</code> <code>IS_BROWSER</code> 这些英文单词来表示节点和边，有人可能耗时是不是标签只能用英文？</p><p>当然不是，中文标签 Neo4j 也是支持的。</p><blockquote><p>用英文标签纯粹是为了在写查询和程序的时候可以不切换输入法，并且大小写可以区分边和、节点。</p></blockquote><p>我们改一下建模语句，先创建节点河边：</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">MERGE</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (j:妖怪 {姓名: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;金角大王&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">})</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  ON</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> CREATE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> set</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> j</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">年龄</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 3100</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">MERGE</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (y:妖怪 {姓名: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;银角大王&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">})</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  ON</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> CREATE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> set</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> y</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">年龄</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 2800</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">MERGE</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (t:和尚 {姓名: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;唐僧&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">})</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  ON</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> CREATE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> set</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> t</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">身高</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 182</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">MERGE</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (j)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">[rel1:是兄弟]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(y)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  ON</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> CREATE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> SET</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> rel1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">自从</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &#39;-2023&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">MERGE</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (j)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">[rel2:想吃]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(t)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  ON</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> CREATE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> SET</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> rel2</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">程度</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 4</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">rel2</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">可能性</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 0</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">MERGE</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (y)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">[rel3:想吃]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(t)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  ON</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> CREATE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> SET</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> rel3</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">程度</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 3</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">rel3</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">可能性</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 0</span></span></code></pre></div><p>然后查询返回：</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">//</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> Query</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">MATCH</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (n1)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">[r]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(n2) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">RETURN</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> r, n1, n2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">LIMIT</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 25</span></span></code></pre></div><p><img src="`+j+'" alt="完全中文的节点"></p><p>但是这样有一个问题，Neo4j 不知道哪个节点是节点名称，所以建议 <code>title</code> 和 <code>name</code> 属性使用英文，其他的属性可以根据需要使用中文或者英文。 当然你也可以在 Neo4j Browser 里面进行设置节点名称使用哪个属性。</p><h2 id="模型设计" tabindex="-1">模型设计 <a class="header-anchor" href="#模型设计" aria-label="Permalink to &quot;模型设计&quot;">​</a></h2><p>我们熟悉了基本的建模流程之后，再回来考虑刚刚抛出的问题：<strong>节点上的内容应该怎么建模？</strong></p><p>我们前面有一个例子是说「妖怪」和「和尚」这两个身份，当时我们是使用标签来表示的。 其实还有两种表示方法：使用<strong>属性</strong>和<strong>节点</strong>。</p><p>使用属性表示的时候，他么都有一个统一的属性名字在区分，我们再扩展一下身份，唐僧不仅是谁和尚还是人，看看怎么表示：</p><p><img src="'+f+'" alt="使用属性表示身份"></p><p>当然也可以用节点来表示：</p><p><img src="'+T+'" alt="使用节点表示身份"></p><p>这三种方式没有优劣，最终还是看你对这些数据的使用和组织方式，<strong>怎么维护和查询方便就怎么定义。</strong></p><h2 id="复杂的数据结构" tabindex="-1">复杂的数据结构 <a class="header-anchor" href="#复杂的数据结构" aria-label="Permalink to &quot;复杂的数据结构&quot;">​</a></h2><p>看到这里，你可能觉得你已经掌握了 Neo4j 图数据库的建模，足矣应对你的使用需求。</p><p>大多数时候是这样的，但是我还是有几个小技巧来教给你。</p><h3 id="超边和中间点" tabindex="-1">超边和中间点 <a class="header-anchor" href="#超边和中间点" aria-label="Permalink to &quot;超边和中间点&quot;">​</a></h3><p>还是拿西游记中金角大王和唐僧的故事来举例，如果我们要查询下他们什么时候初次见面的怎么办？</p><p>这个时候我们就可以用「超边」或者说是「中间节点」这个技术来进行建模。</p><p><img src="'+x+'" alt="使用中间节点进行建模"></p><h3 id="日期事件" tabindex="-1">日期事件 <a class="header-anchor" href="#日期事件" aria-label="Permalink to &quot;日期事件&quot;">​</a></h3><p>我们扩展一下，这个中间节点不只有一次，或者是周期性发生的，比如学生每个学期的开学、打工人每天的打卡， 西游记里面唐僧的十次转世投胎，而对于「开学」、「打开」、「转世」这些事情有公共的属性，但是每次发生又有独立的属性。</p><p>此时我们可以把这个<strong>事件本身作为一个节点</strong>，每次事件发生也作为一个节点，就既能满足通用型查询、又能满足个性事件查询。</p><h3 id="索引" tabindex="-1">索引 <a class="header-anchor" href="#索引" aria-label="Permalink to &quot;索引&quot;">​</a></h3><p>图数据库和关系数据库一样也有索引的概念。<strong>合理的运用索引能很好的提升搜索性能</strong>。Neo4j 可以为节点和边创建索引，支持下面索引类型：</p><ul><li>范围索引</li><li>Lookup 索引</li><li>文本索引</li><li>点索引</li><li>全文索引。</li></ul><p>对索引有兴趣的可以查看官方的 <a href="https://neo4j.com/docs/cypher-manual/current/indexes-for-search-performance/" target="_blank" rel="noreferrer">索引和搜索性能</a>文档。</p><h2 id="结语" tabindex="-1">结语 <a class="header-anchor" href="#结语" aria-label="Permalink to &quot;结语&quot;">​</a></h2><p>图数据库很强大，我们做设计的时候对其基本概念有一个完整的了解很有必要，了解了这些之后再我们应用的时候一些更高级的概念时， 结合我们之前的工程知识就变得信手拈来了， 比如 Cypher 查询、子查询、条件匹配、函数的使用、查询调优等等。</p><p>最后希望大家都能在图数据库的世界里尽情遨游。</p>',167)]))}const W=i(M,[["render",R]]);export{L as __pageData,W as default};
