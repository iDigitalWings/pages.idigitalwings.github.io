import{_ as i,a,af as e,o as h}from"./chunks/framework.C87LdZyP.js";const F=JSON.parse('{"title":"Linux memory","description":"","frontmatter":{"title":"Linux memory","date":"2017-12-12T00:00:00.000Z","tags":["linux","memory"]},"headers":[],"relativePath":"posts/2017/12/2017-12-12-3-linux-memory-buffers-cached.md","filePath":"posts/2017/12/2017-12-12-3-linux-memory-buffers-cached.md","lastUpdated":1718173059000}'),n={name:"posts/2017/12/2017-12-12-3-linux-memory-buffers-cached.md"};function p(t,s,l,r,d,k){return h(),a("div",null,s[0]||(s[0]=[e(`<h2 id="手动释放" tabindex="-1">手动释放 <a class="header-anchor" href="#手动释放" aria-label="Permalink to &quot;手动释放&quot;">​</a></h2><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">sync</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> &amp;&amp; </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">echo</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 3</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> &gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> /proc/sys/vm/drop_caches</span></span></code></pre></div><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"># To free pagecache:</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">echo</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> &gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> /proc/sys/vm/drop_caches</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"># To free dentries and inodes:</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">echo</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> &gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> /proc/sys/vm/drop_caches</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"># To free pagecache, dentries and inodes:</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">echo</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 3</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> &gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> /proc/sys/vm/drop_caches</span></span></code></pre></div><h2 id="free-命令" tabindex="-1">free 命令 <a class="header-anchor" href="#free-命令" aria-label="Permalink to &quot;free 命令&quot;">​</a></h2><p><code>free</code> 命令：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> free</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> -h</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">             total</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">       used</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">       free</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">     shared</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">    buffers</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">     cached</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">Mem:</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">           31G</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">        15G</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">        16G</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">        18M</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">       728M</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">       5.9G</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">-/+</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> buffers/cache:</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">       8.8G</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">        22G</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">Swap:</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">           0B</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">         0B</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">         0B</span></span></code></pre></div><p>第一行：</p><ul><li>total：物理内存的总大小</li><li>used：已经使用的物理内存大小</li><li>free：空闲的物理内存大小</li><li>shared：多个进程共享的内存大小</li><li>buffers/cached：磁盘缓存的大小</li></ul><p>第二行<code>Mem</code>: 代表物理内存使用情况</p><p>第三行<code>(-/+ buffers/cached)</code>: 代表磁盘缓存使用状态</p><ul><li>-buffers/cache (已用)的内存数:used - buffers - cached</li><li>+buffers/cache(可用)的内存数:free + buffers + cached</li></ul><p>第四行<code>Swap</code>: 表示交换空间内存使用状态</p><h2 id="" tabindex="-1">--- <a class="header-anchor" href="#" aria-label="Permalink to &quot;---&quot;">​</a></h2><p>free命令输出的内存状态，可以通过两个角度来查看：一个是从内核的角度来看，一个是从应用层的角度来看的。</p><p>从内核的角度来查看内存的状态</p><p>就是内核目前可以直接分配到，不需要额外的操作，即为上面free命令输出中第二行Mem项的值，可以看出，此系统物理内存有3894036K，空闲的内存只有420492K，也就是40M多一点，我们来做一个这样的计算：</p><p>3894036 – 3473544 = 420492</p><p>其实就是总的物理内存减去已经使用的物理内存得到的就是空闲的物理内存大小，注意这里的可用内存值420492并不包含处于buffers和cached状态的内存大小。</p><p>如果你认为这个系统空闲内存太小，那你就错了，实际上，内核完全控制着内存的使用情况，Linux会在需要内存的时候，或在系统运行逐步推进时，将buffers和cached状态的内存变为free状态的内存，以供系统使用。</p><p>从应用层的角度来看系统内存的使用状态</p><p>也就是Linux上运行的应用程序可以使用的内存大小，即free命令第三行 -/+ buffers/cached 的输出，可以看到，此系统已经使用的内存才2068224K，而空闲的内存达到1825812K，继续做这样一个计算：</p><p>420492＋（72972＋1332348）＝1825812</p><p>通过这个等式可知，应用程序可用的物理内存值是Mem项的free值加上buffers和cached值之和，也就是说，这个free值是包括buffers和cached项大小的，<code>对于应用程序来说，buffers/cached占有的内存是可用的，因为buffers/cached是为了提高文件读取的性能，当应用程序需要用到内存的时候，buffers/cached会很快地被回收，以供应用程序使用</code>。</p><p>buffers与cached的异同</p><p>在Linux 操作系统中，当应用程序需要读取文件中的数据时，操作系统先分配一些内存，将数据从磁盘读入到这些内存中，然后再将数据分发给应用程序；当需要往文件中写数据时，操作系统先分配内存接收用户数据，然后再将数据从内存写到磁盘上。然而，如果有大量数据需要从磁盘读取到内存或者由内存写入磁盘时，系统的读写性能就变得非常低下，因为无论是从磁盘读数据，还是写数据到磁盘，都是一个很消耗时间和资源的过程，在这种情况下，Linux引入了buffers和cached机制。</p><p>buffers与cached都是内存操作，用来保存系统曾经打开过的文件以及文件属性信息，这样当操作系统需要读取某些文件时，会首先在buffers与cached内存区查找，如果找到，直接读出传送给应用程序，如果没有找到需要数据，才从磁盘读取，这就是操作系统的缓存机制，通过缓存，大大提高了操作系统的性能。但buffers与cached缓冲的内容却是不同的。</p><p><code>buffers是用来缓冲块设备做的，它只记录文件系统的元数据（metadata）以及 tracking in-flight pages，而cached是用来给文件做缓冲</code>。更通俗一点说：buffers主要用来存放目录里面有什么内容，文件的属性以及权限等等。而cached直接用来记忆我们打开过的文件和程序。</p><hr><ul><li><a href="http://blog.csdn.net/heweimingming/article/details/52230293" target="_blank" rel="noreferrer">linux内存中buffer和 cached的比较</a></li><li><a href="https://linux.cn/article-211-1.html" target="_blank" rel="noreferrer">手动释放linux内存cache</a></li></ul>`,29)]))}const o=i(n,[["render",p]]);export{F as __pageData,o as default};
