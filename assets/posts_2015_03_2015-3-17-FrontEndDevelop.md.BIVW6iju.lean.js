import{_ as t,a,af as p,o as l}from"./chunks/framework.C87LdZyP.js";const u=JSON.parse('{"title":"适合的才是最好的","description":"","frontmatter":{"title":"适合的才是最好的","date":"2015-03-17T00:00:00.000Z","tags":["design"]},"headers":[],"relativePath":"posts/2015/03/2015-3-17-FrontEndDevelop.md","filePath":"posts/2015/03/2015-3-17-FrontEndDevelop.md","lastUpdated":1718193786000}'),o={name:"posts/2015/03/2015-3-17-FrontEndDevelop.md"};function i(r,e,n,s,d,c){return l(),a("div",null,e[0]||(e[0]=[p('<p>群里一个大神（前端）说他一个项目90%用了接口编程，其它同事在参与进来之后觉得很不方便，代码太分散，调试麻烦等等。然后抱怨现在的前端人员只懂的jquery之流，没有面向对象思想。</p><p>有一点思考，便记录下来。</p><h2 id="该不该用接口编程" tabindex="-1">该不该用接口编程 <a class="header-anchor" href="#该不该用接口编程" aria-label="Permalink to &quot;该不该用接口编程&quot;">​</a></h2><p>所谓存在即合理，任何技术出现了，就一定有它的生存土壤，接口编程在服务端开发中大行其道，那么在前段开发中应该如何选择？</p><p>先不说接口编程，大学时我们都学过马克思哲学，里面提到推动事物发展的内外因，所谓哲学，拿到任何地方都是有些借鉴意义的。下面想一想项目中对我们开发人员来说的内因外因：</p><h2 id="外因" tabindex="-1">外因 <a class="header-anchor" href="#外因" aria-label="Permalink to &quot;外因&quot;">​</a></h2><p><code>外面的东西人们直接能看到的，也是很多人也只能看到的。</code></p><p>对于我们开发人员外因就是诸如项目需求，工期，预算等等。</p><p>假设外部条件很舒适，我们有足够耐心和环境去做出一个优秀的产品，那么外因主要锁定在需求和隐藏他那下面的复杂程度。此时合格的架构师就给出判断：用什么样的架构才能最快最好地完成这个产品。</p><p>比如一个复杂的企业应用，包含订单，采购，仓储，销售，报表，看报等复杂的模块，需求中这些模块功能可能随时变化和增加。此时模块化和接口设似乎成了不二的选择，至少我还没想出有什么别的方法去管理这些成千上万行的代码，并且可以有效地避免重复，优雅的扩展程序。</p><p>如果是一个展示产品渐进发布的功能特性，诸如功能增加删除，变更内容列表及其展示，改动文件列表及其图形化展示。这样一个项目，对于我来说是不愿意和接口或者对象扯上关系的。</p><p>由于我工作内容主要是服务端开发，这两个项目也是我写的不多前端程序中的两个，当然第一个仍然在写（是一个巨大工程）。 第二个项目的界面也很富有交互性，功能也有一点。不过最终实现里核心的js代码量其实就不足100行，在此感谢jquery及其插件。这个代码量也就是我实现一个接口系统的代码量，还不能说是对开发者友好的接口系统。</p><p>上面两个例子有点极端，不过相信各位看官能从中读出点什么，比如代码量，重复，扩展这些关键词。</p><h2 id="内因" tabindex="-1">内因 <a class="header-anchor" href="#内因" aria-label="Permalink to &quot;内因&quot;">​</a></h2><p>上面是谈了外因，那么内因是什么呢？不用找了，就是屏幕前的你，以及和你一起工作的小伙伴们。</p><p>理想的情况是所有团队成员都拥有熟练的编程技巧，设计思想了然于胸，事实不可能如此，就算前面两点满足了，你们的思想还可能不一样。汗！</p><p>再回到接口编程产生的终极历史使命：提升系统稳定性，开发和维护效率。此时作为架构师，不应该想着用了什么样的技术架构先进与否，而是首先要考虑你当前做的设计：</p><ul><li>是不是真能提升开发和维护效率，</li><li>能不能真正的提高生产力能不能禁得住时间和历史的考验，以及更实际的，</li><li>能不能hold所有团队成员，</li><li>能不能让核心开发人员hold你的框架，</li><li>让所有开发人员hold住他们所负责的部分，</li><li>能不能让接触你你代码的人心情愉悦的完成工作，</li><li>甚至是心生感激。</li></ul><p><strong>让开发人员心情愉悦甚至心存感激</strong>，我认为这是衡架构人员是否成功很重要的甚至是终极标准。</p><p>此时有人会说，那架构合理，稳当，高效，伸缩，等等标准跑哪里了？你的同事们都不是傻子（甚至是国内各大互联网公司的开发人员），我想你也不是一位倾国倾城的美女吧，如果你做不到前面的要求，能让你的开发人员，愉快的工作甚至心存感激？</p><p>再回到开篇，那个设计最终不知道是不是在整个团队提高了生产力，增加了系统稳定性。不过同事的抱怨和不适应，是很明显的坏味道，甚至比一篇代码没有一个注释，一个方法超过几百行，包含了眼花缭乱的循环嵌套更加明显的坏味道。在此，提醒自己。</p><p>最后可能还会有人想，有些人水平就是不行，这么好的设计都读不懂，没法沟通如何如何，当然不排除混在攻城狮队伍中的狮子狗，或者精英团队里面普普通通的开发人员，但毕竟是一个团队，我认为处理团队成员这样的不适应有三件事情去做：</p><ul><li>沟通：如果是和你水平相当的人，沟通之后，应该要全能愉快的做朋友了，甚至对你之前的设计提出很好的建议。</li><li>培训，沟通下来，发现理解能力差一点，培训能弥补这一缺陷。上面我说的提高生产力，是包含了沟通培训这些时间的。</li><li>最后对于那些连培训门槛都没达到的，并且自己不愿意主动学习，来不及学习，或者培训了还不够。这样的人我们应该及时转换其职能，可以安排简单一点的他完全能胜任的工作给他。</li></ul><p>最后一句自勉，程序员是清高的，但是不应该孤芳自赏。</p><hr><div style="text-align:center;color:#00000099;font-size:14px;">END</div>',26)]))}const f=t(o,[["render",i]]);export{u as __pageData,f as default};
