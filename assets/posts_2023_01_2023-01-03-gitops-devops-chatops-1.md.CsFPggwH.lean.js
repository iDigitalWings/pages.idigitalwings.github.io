import{_ as t,a as s,af as i,o as a}from"./chunks/framework.C87LdZyP.js";const e="/assets/gitops-pipline.CxHwgIJ7.png",o="/assets/chatops-pipline.Bph5rgwY.png",G=JSON.parse('{"title":"DevOps、GitOps、ChatOps","description":"","frontmatter":{"title":"DevOps、GitOps、ChatOps","date":"2023-01-03T00:00:00.000Z","tags":["devops","gitops","chatops"],"category":["其它"]},"headers":[],"relativePath":"posts/2023/01/2023-01-03-gitops-devops-chatops-1.md","filePath":"posts/2023/01/2023-01-03-gitops-devops-chatops-1.md","lastUpdated":1718173059000}'),l={name:"posts/2023/01/2023-01-03-gitops-devops-chatops-1.md"};function r(n,p,c,h,O,d){return a(),s("div",null,p[0]||(p[0]=[i('<p>DevOps 作为一种文化，旨在促进<strong>开发、测试和运维人员</strong>之间的沟通与协作。 而促进合作的方式，往往是使用一系列工具，完成这三个角色的相互协作。 这带来的好处也是显而易见的：更快的交付速度和更低的人力成本。</p><p>获益于 DevOps 和公有云，一个近百人的研发团队，可以只配备一到两个专职运维人员，降低的成本不言而喻。</p><p>DevOps 有多种不同的实践，他们的最终目的都是：</p><ul><li>最大化的实现自动化，</li><li>释放更多的人力资源，</li><li>创建更大价值。</li></ul><p>而 GitOps 和 ChatOps ，则是 DevOps 的两种实践。 这两种实践分别通过使用 版本控制软件 Git 和实时聊天软件来达到提升交付速度和研发效率的目的。</p><h2 id="gitops" tabindex="-1">GitOps <a class="header-anchor" href="#gitops" aria-label="Permalink to &quot;GitOps&quot;">​</a></h2><p>GitOps 是一种实现持续交付的模型，它的核心思想是将应用系统的声明性基础架构和应用程序存放在 Git 的版本控制库中。</p><p>将 Git 作为交付流水线的核心， 每个开发人员都可以提交拉取请求（Pull Request）并使用 Git 来加速和简化 Kubernetes 的应用程序部署和运维任务。 通过使用像 Git 这样的简单熟悉工具，开发人员可以更高效地将注意力集中在创建新功能而不是运维相关任务上。</p><p>通过应用 GitOps ，应用系统的基础架构和应用程序代码可以快速查找来源——基础架构和应用程序代码都存放在 GitLab 、 或者 GitHub 等版本控制系统上。这使开发团队可以提高开发和部署速度并提高应用系统可靠性。</p><p><img src="'+e+'" alt="gitops-pipline.png"></p><p>将 GitOps 应用在持续交付流水线上，有诸多优势和特点：</p><ul><li>安全的云原生 CI/CD 管道模型</li><li>更快的平均部署时间和平均恢复时间</li><li>稳定且可重现的回滚（例如，根据 Git 恢复/回滚/ fork）</li><li>与监控和可视化工具相结合，对已经部署的应用进行全方位的监控</li></ul><p>在我看来 GitOps 的最大优势就是通过完善的 Git 分支管理来达到管理所有 CI/CD 管道流水线的目的， 不同的环境可以对应不同分支，在该环境出现问题时候，可以直接查找对应分支代码，达到快速排查问题的目的。 而对于 Git 的熟悉，更是省去学习使用一般 DevOps 工具所需的学习成本和配置时间， 开发人员可以无任何培训直接上手使用，进一步降低了时间与人力成本。</p><h2 id="chatops" tabindex="-1">ChatOps <a class="header-anchor" href="#chatops" aria-label="Permalink to &quot;ChatOps&quot;">​</a></h2><p>ChatOps 以聊天室（聊天群），即实时聊天软件为中心，通过一系列的机器人去对接后台的各种服务， 开发&amp;测试&amp;运维人员只需要在聊天窗口中与机器人对话，即可与后台服务进行交互， 整个工作的展开就像是使唤一个智能助手那样简单自然。</p><p><img src="'+o+'" alt="chatops-pipline.png"></p><p>ChatOps 带来了很多好处：</p><ul><li>公开透明。所有的工作消息都在同一个聊天平台中沉淀并公开给所有相关成员，消除沟通壁垒，工作历史有迹可循，团队合作更加顺畅。</li><li>上下文共享。减少因工作台切换等对消息的截断，保证消息的完整性，让工作承接有序，各角色，各工具都成为完成工作流中的一环，打造真正流畅的工作体验。</li><li>移动友好。只需要在前台与预设好的机器人对话即可完成与后台工具、系统的交互，在移动环境下无需再与众多复杂的工具直接对接，大大提升移动办公的可行性。</li><li>DevOps 文化打造。用与机器人对话这种简单的方式降低 DevOps 的接受门槛，让这种自动化办公的理念更容易的扩展到团队的每一个角落。</li></ul>',18)]))}const u=t(l,[["render",r]]);export{G as __pageData,u as default};
