import{_ as i,a,af as n,o as t}from"./chunks/framework.C87LdZyP.js";const p="/assets/113783821178250.D2QEtUhB.png",c=JSON.parse('{"title":"《AI Agents in LangGraph》001：从零开始实现 Agent","description":"","frontmatter":{"title":"《AI Agents in LangGraph》001：从零开始实现 Agent","date":"2024-06-11 10:00:00","tags":["LearnDL","LangGraph","Agent"],"category":["AI"]},"headers":[],"relativePath":"topics/learn-deepleaning/ai-agents-in-langgraph/2024-06-11-x1-agent-from-scratch.md","filePath":"topics/learn-deepleaning/ai-agents-in-langgraph/2024-06-11-x1-agent-from-scratch.md","lastUpdated":1720085681000}'),l={name:"topics/learn-deepleaning/ai-agents-in-langgraph/2024-06-11-x1-agent-from-scratch.md"};function h(e,s,k,r,d,g){return t(),a("div",null,s[0]||(s[0]=[n('<div class="admonition abstract"><p class="admonition-title">abstract</p><p>今天分享《使用LangGraph构架AI代理》教程，不过今天不讲框架，我们讲一下从零开始如何实现一个 Agent。 让大家知道事情<strong>最原始</strong>最核心的样子是什么样。</p></div><p>说起 Agent 框架，大家可能觉得很复杂吧，其实核心逻辑很简单，简单的让你觉得不是 Agent。 今天先和大家一起从零实现 AI 代理，只用到 Python 和 OpenAI。</p><h2 id="react" tabindex="-1">ReAct <a class="header-anchor" href="#react" aria-label="Permalink to &quot;ReAct&quot;">​</a></h2><p>我们用 ReAct 来实现 AI 代理。 ReAct 是「Reason - Act」 的意思。</p><p>简单的描述一下流程就是：</p><ul><li>用户给出问题</li><li>AI 分析原因</li><li>调用工具行动</li><li>观察行动结果 <ul><li>如果满足问题，那么就结束了</li><li>如果不满足，重复第二步，最后直到问题的解决。</li></ul></li></ul><p><img src="'+p+`" alt=""></p><div class="admonition note"><p class="admonition-title">ReAct</p><p>我们之前讲《提示工程》和《LangChain入门》的时候都提到过，注明的的开源框架 <strong>LangChain</strong> 可以说就是整个在 ReAct 实现的。 ReAct 方法加上提示语，在加上一个个的工具，慢慢构成了 LangChain 庞大的生态。</p></div><h2 id="实现" tabindex="-1">实现 <a class="header-anchor" href="#实现" aria-label="Permalink to &quot;实现&quot;">​</a></h2><p>引入 OpenAI 和一些基础类库：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> openai</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> re</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> httpx</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> os</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> dotenv </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> load_dotenv</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">_ </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> load_dotenv()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> openai </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> OpenAI</span></span></code></pre></div><p>创建 OpenAI 客户端，</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">client </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> OpenAI()</span></span></code></pre></div><p>简答测试一下问答能力，</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">chat_completion </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> client.chat.completions.create(</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">    model</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;gpt-3.5-turbo&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">    messages</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">[{</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;role&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;user&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;content&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;Hello world&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">chat_completion.choices[</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">].message.content</span></span></code></pre></div><p>可能会输出：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;你好，您需要什么帮助？&#39;</span></span></code></pre></div><h2 id="agent-类" tabindex="-1">Agent 类 <a class="header-anchor" href="#agent-类" aria-label="Permalink to &quot;Agent 类&quot;">​</a></h2><p>下面实现一个 Python Agent 代理类，我们后面的代理都基于这个类实现。 <code>__call__</code> 表示对象本身的调用。</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> Agent</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    def</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> __init__</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(self, system</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">):</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">        self</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.system </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> system</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">        self</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.messages </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> []</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">        if</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> self</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.system:</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">            self</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.messages.append({</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;role&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;system&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;content&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: system})</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    def</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> __call__</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(self, message):</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">        self</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.messages.append({</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;role&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;user&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;content&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: message})</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> self</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.execute()</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">        self</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.messages.append({</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;role&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;assistant&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;content&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: result})</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> result</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> execute</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(self):</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        completion </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> client.chat.completions.create(</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">                        model</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;gpt-4o&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">                        temperature</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">                        messages</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">self</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.messages)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> completion.choices[</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">].message.content</span></span></code></pre></div><p>我们使用 <code>gpt-40</code> 模型，并定义了一个 <code>execute</code> 方法，来调用大模型。</p><p>编写提示语，这个提示语完成了 ReAct 指令，我们如果要自行实现 Agent，都可以以这个提示语为模块进行修改和扩展：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">prompt </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">你在一个思考、行动、暂停、观察的循环中运行。</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">在循环结束时，你输出一个答案</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">使用思考来描述你对所问问题的想法。</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">使用行动来运行其中一个可用的操作 - 然后返回暂停。</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">观察将是运行这些操作的结果。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">你可用的操作是：</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">计算：</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">例如计算：4 * 7 / 3</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">运行计算并返回数字 - 使用 Python，因此请确保在必要时使用浮点语法</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">平均狗体重：</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">例如平均狗体重：牧羊犬</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">在给定品种的情况下返回狗的平均体重</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">示例会话：</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">问题：斗牛犬的体重是多少？</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">想法：我应该使用 average_dog_weight 来查看狗的体重</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">动作：average_dog_weight：斗牛犬</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">暂停</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">您将再次收到以下信息：</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">观察：斗牛犬重 51 磅</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">然后您输出：</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">答案：斗牛犬重 51 磅</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;&quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.strip()</span></span></code></pre></div><h2 id="定义-action" tabindex="-1">定义 Action <a class="header-anchor" href="#定义-action" aria-label="Permalink to &quot;定义 Action&quot;">​</a></h2><p>思考和推理有了，记下来我们定一下动作。Agent 有了行动的能力，无论是执行函数还是调用工具， Agent 才完整。</p><p>定义两个动作进行运算或者计算平均体重：</p><ul><li>calculate</li><li>average_dog_weight</li></ul><p>把所有的动作到放到 <code>known_actions</code> 里面，这样我们就可以根据动作名称执行相应的动作了。</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> calculate</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(what):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> eval</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(what)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> average_dog_weight</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(name):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">in</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;Scottish Terrier&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;Scottish Terriers average 20 lbs&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    elif</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">in</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;Border Collie&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;a Border Collies average weight is 37 lbs&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    elif</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">in</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;玩具贵宾犬&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;玩具贵宾犬的平均体重为 7 磅&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    else</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;An average dog weights 50 lbs&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">known_actions </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">    &quot;calculate&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: calculate,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">    &quot;average_dog_weight&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: average_dog_weight</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><h2 id="agent-实例" tabindex="-1">Agent 实例 <a class="header-anchor" href="#agent-实例" aria-label="Permalink to &quot;Agent 实例&quot;">​</a></h2><p>提问<code>玩具贵宾犬的重量</code>：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">abot </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> Agent(prompt)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> abot(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;玩具贵宾犬有多重？&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(result)</span></span></code></pre></div><p>根据我们的提示语，可以看到</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span>想法：我应该使用平均狗体重动作来查找玩具贵宾犬的平均体重。</span></span>
<span class="line"><span>动作：average_dog_weight：玩具贵宾犬</span></span>
<span class="line"><span>暂停</span></span></code></pre></div><p>可以看到，Agent 返回了动作 <code>average_dog_weight</code>，我们手动调用一下这个方法：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> average_dog_weight(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;玩具贵宾犬&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span></code></pre></div><p>得到输出：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">玩具贵宾犬的平均体重为 </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">7</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> 磅</span></span></code></pre></div><p>我们把观察到的结果发送给 Agent:</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">next_prompt </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;Observation: </span><span style="--shiki-light:#005CC5;--shiki-dark:#F47067;">{}</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.format(result)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">abot(next_prompt)</span></span></code></pre></div><p>查看最终结果 <code>abot.messages[-1]</code>：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">{</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;role&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;assistant&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">  &#39;content&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;Answer: 玩具贵宾犬的平均体重为 7 磅&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><p>到这里，我们就重现了一次 ReAct 的整个过程，但是每种不足的是，调用现实世界函数是我们手动调用的。</p><p>也就是每次观察 LLM 输出，再反馈给 Agent 都要手动参与，也就是 <code>average_dog_weight</code> 这一步。</p><h2 id="自动调用" tabindex="-1">自动调用 <a class="header-anchor" href="#自动调用" aria-label="Permalink to &quot;自动调用&quot;">​</a></h2><p>如果把 Agent 支持的函数都改成自动调用，那么 Agent 不就可以自己做事情了么。</p><p>我们编写一个循环，用正则解析LLM回答，最大尝试次数为 5 ，自动进行上面的步骤。</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">action_re </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> re.compile(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;^Action: (\\w+): (.*)$&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)   </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"># python regular expression to selection action</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> query</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(question, max_turns</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">):</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 0</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    bot </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> Agent(prompt)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    next_prompt </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> question</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    while</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> max_turns:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">+=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> bot(next_prompt)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">        print</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(result)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        actions </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">            action_re.match(a) </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">            for</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> result.split(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;</span><span style="--shiki-light:#005CC5;--shiki-dark:#F47067;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">            if</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> action_re.match(a)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        ]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> actions:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">            # There is an action to run</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">            action, action_input </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> actions[</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">].groups()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">            if</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> action </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">not</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> in</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> known_actions:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">                raise</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> Exception</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;Unknown action: </span><span style="--shiki-light:#005CC5;--shiki-dark:#F47067;">{}</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#F47067;">{}</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.format(action, action_input))</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">            print</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot; -- running </span><span style="--shiki-light:#005CC5;--shiki-dark:#F47067;">{}</span><span style="--shiki-light:#005CC5;--shiki-dark:#F47067;"> {}</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.format(action, action_input))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">            observation </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> known_actions[action](action_input)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">            print</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;Observation:&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, observation)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">            next_prompt </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;Observation: </span><span style="--shiki-light:#005CC5;--shiki-dark:#F47067;">{}</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.format(observation)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">        else</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">            return</span></span></code></pre></div><p>再一次进行提问：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">question </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;&quot;&quot;我有两只狗，一只边境牧羊犬和一只苏格兰梗犬。</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">它们的总体重是多少&quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">query(question)</span></span></code></pre></div><p>可以看到大致如下的输出：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span>想法：我需要找到边境牧羊犬和苏格兰梗的平均体重，然后将它们加在一起得到总体重。</span></span>
<span class="line"><span>动作：average_dog_weight：边境牧羊犬</span></span>
<span class="line"><span>暂停</span></span>
<span class="line"><span>-- 运行 average_dog_weight 边境牧羊犬</span></span>
<span class="line"><span>观察：边境牧羊犬的平均体重为 37 磅</span></span>
<span class="line"><span>想法：现在我需要找到苏格兰梗的平均体重。</span></span>
<span class="line"><span>动作：average_dog_weight：苏格兰梗</span></span>
<span class="line"><span>暂停</span></span>
<span class="line"><span>-- 运行 average_dog_weight 苏格兰梗</span></span>
<span class="line"><span>观察：苏格兰梗平均体重 20 磅</span></span>
<span class="line"><span>想法：我现在知道了两只狗的平均体重。我将把它们加在一起得到总体重。</span></span>
<span class="line"><span>动作：计算：37 + 20</span></span>
<span class="line"><span>暂停</span></span>
<span class="line"><span>-- 运行计算 37 + 20</span></span>
<span class="line"><span>观察：57</span></span>
<span class="line"><span>答案：边境牧羊犬和苏格兰梗的总体重为 57 磅。</span></span></code></pre></div><p>这个过程是不是很熟悉，和 LangChain 的调用过程基本一致。</p><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p>前面演示的例子是不是看起来挺玩具的。</p><p>其实原理都没有太多变化，基于这个应用你就可以扩展出来很多实用或者有趣的东西。</p><ul><li>比如你想查询天气，可以写一个 <code>get_weature</code> 的 行为，</li><li>如果你每天的工作日志都存下来并且可查，就可以实现一个自动编写发送周报的行为，</li><li>对接地图API，查询交通情况，</li><li>物联网对接，控制家里的电器开关。</li></ul><p>换句话说，用程序能做的事情大致都可以用自然语言和大模型在外面包装一层，形成 Agent 的能力。</p><p>当然，这还只是开始。</p><hr><p>!!! article 阅读更多</p><ul><li><a href="./../../prompt-engineering/articles/2023-07-14-Prompt-Engineering-ReACT">PromptEngineering：ReAct 框架（LangChain 使用的 Agents 框架）</a></li><li><a href="./../../../posts/2023/07/2023-07-26-agentlm-intro">清华如何让开源大模型具备通用代理能力（数据篇）</a></li><li><a href="./../../prompt-engineering/articles/2023-07-13-Prompt-Engineering-ART">PromptEngineering：自动推理并使用工具 (ART)</a></li><li><a href="./../../prompt-engineering/articles/2023-07-15-Prompt-Engineering-APE">PromptEngineering：自动提示工程师(APE)比人类写的提示词更强 ？</a> !!!</li></ul><div style="text-align:center;color:#00000099;font-size:14px;">END</div>`,63)]))}const A=i(l,[["render",h]]);export{c as __pageData,A as default};
