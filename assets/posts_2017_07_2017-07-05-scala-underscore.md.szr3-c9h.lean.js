import{_ as i,a,af as t,o as e}from"./chunks/framework.C87LdZyP.js";const g=JSON.parse('{"title":"Scala: Underscore usage","description":"","frontmatter":{"title":"Scala: Underscore usage","date":"2017-07-06T00:00:00.000Z","tags":["scala"]},"headers":[],"relativePath":"posts/2017/07/2017-07-05-scala-underscore.md","filePath":"posts/2017/07/2017-07-05-scala-underscore.md","lastUpdated":1718193786000}'),h={name:"posts/2017/07/2017-07-05-scala-underscore.md"};function n(l,s,p,k,d,r){return e(),a("div",null,s[0]||(s[0]=[t(`<h2 id="" tabindex="-1"><code>:_*</code> <a class="header-anchor" href="#" aria-label="Permalink to &quot;\`:_*\`&quot;">​</a></h2><p><code>:_*</code> 作为一个整体，告诉编译器你希望将某个参数当作参数序列处理</p><div class="language-scala vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">scala</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">val</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;"> s</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> sum(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> to </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">5</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">_</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span></code></pre></div><p>就是将1 to 5当作参数序列处理。</p><h2 id="existential-types" tabindex="-1">Existential types <a class="header-anchor" href="#existential-types" aria-label="Permalink to &quot;Existential types&quot;">​</a></h2><div class="language-scala vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">scala</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> foo</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">l</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">List</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">[</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">Option</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">[_]]) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> ...</span></span></code></pre></div><h2 id="higher-kinded-type-parameters" tabindex="-1">Higher kinded type parameters <a class="header-anchor" href="#higher-kinded-type-parameters" aria-label="Permalink to &quot;Higher kinded type parameters&quot;">​</a></h2><div class="language-scala vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">scala</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">case</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> A</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">[</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">K</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">[_],</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">](</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">a</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">K</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">[</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">])</span></span></code></pre></div><h2 id="ignored-variables" tabindex="-1">Ignored variables <a class="header-anchor" href="#ignored-variables" aria-label="Permalink to &quot;Ignored variables&quot;">​</a></h2><div class="language-scala vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">scala</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">val</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;"> _</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 5</span></span></code></pre></div><h2 id="ignored-parameters" tabindex="-1">Ignored parameters <a class="header-anchor" href="#ignored-parameters" aria-label="Permalink to &quot;Ignored parameters&quot;">​</a></h2><div class="language-scala vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">scala</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">List</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) foreach { _ </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> println(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;Hi&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) }</span></span></code></pre></div><h2 id="ignored-names-of-self-types" tabindex="-1">Ignored names of self types <a class="header-anchor" href="#ignored-names-of-self-types" aria-label="Permalink to &quot;Ignored names of self types&quot;">​</a></h2><div class="language-scala vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">scala</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">trait</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> MySeq</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> { </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">_</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">Seq</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">[_] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> }</span></span></code></pre></div><h2 id="wildcard-patterns" tabindex="-1">Wildcard patterns <a class="header-anchor" href="#wildcard-patterns" aria-label="Permalink to &quot;Wildcard patterns&quot;">​</a></h2><div class="language-scala vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">scala</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">Some</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">match</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> { </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">case</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> Some</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(_) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> println(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;Yes&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) }</span></span></code></pre></div><h2 id="wildcard-imports" tabindex="-1">Wildcard imports <a class="header-anchor" href="#wildcard-imports" aria-label="Permalink to &quot;Wildcard imports&quot;">​</a></h2><div class="language-scala vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">scala</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> java</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">util</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">_</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> xx</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">SomeUtil</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">_</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> // impport static</span></span></code></pre></div><h2 id="hiding-imports" tabindex="-1">Hiding imports <a class="header-anchor" href="#hiding-imports" aria-label="Permalink to &quot;Hiding imports&quot;">​</a></h2><div class="language-scala vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">scala</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> java</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">util</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.{</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">ArrayList</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> _</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">_</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><h2 id="joining-letters-to-punctuation" tabindex="-1">Joining letters to punctuation <a class="header-anchor" href="#joining-letters-to-punctuation" aria-label="Permalink to &quot;Joining letters to punctuation&quot;">​</a></h2><div class="language-scala vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">scala</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> bang_!</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">x</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 5</span></span></code></pre></div><h2 id="assignment-operators" tabindex="-1">Assignment operators <a class="header-anchor" href="#assignment-operators" aria-label="Permalink to &quot;Assignment operators&quot;">​</a></h2><div class="language-scala vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">scala</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> foo_=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">x</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) { ... }</span></span></code></pre></div><h2 id="placeholder-syntax" tabindex="-1">Placeholder syntax <a class="header-anchor" href="#placeholder-syntax" aria-label="Permalink to &quot;Placeholder syntax&quot;">​</a></h2><div class="language-scala vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">scala</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">List</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) map (_ </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span></code></pre></div><h2 id="partially-applied-functions" tabindex="-1">Partially applied functions <a class="header-anchor" href="#partially-applied-functions" aria-label="Permalink to &quot;Partially applied functions&quot;">​</a></h2><div class="language-scala vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">scala</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">List</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) foreach println _</span></span></code></pre></div><h2 id="converting-call-by-name-parameters-to-functions" tabindex="-1">Converting call-by-name parameters to functions <a class="header-anchor" href="#converting-call-by-name-parameters-to-functions" aria-label="Permalink to &quot;Converting call-by-name parameters to functions&quot;">​</a></h2><div class="language-scala vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">scala</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> toFunction</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">callByName</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> Int</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> Int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> callByName _</span></span></code></pre></div><h2 id="对变量进行默认初始化" tabindex="-1">对变量进行默认初始化 <a class="header-anchor" href="#对变量进行默认初始化" aria-label="Permalink to &quot;对变量进行默认初始化&quot;">​</a></h2><div class="language-scala vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">scala</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">var</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;"> i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">Int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">_</span></span></code></pre></div><h2 id="用于将方法转换成函数" tabindex="-1">用于将方法转换成函数 <a class="header-anchor" href="#用于将方法转换成函数" aria-label="Permalink to &quot;用于将方法转换成函数&quot;">​</a></h2><p>比如<code>val f=sqrt _</code>，以后直接调用<code>f(250)</code>就能求平方根了</p><div class="language-scala vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">scala</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> Test</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> fun</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    // some code</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  val</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;"> funLike</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> fun _</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><h2 id="访问tuple变量的某个元素时通过索引-n来取得第n个元素" tabindex="-1">访问tuple变量的某个元素时通过索引<code>_n</code>来取得第n个元素 <a class="header-anchor" href="#访问tuple变量的某个元素时通过索引-n来取得第n个元素" aria-label="Permalink to &quot;访问tuple变量的某个元素时通过索引\`_n\`来取得第n个元素&quot;">​</a></h2><hr><p>参考:</p><ul><li><a href="https://stackoverflow.com/questions/8000903/what-are-all-the-uses-of-an-underscore-in-scala" target="_blank" rel="noreferrer">https://stackoverflow.com/questions/8000903/what-are-all-the-uses-of-an-underscore-in-scala</a></li><li><a href="https://www.zhihu.com/question/21622725/answer/21588672" target="_blank" rel="noreferrer">https://www.zhihu.com/question/21622725/answer/21588672</a></li><li><a href="http://ananthakumaran.in/2010/03/29/scala-underscore-magic.html" target="_blank" rel="noreferrer">http://ananthakumaran.in/2010/03/29/scala-underscore-magic.html</a></li></ul><hr><div style="text-align:center;color:#00000099;font-size:14px;">END</div>`,41)]))}const c=i(h,[["render",n]]);export{g as __pageData,c as default};
