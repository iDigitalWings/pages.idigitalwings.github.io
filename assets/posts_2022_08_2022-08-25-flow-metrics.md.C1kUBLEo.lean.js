import{_ as o,a as l,af as r,o as p}from"./chunks/framework.C87LdZyP.js";const e="/assets/Flow-Velocity.CV_5cBI7.png",a="/assets/Flow-Time.Bca5nU93.png",s="/assets/Flow-Efficiency.D2BcY2ER.png",i="/assets/Flow-Load.DnsOY2Fh.png",n="/assets/Flow-Distribution.BX7qbhPP.png",w=JSON.parse('{"title":"研发效能：价值流的流量指标","description":"","frontmatter":{"title":"研发效能：价值流的流量指标","date":"2022-08-25T00:00:00.000Z","tags":["r&d","flow-framework"],"category":["其它"]},"headers":[],"relativePath":"posts/2022/08/2022-08-25-flow-metrics.md","filePath":"posts/2022/08/2022-08-25-flow-metrics.md","lastUpdated":1718173059000}'),g={name:"posts/2022/08/2022-08-25-flow-metrics.md"};function c(u,t,h,d,b,m){return p(),l("div",null,t[0]||(t[0]=[r('<blockquote><p>“在没有流量指标的情况下管理 IT ......就像在没有衡量电力和计算机能力成本的机制的情况下管理云基础设施一样。”</p></blockquote><blockquote><p>— Mik Kersten，《从项目到产品》</p></blockquote><p>研发过程在大多数企业内还是一个黑盒，是神秘的。 缺乏端到端的可见性，哪里有拥堵、哪里有浪费、哪里有风险，</p><p>管理者可能不清楚研发各个阶段的真实情况，比如产品、设计、开发、测试、运维的真正痛点， 容易被埋没在无穷无尽的需求和工作当中，时间久之后，大家也许就习以为常了。</p><p>产品研发是为了让企业进行数字化，而软件研发本身也应该实现数字化。 即从物理世界中，采集数据、提炼分析，发现真正有用并且不容易发现或者容易被忽略的知识，并最终提升生产力。</p><p>多数企业对待研发的管理仍然才去传统的人力管理思维，</p><ul><li>过度关注工作时长（工时）；</li><li>要求工作活动的标准化和整齐划一；</li><li>过度关注局部优化（某个环节自动化、某个DevOps工具的使用）；</li><li>而没有进行全局优化（交付效率和交付质量）。</li></ul><p>由此便引出了研发效能洞察体系的建设，包含：</p><ul><li>研发技术设施建设；</li><li>度量指标体系的设计；</li><li>洞察分析模型的构建；</li><li>洞察工具产品的实现；</li><li>基于数据驱动和实验思维的运营。</li></ul><h2 id="测量端到端流量" tabindex="-1">测量端到端流量 <a class="header-anchor" href="#测量端到端流量" aria-label="Permalink to &quot;测量端到端流量&quot;">​</a></h2><p>Flow Framework 的核心前提是需要衡量业务价值的端到端流动以及它产生的结果。Flow Metrics 衡量通过软件价值流产生业务价值所涉及的<em>所有活动的业务价值流。</em></p><p>Flow Metrics 与业务成果的相关性决定了您的投资成果，并突出显示过慢而无法实现您所寻求的市场响应能力和竞争力的流程和反馈周期。</p><p>但是，如果我们只衡量流程的一个子集，例如开发人员完成敏捷“用户故事”所需的时间或部署代码更改所需的时间，我们只能优化价值流的一部分。</p><h2 id="流量指标" tabindex="-1">流量指标 <a class="header-anchor" href="#流量指标" aria-label="Permalink to &quot;流量指标&quot;">​</a></h2><p>Flow Framework® 中定义的 Flow Metrics 清楚地表明价值流是否足以支持目标业务成果（如收入、成本、客户满意度和员工敬业度）。</p><p>Flow Metrics 通过您的客户（无论是内部客户还是外部客户）来衡量软件产品的业务价值交付率。</p><p>Flow Framework® 定义了四个用于衡量产品价值流的 Flow Metrics：</p><h2 id="flow-velocity-流动速率" tabindex="-1">Flow Velocity 流动速率 <a class="header-anchor" href="#flow-velocity-流动速率" aria-label="Permalink to &quot;Flow Velocity 流动速率&quot;">​</a></h2><p><strong>Flow Velocity</strong>衡量价值交付是否正在加速。流动速度是在特定时间段内完成的流动项目的数量。</p><p><img src="'+e+'" alt="流速"></p><ul><li><strong>指标定义：</strong></li></ul><p>在给定时间内完成的流动项（如需求、缺陷或其他各种类型的工作）的数量，流动速率可用于衡量生产力。</p><ul><li><strong>如何使用：</strong></li></ul><p>跟踪流动速率，以有效评估并预测团队可以交付多少工作。当流动速率过低时，需要及时调查原因，可能会存在资源紧缺、架构或基础设施等问题，也有可能存在大量等待导致的流动停滞。</p><ul><li><strong>指标解读</strong></li></ul><p><strong>数值升高</strong> ：</p><p>一般表明价值交付正在加速</p><p><strong>数值降低，且流动时间很长</strong> ：</p><p>一般表明交付存在阻塞、依赖，或在制品过多导致的工作切换浪费</p><ul><li><strong>常见问题</strong></li></ul><p><strong>流动速率与敏捷的速率概念有什么区别？</strong></p><p>流动速率从敏捷的速率概念改编而来，后者表明了团队在一个时间段内（例如，两周的迭代）交付了多少个工作单元（例如，故事点数）。但流动速率计算的是在给定时间内完成的流动项的数量，假如一个版本完成了 10 个需求和 5 个缺陷，则该版本的流动速率为 15。所以，这里的关键区别是，流动速率更简单，它不依赖于对工作量大小、范围或每个流动项优先级的估算。</p><ul><li><strong>流动速率为什么按需求个数来算，而不是按故事点来算？</strong></li></ul><p>诚然，流动项的大小可能会大相径庭，这会让人们倾向于用“故事点”或“T 恤”进行估算。</p><p>但是，使用故事点的估算会容易引发规模冲动（人为的多估算一些），反而可能会更不准确，也经常因此出现业务 / 产品与研发团队之间对数字的博弈。</p><p>所以，流动速率更倾向于用流动项的数量（而非故事点）来进行估算，根据大数定律（如果有足够的试验或实例，事件发生的可能性就是均等的），如果有足够多的流动项，那么在一个时间段内所有流动项都很大，而另一个时间段内的所有流动项都很小的情况，应该很少出现。</p><p>另外，对于工作项的合理拆分（如把需求分解为业务需求 - 产品需求 - 技术任务），一定程度上也会降低需求颗粒度的差异对指标准确性带来的影响。如果实在不放心，我们在度量流动速率指标的同时，也可以将需求规模（如开发 + 测试的工作量）作为辅助参考指标一起进行观测。</p><p>还需要注意的是，流动速率的度量更适合于跟踪一个价值流内的生产力和交付趋势，而非跨价值流进行比较。</p><h3 id="flow-time-流动时间" tabindex="-1">Flow Time 流动时间 <a class="header-anchor" href="#flow-time-流动时间" aria-label="Permalink to &quot;Flow Time 流动时间&quot;">​</a></h3><p><strong>Flow Time</strong>衡量上市时间。流程时间测量给定流程项目从“工作开始”到“工作完成”所经过的时间，包括活动时间和等待时间。</p><p><img src="'+a+'" alt="流动时间"></p><ul><li><strong>指标定义：</strong></li></ul><p>从流动项被接受并进入价值流，一直到其完成所花费的时间，包括了工作处于活跃状态的时间和等待状态的时间。</p><ul><li><strong>如何使用：</strong></li></ul><p>跟踪流动时间，通过概率思维让交付时间变得更可预测，并相对准确地回答一个核心问题：“工作到底什么时候可以完成?”。根据研究，交付周期类指标一般符合韦伯分布（Weibull Distribution），所以建议使用 85% 分位数（而非平均值）来对流动时间进行度量和预测。</p><ul><li><strong>指标解读</strong></li></ul><p><strong>数值很低</strong> ：</p><p>我们当然希望流动时间不断缩短。但是看到这个数值很低的时候，也别高兴的太早了，要多看看工作有没有被准确跟踪。比如我们在实际工作中，经常出现“后补”需求的情况，比如开发完成到了要上线的时候，因为上线单要关联一个需求单，这个时候再到看板中补上一个需求，然后从第一个阶段直接拖动到最后一个阶段。类似的情况会导致指标的失真，而指标的准确性是度量的根基，我们需要额外关注。在实践过程中，我们经常在观测主指标（如流动时间）的同时，增加一个关于数据健康度的辅助参考指标（如异常数据的比例），以确保主指标的置信度。</p><p><strong>数值很高，且流动速率很低</strong> ：</p><p>有可能是因为在制品过多导致的工作切换，或者工作被阻塞，产生了大量的等待时间，让流动时间被拖长。我们可以结合下面的流动负载和流动效率一起进行更细化的分析。</p><ul><li><strong>常见问题</strong></li></ul><p><strong>前置时间、周期时间、流动时间有什么区别？</strong></p><p><img src="https://static001.geekbang.org/wechat/images/d8/d8a7bba648af6ceed13c0a3d78b1d77b.png" alt=""></p><p>图 6：流动时间 vs 前置时间</p><p>在精益生产中，有两个关键指标用于流程改进，分别是“前置时间”和“周期时间”。前置时间侧重于度量整个流程的时间（工作从“新建”状态开始到“完成”状态之间的时间差），而周期时间则侧重于完成过程中某个步骤所花费的时间（如“开发”阶段的周期时间）。前置时间可以告诉我们端到端流程运行所花费的时间，周期时间可以帮助识别瓶颈（周期时间最长的步骤通常就是瓶颈所在）。</p><p>但为了避免混淆，流框架使用了名为“流动时间”的新指标。流动时间始于工作被显式接受（例如新需求评审通过并进入排期）或隐式接受（例如自动升级的事件）的时刻，这与前置时间从工作被提出就开始计时完全不同。流动时间可以作为对产品研发团队交付效率的观测指标，即从确定要做某项工作到完成所需的时间；而前置时间更多是从需求方视角进行观测，即从需求提出到完成所需的时间。</p><p><strong>为什么没有采用 DevOps 社区中常用的变更前置时间？</strong></p><p>每年的 DevOps 全球调查报告和 DevOps 社区中，经常使用名为“变更前置时间”的度量指标，英文是 Lead time for changes，即代码提交到部署的前置时间。虽然我们也经常采用这个指标进行效能度量和分析，但它并没有被流框架所采纳。</p><p><img src="https://static001.geekbang.org/wechat/images/7d/7d807eb6e6a45e66d4cb979f2e0822ec.jpeg" alt=""></p><p>图 7：变更前置时间变更</p><p>前置时间更多的是以开发人员为中心的视角，而不是以客户为中心或以价值流为中心的视角进行设计的，所以它并不足以封装业务价值，虽然是团队工程能力的重要指示器之一，但本质上是更偏局部、更偏过程性的指标。而流动时间的视野更广，观测的是工作项在软件交付管道中端到端的流动，是更偏全局、更偏结果性的指标。</p><p><strong>流动时间是按自然日来算还是工作日来算？</strong></p><p>上文已经讲到，流动时间是一个以客户为中心设计的指标，因此它是以“自然”时间而非“工作日”来进行计算和度量的。</p><h3 id="flow-efficiency-流动效率" tabindex="-1">Flow Efficiency 流动效率 <a class="header-anchor" href="#flow-efficiency-流动效率" aria-label="Permalink to &quot;Flow Efficiency 流动效率&quot;">​</a></h3><p><strong>流动效率</strong>识别价值流中的浪费。流动效率是活动时间占总流动时间的比率。</p><p><img src="'+s+'" alt="流动效率"></p><ul><li><strong>指标定义：</strong></li></ul><p>流动项处于活跃工作状态的时间占总消耗时间的比例。</p><ul><li><strong>如何使用：</strong></li></ul><p>度量流动效率，可以帮助团队从瓶颈中可视化等待时间，以便找出导致流动停滞的问题。流动效率越低，工作停滞在等待状态的时间就越长。此指标可以与其他流动指标结合使用，重点聚焦于减少等待时间。</p><ul><li><strong>指标解读</strong></li></ul><p><strong>数值较高</strong> ：</p><p>流动效率越高，一般表明交间，它涵盖了开发上下游的等待时间。如果开发团队在等待用户界面设计，而设计人员被分配到了其他工作，则流动效率会下降，因为相关需求处于等待状态，原因是这两个团队都没有处理它们。因此，可以通过追踪流动效率降低的原因来识别价值流的瓶颈。付过程越顺畅、越没有阻塞。但也要警惕指标过高的情况（例如超过 40%），这可能意味着状态映射错误或不准确，比如把实际上是等待的阶段映射成活跃状态了，这样就会导致这个指标虚高。</p><p><strong>数值较低：</strong></p><p>一般表明存在瓶颈、低效的流程、过多的依赖关系、资源匮乏等，这些问题会导致流动负载的增加，更长的队列，以及更长的流动时间。</p><ul><li><strong>常见问题</strong></li></ul><p><strong>流动效率基于流动时间还是周期时间来计算？</strong></p><p>流动效率是基于流动时间而不是周期流动效率是基于流动时间而不是周期时间，它涵盖了开发上下游的等待时间。如果开发团队在等待用户界面设计，而设计人员被分配到了其他工作，则流动效率会下降，因为相关需求处于等待状态，原因是这两个团队都没有处理它们。因此，可以通过追踪流动效率降低的原因来识别价值流的瓶颈。</p><p><strong>流动效率的正常值应该多少合适？</strong></p><p>我在行业中经常看到一些统计数据，很多企业的实际流动效率要比想象中低很多，有些采用传统研发模式、规模较大、流程较复杂的团队，流动效率甚至不到 10%。在能进行准确统计的情况下（指标没有虚高），对很多企业而言，如果流动效率达到 30-40%，就已经算是不错的水平了。</p><h3 id="flow-load-流动负载" tabindex="-1">Flow Load 流动负载 <a class="header-anchor" href="#flow-load-流动负载" aria-label="Permalink to &quot;Flow Load 流动负载&quot;">​</a></h3><p><strong>Flow Load</strong>监控价值流的过度利用和利用不足，这可能导致生产力下降。流量负载测量特定价值流中当前正在进行（活动或等待）的流量项目的数量。</p><p><img src="'+i+'" alt="流量负载"></p><ul><li><strong>指标定义：</strong></li></ul><p>价值流中在制品的数量（已开始、未完成，即正在进行中的工作），包含了状态为活跃或等待的流动项的数量。</p><ul><li><strong>如何使用：</strong></li></ul><p>流动负载是一个先导性指标，可以用来发现在制品过多对速度类指标和团队满意度的影响。我们可以通过不断调整和实验，找到产品价值流最优的流动负载，此时流动速率较高，并且流动时间较短。流动负载可以让产研团队与业务需求方更好地进行协作，在需求与产能之间寻求平衡。</p><ul><li><strong>指标解读</strong></li></ul><p><strong>数值较低</strong> ：</p><p>可能只有少量的工作正在完成，可能出现了闲置的情况。</p><p><strong>数值较高</strong> ：</p><p>过多的流动负载（在制品）很可能会导致交付延迟、成本增加、质量下降、员工抱怨，长期超过团队产能安排工作将导致职业倦怠。还可以进一步分解为以下两种情况。</p><p><strong>数值较高</strong> ， <strong>并且流动时间很短</strong> ：</p><p>可能有很多的工作被忽略或搁置了，即存在很多“僵尸需求”，一直停留在交付管道中却又因为优先级一直没有时间处理。这时需要清理在制品，评估真正需要完成的工作。如果真的重要就让工作继续及时推进，如果不重要就干脆把工作移出交付管道。</p><p><strong>数值较高，并且流动时间很长</strong> ：</p><p>在制品过多导致的工作切换可能是罪魁祸首，过高的流动负载直接影响了交付效率。这时可以采用精益实践，限制在制品并采用拉动模型（如采用精益看板的方法）。可能还要为资源不足的角色 / 岗位增加容量，或提升自动化的水平。</p><p><img src="https://static001.geekbang.org/wechat/images/3d/3d409dd937a964cd8247c88c52421cd2.png" alt=""></p><p>图 9：基于利特尔法则的流动时间预测</p><p>特别需要注意的是，根据利特尔法则，流动时间 = 流动负载 / 流动速率，当流动负载的当前值已经高于（流动速率 * 流动时间）的预测值，则预示未来会有工作无法如期完成。这时就已经发现了未来交付计划及周期的风险，需要对流动时间的预测进行修正，进而实现更准确的承诺 / 决策，<strong>这正是先导性指标的价值所在。</strong></p><ul><li><strong>常见问题</strong></li></ul><p><strong>流动负载应该从何处开始计算？尚未开始的工作要计算么？</strong></p><p>如果将价值流想象为一条管道，其中所有尚未开始或已经完成的流动项都在管道的两端，而流动负载就是管道内正在进行的工作单元数，包括所有部分完成的流动项。当流动负载过大，由于队列时间过长，价值流的过度利用会极大地影响交付速度。</p><p><strong>流动负载有没有绝对数字来说明好坏？</strong></p><p>业界很难有一个绝对的数字来说明流动负载应该是多少，不同业务类型、处于不同发展阶段的团队，对流动负载的承受能力都有很大差别。所以，建议采用实验思维，关注流动负载的高低，导致了流动速率和流动时间怎样的变化，从而找到一个适当的平衡点。追求过高的资源饱和度对产品开发而言并没有任何好处。百分之百资源利用率对于制造业和软件交付都存在同样问题，都会对流动速率和流动时间产生很大的负面影响。</p><p><strong>流动负载如何进行有效下钻找到具体问题？</strong></p><p>可以通过停滞项工作报告，展示在交付管道中有哪些未完成的工作，以及它们在当前阶段已经停滞了多久的时间。</p><p><img src="https://static001.geekbang.org/wechat/images/18/18dc6eb2086e91c5abaf2f32b476ebfe.png" alt=""></p><p>图 10：停滞项工作报告</p><p>通过查看系统中指定天数（如 10 天）没有进展的工作，可以发现系统中的问题和瓶颈，一方面找到并消灭较低价值的 “僵尸需求”，减少被搁置的工作；另一方面识别出被阻塞的工作，通过当前阶段及上下游的协同优化，促进它们尽快恢复流动。关于研发过程中的常见瓶颈，我会在下一小节中进行讨论。</p><h3 id="flow-distribution-流量分布" tabindex="-1">Flow Distribution 流量分布 <a class="header-anchor" href="#flow-distribution-流量分布" aria-label="Permalink to &quot;Flow Distribution 流量分布&quot;">​</a></h3><p>除了四个流量指标之外，<strong>流量分布还</strong>说明了报告期内流量项目之间的权衡。流量分布测量四个流量项目——特征、缺陷、风险和债务——在您的价值流交付中的分布。</p><p><img src="'+n+'" alt="流量分配"></p><p>价值流应该针对其生命周期阶段的适当分布，例如，处于创新和成长阶段的产品需要高特征分布，比其他流程项目更倾向于新的业务能力。</p><ul><li><strong>指标定义：</strong></li></ul><p>通过显示在给定时间内完成的流动项（特性、缺陷、风险和债务）的比例，来衡量在不同价值创造类别中的实际投入。</p><ul><li><strong>如何使用：</strong></li></ul><p>利用流动分布来为价值流中不同类型的工作带来可见性，这样就可以从优先级的角度看到当前投入的重点在哪里。如果统计出来的流动分布（相当于资源的分配）与业务优先级不一致，则需要进行调整。流动分布通过使资源的分配可见，推动产研团队与业务需求方进行各类工作优先级的权衡，而这里的权衡是一种零和游戏。另外，流动分布随着时间的推移，根据产品所处的阶段，需要进行持续调整和演化。</p><ul><li><strong>指标解读</strong></li></ul><p><strong>缺陷占比很高</strong> ：</p><p>一般表明缺陷和未计划的工作降低了需求交付的能力，对于技术债务的投资可能需要加强。</p><p><strong>缺少技术债务和风险的占比</strong> ：</p><p>相关工作被忽视或延后，虽然短期看起来交付的需求多了，但未来可能会出现债务危机。</p><ul><li><strong>常见问题</strong></li></ul><p><strong>每条价值流的流动分布应该如何设置？</strong></p><p>流动分布会随着时间的推移，不断发生演化。新产品的价值流通常被调整为最大化需求交付的比例。一旦该产品上市并且有稳定用户，就有必要构建额外的能力来处理可能出现的支持工单和故障，并且还要安排一些工作来减少在随后发布周期中不断积累的技术债务。</p><p>以上分别展开介绍了五大流动指标的定义和解读方法，相信大家已经对如何使用它们有一些感觉了。但还有一点需要注意的是，这些指标还是停留在软件交付层面上的，我们还应该将研发工作映射到业务结果。将研发效能度量指标与业务结果关联在一起，可以使用真实的数据来确定相关性，并不断地学习和调整。</p><p>常见的业务结果指标包括价值（如收入、年度合同价值、业务活跃用户数等）、成本（如人力成本、运营和基础设施成本等）、满意度（如净推荐值、员工净推荐值）等，考虑到篇幅有限，关于如何将五大流动指标映射到业务指标的方法及案例，本文暂不展开，后面有机会再介绍。</p><h3 id="flow-item-流动项" tabindex="-1">Flow Item 流动项 <a class="header-anchor" href="#flow-item-流动项" aria-label="Permalink to &quot;Flow Item 流动项&quot;">​</a></h3><p><strong>流程项是利益相关者通过产品价值流提取的业务价值单元。</strong></p><h2 id="使用流项目衡量价值交付" tabindex="-1">使用流项目衡量价值交付 <a class="header-anchor" href="#使用流项目衡量价值交付" aria-label="Permalink to &quot;使用流项目衡量价值交付&quot;">​</a></h2><p>要获取价值，客户必须能够看到该价值并愿意为其交换一些经济单位（时间或金钱）。四个流程项构成了利益相关者通过产品价值流拉动的一个业务价值单元，它们是：特性、缺陷、风险和债务。</p><p>在价值流中自然跨越许多人和团队的工作可以被描述为适用于这些项目之一。在软件价值流中流动的所有工作都以一个——而且只有一个——流动项为特征。并且对这些流项中的每一个以及所有这些流项都进行了度量。</p><h2 id="敏捷和-devops-转型需要流量指标" tabindex="-1">敏捷和 DevOps 转型需要流量指标 <a class="header-anchor" href="#敏捷和-devops-转型需要流量指标" aria-label="Permalink to &quot;敏捷和 DevOps 转型需要流量指标&quot;">​</a></h2><p>公司转型、现代化和持续改进软件交付的方法总是涉及多种方法（如敏捷）、运动（如 DevOps）、实践（如精益）和扩展框架（如 SAFe、LeSS 和 Nexus）。</p><p>流度量提供以业务和客户为中心的视图，以了解贯穿整个软件交付过程的内容，无论您使用何种方法。它们提供了敏捷和 DevOps 转换对业务成果影响的简单、高级视图。</p><p>Scaled Agile Framework (SAFe®) 描述了用于衡量业务敏捷性的三个衡量领域，以及组织在实现产品组合、大型解决方案、ART 以及敏捷团队的业务和技术目标方面的进展情况。这三个领域是成果、能力和流程。</p><p>作为基于流的系统, <a href="https://www.scaledagileframework.com/metrics/" target="_blank" rel="noreferrer">SAFe® 建议</a>使用由 Mik Kersten 创建的 Flow Framework 中的五个指标，以及称为 Flow Predictability 的第六个指标。</p><h2 id="在-okr-中加入流指标" tabindex="-1">在 OKR 中加入流指标 <a class="header-anchor" href="#在-okr-中加入流指标" aria-label="Permalink to &quot;在 OKR 中加入流指标&quot;">​</a></h2><p>许多组织目前使用 OKR（目标和关键结果）来推动预期的业务成果。然而，虽然为业务结果设置 KR 非常简单，但事实证明，将它们级联到软件交付团队要困难得多。业务 KR 的意义不足以帮助技术团队和个人优先考虑和改进他们的日常工作。这就是 Flow Metrics 可以提供帮助的地方。</p><p>Flow Metrics 可以用作衡量端到端价值交付的 KR，与实际容量相关联。流程的改进将使组织能够实现目标业务成果，因此专注于加速流程的价值流 OKR 将激励团队将资源应用于他们的瓶颈。</p><p>与衡量结果的业务 KR 不同——因此是滞后的，Flow Metrics 跟踪价值流的改进——因此是领先指标。</p><h2 id="研发过程中的常见瓶颈及解决思路" tabindex="-1">研发过程中的常见瓶颈及解决思路 <a class="header-anchor" href="#研发过程中的常见瓶颈及解决思路" aria-label="Permalink to &quot;研发过程中的常见瓶颈及解决思路&quot;">​</a></h2><p>通过对五大流动指标，我们可以对软件交付过程进行有效的度量和分析，并透视出其中潜在的问题和瓶颈。下面，我们就简单讨论一下研发过程中的常见瓶颈及其解决思路。</p><h3 id="_1-稀缺的专家或资源-导致流动受阻" tabindex="-1">1. 稀缺的专家或资源，导致流动受阻 <a class="header-anchor" href="#_1-稀缺的专家或资源-导致流动受阻" aria-label="Permalink to &quot;1. 稀缺的专家或资源，导致流动受阻&quot;">​</a></h3><p><img src="https://static001.geekbang.org/wechat/images/9c/9c000a92944e42160bb13debb8035812.png" alt=""></p><p>图 13：瓶颈导致流动受阻</p><ul><li><strong>现象：</strong></li></ul><p>某个活跃状态阶段（如 “开发”）存在瓶颈，在此之前的等待状态阶段（如 “待开发”），出现大量堆积工作（在制品数高、周期长）。</p><ul><li><strong>解决思路</strong> ：</li></ul><p>在存在瓶颈的活跃状态阶段，增加有技能的资源（但临时加人可能会导致额外的负担，反而降低生产力）；对团队成员进行专业技能培训，或是跨专业的横向培训；通过自动化、自服务、流程优化或规范简化解决。</p><h3 id="_2-缺乏自动化或工程能力落后-导致效率低下" tabindex="-1">2. 缺乏自动化或工程能力落后，导致效率低下 <a class="header-anchor" href="#_2-缺乏自动化或工程能力落后-导致效率低下" aria-label="Permalink to &quot;2. 缺乏自动化或工程能力落后，导致效率低下&quot;">​</a></h3><p><img src="https://static001.geekbang.org/wechat/images/68/68434e3e9b884fcf0618c0df01f9db4a.png" alt=""></p><p>图 13：缺乏自动化导致的效率低下</p><ul><li><strong>现象：</strong></li></ul><p>人工流程或者主要由人工完成的交互，成为流动的瓶颈；比如代码需要在预发环境测试，但测试资源紧缺，且资源申请不是自服务的，有大量需求堆积在&quot;等待测试&quot;阶段。</p><ul><li><strong>解决思路：</strong></li></ul><p>实现自动化流程，引入自服务机制，提升工程能力；通过自动化手段提升吞吐量，不依赖于资源或专家就绪，从而提升效率；不依赖于某个中心化的团队按优先级完成工作，如发布审批、环境申请等。</p><h3 id="_3-繁琐的流程-导致等待和长耗时" tabindex="-1">3. 繁琐的流程，导致等待和长耗时 <a class="header-anchor" href="#_3-繁琐的流程-导致等待和长耗时" aria-label="Permalink to &quot;3. 繁琐的流程，导致等待和长耗时&quot;">​</a></h3><p><img src="https://static001.geekbang.org/wechat/images/97/97db067de16748c7a6bdd410b9b92c7e.png" alt=""></p><p>图 14：繁琐的流程导致等待</p><ul><li><strong>现象：</strong></li></ul><p>变更审批委员会（如两周举办一次审批会议，无论前面交付多快都要等待）、安全审批、资金审批等；工作处于等待状态，如“等待审批”，处于这些状态的制品数很多，在选定时间范围到达高水位线，而后周期性下降。</p><ul><li><strong>解决思路：</strong></li></ul><p>以高水位线（最大制品数量）为线索，找到瓶颈点问题所在，即使当前数值已经回落。自动化变更审批流程，识别出高风险变更的标准，哪些是必须要走审批，哪些是低风险变更可以自动化验证、直接部署。</p><h3 id="_4-过多的依赖-导致工作流动停" tabindex="-1">4. 过多的依赖，导致工作流动停 <a class="header-anchor" href="#_4-过多的依赖-导致工作流动停" aria-label="Permalink to &quot;4. 过多的依赖，导致工作流动停&quot;">​</a></h3><p><img src="https://static001.geekbang.org/wechat/images/e3/e369fc3b07de5df5c03930e8fb0352d8.png" alt=""></p><p>图 15：过多的依赖导致流动停滞</p><ul><li><strong>现象：</strong> 等待某事或者某人完成后，才能继续工作。</li></ul><p><strong>架构依赖（软件或硬件）</strong> ：一个部分的变更造成另一个部分的功能被破坏（例如 DB 变更导致对方的功能调用无法工作）</p><p><strong>专业知识或专家依赖</strong> ：需要特定专业知识的专家（如业务专家、安全专家）的输入，才能继续完成既定工作</p><p><strong>活动依赖或事件依赖</strong> ：需要等待其他的活动完成，否则流程无法进行。如甘特图里的几个前置任务之间的依赖关系</p><ul><li><strong>解决思路：</strong></li></ul><p><img src="https://static001.geekbang.org/infoq/6e/6e74076cf43242347bb3f3d5311863a2.jpeg" alt=""></p><p>图 16：三种依赖及其解决思路</p><p>对依赖建模（如使用依赖矩阵），与依赖方沟通，探索解决方案；长期方案：要花时间去除依赖，而不仅仅是管理它们。架构层面：找到系统的断裂面，进行架构解耦；组织层面：建立跨职能团队，进行组织解耦。活动层面：提升自服务和自主性，进行活动解耦。</p><p>最后要说的是，对于研发过程中的瓶颈，我们要通过系统思考，以流动指标为牵引观测整个价值流，以整体的方式思考约束。找到瓶颈并明确解决思路后，在实施改进时，要注意一次只解决一个问题，而不能贪多、追求大而全，这样才能独立观察每项措施带来的效果和影响。</p><p><img src="https://static001.geekbang.org/wechat/images/4e/4e76480001b384e0f84f499159a8d6c8.jpeg" alt=""></p><p>图 17：基于数据驱动和实验思维，一次只解决一个问题</p><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p><strong>本文核心观点如下：</strong></p><ol><li>数字化时代，软件研发本身也要数字化。</li><li>研发的数字化，可以从建设有效的研发效能洞察体系开始。</li><li>基于精益思想，流动指标度量的就是价值的流动，指征了一个组织交付价值过程中的效率水平和健康程度。</li><li>流动指标共有五个：流动速率、流动时间、流动负载、流动效率和流动分布。</li><li>综合利用好这五个指标，我们就可以讲述一个关于软件研发价值流完整的故事，回答关于研发交付效率如何的本质问题。</li><li>研发过程中的常见瓶颈包括稀缺的专家或资源、缺乏自动化或工程能力落后、繁琐的流程、过多的依赖等，这些瓶颈都会导致流动受阻、让工作陷入停滞，导致等待和长耗时。</li><li>对于研发过程中的瓶颈，我们要通过系统思考，以流动指标为牵引观测整个价值流，以整体的方式思考约束。</li><li>实施改进时，一次只解决一个问题，这样可以独立观察每项措施带来的效果和影响。</li></ol><hr><ul><li><a href="https://flowframework.org/flow-metrics/" target="_blank" rel="noreferrer">Understanding the Flow Metrics</a></li><li><a href="https://www.infoq.cn/article/1rk7PMXjmuo1qCqgu6e7" target="_blank" rel="noreferrer">打开软件研发的黑盒子：一文读懂研发效能洞察的五大流动指标</a></li></ul>',183)]))}const k=o(g,[["render",c]]);export{w as __pageData,k as default};
