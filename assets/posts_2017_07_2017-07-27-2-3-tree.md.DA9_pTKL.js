import{_ as e,a,af as s,o as r}from"./chunks/framework.C87LdZyP.js";const i="/assets/23tree.xs_uBn-6.png",o="/assets/search.DdMf3XV0.gif",l="/assets/insert1.BVPyYiXs.png",p="/assets/insert2.BaBctzJK.png",n="/assets/insert2-1.CnLb149T.png",c="/assets/insert2.DSmrt6GT.gif",x=JSON.parse('{"title":"2-3 Tree","description":"","frontmatter":{"title":"2-3 Tree","date":"2017-07-27T00:00:00.000Z","tags":["tree","algorithm"],"category":["算法"]},"headers":[],"relativePath":"posts/2017/07/2017-07-27-2-3-tree.md","filePath":"posts/2017/07/2017-07-27-2-3-tree.md","lastUpdated":1718193786000}'),m={name:"posts/2017/07/2017-07-27-2-3-tree.md"};function d(h,t,_,f,g,u){return r(),a("div",null,t[0]||(t[0]=[s('<h2 id="定义" tabindex="-1">定义 <a class="header-anchor" href="#定义" aria-label="Permalink to &quot;定义&quot;">​</a></h2><p>2-3 树是一种特殊的二叉树,允许每个节点上有1个或两个key,2个或3个子节点:</p><ul><li>2节点：1个key，2个孩子</li><li>3节点，2个key，3个孩子</li></ul><p><img src="'+i+'" alt=""></p><h2 id="查找" tabindex="-1">查找 <a class="header-anchor" href="#查找" aria-label="Permalink to &quot;查找&quot;">​</a></h2><p>查找类似二叉树.</p><p><img src="'+o+'" alt=""></p><h2 id="插入" tabindex="-1">插入 <a class="header-anchor" href="#插入" aria-label="Permalink to &quot;插入&quot;">​</a></h2><p>如果插入的节点是一个2-节点：直接把2节点变成3节点</p><p><img src="'+l+'" alt=""></p><p>如果插入的是一个3-节点：</p><ul><li>把key加入3-节点变成一个临时4-节点</li><li>把4节点的中间key上移到父亲节点</li><li>重复操作。</li><li>如果到达了root，形成了一个临时4节点，则root节点分裂成3个节点，树高增加1层</li></ul><p><img src="'+p+'" alt=""></p><p><img src="'+n+'" alt=""></p><p>动画如下</p><p><img src="'+c+'" alt=""></p><hr><p>Links:</p><ul><li><a href="http://www.2cto.com/kf/201605/512253.html" target="_blank" rel="noreferrer">http://www.2cto.com/kf/201605/512253.html</a></li></ul><hr><div style="text-align:center;color:#00000099;font-size:14px;">END</div>',21)]))}const b=e(m,[["render",d]]);export{x as __pageData,b as default};
