import{_ as i,a,af as n,o as p}from"./chunks/framework.C87LdZyP.js";const c=JSON.parse('{"title":"Nginx static compress","description":"","frontmatter":{"title":"Nginx static compress","date":"2022-07-10T00:00:00.000Z","tags":["nginx"],"category":["架构"]},"headers":[],"relativePath":"posts/2022/07/2022-07-10-nginx-static-compress.md","filePath":"posts/2022/07/2022-07-10-nginx-static-compress.md","lastUpdated":1718173059000}'),t={name:"posts/2022/07/2022-07-10-nginx-static-compress.md"};function l(h,s,e,k,d,g){return p(),a("div",null,s[0]||(s[0]=[n(`<h2 id="nginx-动态压缩" tabindex="-1">Nginx 动态压缩 <a class="header-anchor" href="#nginx-动态压缩" aria-label="Permalink to &quot;Nginx 动态压缩&quot;">​</a></h2><p>Nginx 动态压缩是指客户端在访问资源的时候，Nginx 先进行压缩，然后传递给客户端，达到提升访问速度的目的。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>动态压缩的效率依赖Nginx所在服务器的CPU新能。</p></div><p>Nginx 配置：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">gzip</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">  on</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;  </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"># 开启 gzip</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">gzip_min_length</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> 2k</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;# 超过 2kb 进行压缩</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">gzip_disable</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> msie6</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"># ie6 不适用 gzip</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">gzip_types</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> text/css</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> application/javascript</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> text/javascript</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> image/jpeg</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> image/png</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> image/gif</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"># 需要处理的文件</span></span></code></pre></div><p>默认Nginx只对 MINE 类型为 text/html 的数据进行压缩。可通过配置 <code>gzip_types</code> 来设置支持压缩的类型。</p><h2 id="静态压缩" tabindex="-1">静态压缩 <a class="header-anchor" href="#静态压缩" aria-label="Permalink to &quot;静态压缩&quot;">​</a></h2><p>动态压缩每次访问资源（即使是相同资源）都会进行一次服务端压缩，会损耗一定性能。</p><p>静态压缩就是提前将文件亚索好，存在服务端，访问的时候直接返回，而省去压缩的过程。</p><p>Webpack 打包的项目可以插件 <code>compression-webpack-plugin</code> 来实现。</p><p>首先安装：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> compression-webpack-plugin</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> -D</span></span></code></pre></div><p>然后在 vue.config.js 里面配置：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> CompressionPlugin</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;compression-webpack-plugin&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    devServer: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        host: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;localhost&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        port: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">8080</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        proxy: proxyObj</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    },</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">    configureWebpack</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">config</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (process.env.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">NODE_ENV</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> ===</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &#39;production&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">            return</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">                plugins: [</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">                    new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> CompressionPlugin</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">                        test:</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> /</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;--shiki-light-font-weight:bold;--shiki-dark-font-weight:bold;">\\.</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">js</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">$|</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;--shiki-light-font-weight:bold;--shiki-dark-font-weight:bold;">\\.</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">html</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">$|</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;--shiki-light-font-weight:bold;--shiki-dark-font-weight:bold;">\\.</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">css/</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">                        threshold: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1024</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">                        deleteOriginalAssets: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">false</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">                    })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">                ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><ul><li><code>threshold: 1024</code> 表示超过 1kb 的文件就进行压缩。</li><li><code>deleteOriginalAssets: false</code> 表示压缩后是否删除原文件。</li></ul></div><p>配置好之后 build ，可以看到生成改的文件：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">app.a9e93.js</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">app.a9e93.js.gz</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">chunk-2093o.ante34343.js</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">chunk-2093o.ante34343.js.gz</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">...</span></span></code></pre></div><p>Nginx 通过 http_gzip_static_module 模块来支持静态压缩，默认是不包含的，可以编译安装：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">./configure</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> --with-http_gzip_static_module</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">make</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">make</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> install</span></span></code></pre></div><p>然后在 Nginx 配置文件中开启 gzip_static：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">gzip_static</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">  on</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span></code></pre></div><p>开启 gzip_static 后，gzip_types 就失效了，不需要再配置该属性。</p><p>客户端访问 Nginx 时，如果没有 <code>.gz</code> 格式的文件就会自动返回源文件。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>Nginx 的 docker image 默认包含了 http_gzip_static_module 模块。</p></div>`,24)]))}const o=i(t,[["render",l]]);export{c as __pageData,o as default};
