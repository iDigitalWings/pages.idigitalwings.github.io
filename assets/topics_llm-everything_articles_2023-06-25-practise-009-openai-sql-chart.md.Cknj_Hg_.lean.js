import{_ as n,a as t,af as h,o as l}from"./chunks/framework.C87LdZyP.js";const i="/assets/2162626785296625.WKuPC_TS.png",a="/assets/digital-wings-ai-all.BYUDptP7.mp4",p="/assets/2145651695173250.DFlB_YwI.png",k="/assets/2158806947005375.i7rTNarC.png",e="/assets/2158775455330000.CKhwTHwc.png",r="/assets/2159014300020791.DJ_nJ0tJ.png",d="/assets/2159173944951250.B-8fabWn.png",u=JSON.parse('{"title":"《万物皆可LLM》009：大语言模型下的数据问答 BI 实现","description":"","frontmatter":{"title":"《万物皆可LLM》009：大语言模型下的数据问答 BI 实现","date":"2023-06-25T00:00:00.000Z","tags":["ai","ml"],"category":["AI","llm-everything"]},"headers":[],"relativePath":"topics/llm-everything/articles/2023-06-25-practise-009-openai-sql-chart.md","filePath":"topics/llm-everything/articles/2023-06-25-practise-009-openai-sql-chart.md","lastUpdated":1718173059000}'),g={name:"topics/llm-everything/articles/2023-06-25-practise-009-openai-sql-chart.md"};function F(y,s,o,c,A,D){return l(),t("div",null,s[0]||(s[0]=[h('<blockquote><p>上一期我们用 LangChain 的 SQL Agent 实现了可视化分析，主要依托于 LangChain 和 OpenAI，更偏向于 Demo 能力，问题还不少，连原型都算不上。 今天带大家实现一个 LLM 时代的 BI 原型，包含数据表问答，自动装载可视化样式，可视化样式切换。</p></blockquote><p>首先看下最终效果：</p><p><img src="'+i+'" alt=""></p><p>视频展示：</p><video controls="controls" src="'+a+'"></video><h2 id="架构" tabindex="-1">架构 <a class="header-anchor" href="#架构" aria-label="Permalink to &quot;架构&quot;">​</a></h2><p>今天实现功能的逻辑架构是这样的：</p><p><img src="'+p+`" alt=""></p><p>因为 LLM 擅长的是文本理解和生成，所以我们只把他擅长的部分交给它，SQL 执行、复杂 UI 结构和展示我们还是交给更可控的程序来。</p><h2 id="后端解析" tabindex="-1">后端解析 <a class="header-anchor" href="#后端解析" aria-label="Permalink to &quot;后端解析&quot;">​</a></h2><p>同样我们定义一个 DatabaseFetchTools，根据前端的工具名称动态加载。</p><p>工具集注册：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">tools </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">    &#39;colors&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: ColorsTool(),</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">    &#39;random-color&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: RandomColorTool(),</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">    &#39;balabala&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: Balabala(),</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">    &#39;mail&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: [MailRefreshTool(), MailCheckUser()],</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">    &#39;gitlab&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: [GitBlockUserTool()],</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">    &#39;database&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: [DatabaseFetchTool()]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><h3 id="定义工具类" tabindex="-1">定义工具类 <a class="header-anchor" href="#定义工具类" aria-label="Permalink to &quot;定义工具类&quot;">​</a></h3><p>未来可能有很多数据库相关的工具，我们先定义一个基础类。</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">class</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> BaseDatabaseTool</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">BaseTool,</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> ABC</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">    pass</span></span></code></pre></div><p>然后我们定义这次的 <code>DatabaseFetchTool</code> 类，在说明里面描述我们工具的用途，以便选择权能够选择合适的工具。</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> DatabaseFetchTool</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6CB6FF;">BaseDatabaseTool</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">ABC</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">):</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    name: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">str</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;database-fetch&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    description: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">str</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">        &quot;使用这个工具来查询和分析数据。&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">        &quot; 参数是需要执行查询分析的自然语言描述。&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">        &quot; 返回查询和分析结果。&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    return_direct </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> True</span></span></code></pre></div><p>提前定义好数据库连接，这次使用 postgres：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">conn </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> psycopg2.connect(</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">    database</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;postgres&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">    host</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;127.0.0.1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">    user</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;postgres&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">    password</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;yourpassword&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">    port</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">5432</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span></code></pre></div><h3 id="sql-生成" tabindex="-1">SQL 生成 <a class="header-anchor" href="#sql-生成" aria-label="Permalink to &quot;SQL 生成&quot;">​</a></h3><p>这次的重点就是，使用我们的逻辑来实现 SQL 生成和查询，而不是让 LangChain 去做。</p><p>为了让 SQL 生成更加准确，我们要把元数据告诉 AI，下面是完整的 Prompt 结构：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">template</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &#39;&#39;&#39;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">Postgres 数据库的开发任务表（\`tasks\`）的字段如下 CSV 所示：</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">Name,Type,Comment</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">id,int4,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">title,varchar,任务名称标题</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">scroe,int4,任务评分</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">department,varchar,部门</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">auther,varchar, 任务指派人</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">date,date, 完成时间</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">dev_spend,int2,开发耗时小时</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">test_spend,int2, 测试耗时</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">spend,int2, 总耗时</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">根据上面表信息生成查询 SQL, 以及SQL 返回的列名称，使用中文回答。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">回答的格式请严格遵循下面格式：</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">{</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;columns&quot;: [&quot;字段中文名&quot;, ...],</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;sql&quot;: &quot; select ...&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">}</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;&quot;&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">问题为： %s</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;&#39;&#39;</span></span></code></pre></div><p>当然你也可以使用 sql 客户端读取所有表的机构，生成表结构的描述，动态拼接：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">tables_desc </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    (</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;table1&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;name1&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;&#39;&#39;Name,Type,Comment... &#39;&#39;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    (</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;table2&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;name2&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;&#39;&#39;Name,Type,Comment... &#39;&#39;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    (</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;table3&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;name3&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;&#39;&#39;Name,Type,Comment... &#39;&#39;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    (</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;...&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;...&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;&#39;&#39;Name,Type,Comment... &#39;&#39;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">subtemplate </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &#39;&#39;&#39;Postgres 数据库的</span><span style="--shiki-light:#005CC5;--shiki-dark:#F47067;">%s</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">表（\`</span><span style="--shiki-light:#005CC5;--shiki-dark:#F47067;">%s</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">\`）的字段如下 CSV 所示：</span><span style="--shiki-light:#005CC5;--shiki-dark:#F47067;">\\n\\n%s\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;&#39;&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">subprompt </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &#39;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.join([subtemplate </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">%</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (name, table, fields) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (table, name, fields) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> tables_desc])</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    template </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &#39;&#39;&#39;</span><span style="--shiki-light:#005CC5;--shiki-dark:#F47067;">%s\\n</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">根据上面表信息生成查询 SQL 以及返回的列名称，使用中文回答。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">回答的格式请严格遵循下面格式：&quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">{</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;columns&quot;: [&quot;字段中文名&quot;, ...],</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;sql&quot;: &quot; select ...&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">}</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;&quot;&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">问题为： </span><span style="--shiki-light:#005CC5;--shiki-dark:#F47067;">%s</span></span></code></pre></div><p>如果上下文太长超出限制的话，可以让 AI 根据你的问题来选择相关的表结构以满足 token 限制。</p><h3 id="生成和执行-sql" tabindex="-1">生成和执行 SQL <a class="header-anchor" href="#生成和执行-sql" aria-label="Permalink to &quot;生成和执行 SQL&quot;">​</a></h3><p>有了正觉的提示，我们实现工具的执行方法就很简单了，先获取 sql，再执行，然后返回，如下：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> _run</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(self, question) -&gt; </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">dict</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        answer </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> openai.predict(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">self</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.template </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">%</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">self</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.subprompt, question))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        j </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> json.loads(answer)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        cursor </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> conn.cursor()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        cursor.execute(j[</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;sql&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">])</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">            &#39;type&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;echarts&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">            &#39;fields&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: j[</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;columns&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">],</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">            &#39;values&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: cursor.fetchall()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        }</span></span></code></pre></div><p>细心的同学，发现上面我不仅反悔了 values，还返回了数据列名。这个数据列名称是为了方便前端可视化用的。</p><h3 id="测试接口" tabindex="-1">测试接口 <a class="header-anchor" href="#测试接口" aria-label="Permalink to &quot;测试接口&quot;">​</a></h3><p>接下来我们首先测试下邮件表。</p><h4 id="输入问题-最近-3-个月发邮件最多的人、数量、最后发件时间" tabindex="-1">输入问题：最近 3 个月发邮件最多的人、数量、最后发件时间 <a class="header-anchor" href="#输入问题-最近-3-个月发邮件最多的人、数量、最后发件时间" aria-label="Permalink to &quot;输入问题：最近 3 个月发邮件最多的人、数量、最后发件时间&quot;">​</a></h4><p>AI 返回的 JSON 是：</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#8DDB8C;"> &quot;columns&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;发件人名称&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;数量&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;最后发件时间&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">],</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#8DDB8C;"> &quot;sql&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;SELECT from_name as 发件人名称, COUNT(*) as 数量, MAX(date_beijing) as 最后发件时间 FROM emails WHERE date_beijing &gt;= now() - interval &#39;3 months&#39; GROUP BY from_name ORDER BY 数量 DESC LIMIT 1&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><p>执行 SQL，可以看到 SQL 和结果都正确： <img src="`+k+`" alt=""></p><h4 id="输入问题-最近一周每天完成的任务数" tabindex="-1">输入问题：最近一周每天完成的任务数 <a class="header-anchor" href="#输入问题-最近一周每天完成的任务数" aria-label="Permalink to &quot;输入问题：最近一周每天完成的任务数&quot;">​</a></h4><p>AI 返回的 JSON 是：</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#8DDB8C;"> &quot;columns&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;日期&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;完成任务数&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">],</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#8DDB8C;"> &quot;sql&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;SELECT date_trunc(&#39;day&#39;, date) AS 日期, COUNT(*) AS 完成任务数 FROM tasks WHERE date &gt;= current_date - interval &#39;7 days&#39; GROUP BY date_trunc(&#39;day&#39;, date) ORDER BY date_trunc(&#39;day&#39;, date)&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><p>执行 SQL，可以看到 SQL 和结果都正确：</p><p><img src="`+e+`" alt=""></p><h3 id="数据返回" tabindex="-1">数据返回 <a class="header-anchor" href="#数据返回" aria-label="Permalink to &quot;数据返回&quot;">​</a></h3><p>由于每个 Tool 返回的数据结构不尽相同，我们约定工具如果不是返回的字符串，那么就要指定消息类型， 这样可以在 FastAPI 路由时候判断<code>answer[&#39;type&#39;]</code>的值来统一消息格式：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> active_tools:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        agent </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> initialize_agent(active_tools, llm, </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">agent</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">AgentType.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">ZERO_SHOT_REACT_DESCRIPTION</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">verbose</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">True</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        answer </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> agent.run(item.prompt)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        logger.info(answer)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">        if</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> type</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(answer) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">is</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> dict</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">            if</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> answer[</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;type&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">==</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &#39;echarts&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">                return</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">                    &#39;content&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;</span><span style="--shiki-light:#005CC5;--shiki-dark:#F47067;">%s</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">如下：&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> %</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> item.prompt,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">                    &#39;llm&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: item.llm,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">                    &#39;echarts&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: answer</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">                }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">            &#39;content&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: answer,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">            &#39;llm&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: item.llm</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        }</span></span></code></pre></div><h2 id="前端设计" tabindex="-1">前端设计 <a class="header-anchor" href="#前端设计" aria-label="Permalink to &quot;前端设计&quot;">​</a></h2><p>由于我们最终还是使用消息的样式来完成前端，首先用比较人性化的内容来回答，然后跟上图表。</p><p><img src="`+r+'" alt=""></p><h3 id="图表展现类型" tabindex="-1">图表展现类型 <a class="header-anchor" href="#图表展现类型" aria-label="Permalink to &quot;图表展现类型&quot;">​</a></h3><p>对于不同的数据会有不同的展示形式，常见的有柱状图、折线图、饼图、气泡图。</p><p>我们兼容下这几种常见的形式，并且让用户鼠标移动到图标上可以在前端切换可视化样式。</p><p><img src="'+d+`" alt=""></p><blockquote><p>提供前端切换图表样式还有一个因素，就是让 AI 确定正确的可视化样式以及与之匹配的数据结构是很复杂的一件事儿，如果用 gpt3.5 接口，可能很容易出错。</p></blockquote><h3 id="前端实现思路" tabindex="-1">前端实现思路 <a class="header-anchor" href="#前端实现思路" aria-label="Permalink to &quot;前端实现思路&quot;">​</a></h3><h4 id="判断是普通消息还是图表消息" tabindex="-1">判断是普通消息还是图表消息 <a class="header-anchor" href="#判断是普通消息还是图表消息" aria-label="Permalink to &quot;判断是普通消息还是图表消息&quot;">​</a></h4><p>我们实现消息类型系统，简单通过响应有没有 echarts 属性来判断显示不显示图表。</p><h4 id="多种图表格式的构建" tabindex="-1">多种图表格式的构建 <a class="header-anchor" href="#多种图表格式的构建" aria-label="Permalink to &quot;多种图表格式的构建&quot;">​</a></h4><p>依然使用最简单的方法，<code>if</code>语句判断：</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> buildOption</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">type</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">titles</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> Array</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;, </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">source</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> Array</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">Array</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">any</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;&gt;)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> any</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">titles) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (type </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">==</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;scatter&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">else</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (type </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">==</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;bar&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">else</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (type </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">===</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;pie&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">else</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (type </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">==</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;line&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><p>在 Vue3 的 setup 函数构建 option：</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> chartType</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> ref</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;bar&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> rebuild</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> buildOption</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  chartType.value, </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  props.message.echarts?.fields, </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  props.message.echarts?.values</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> opts</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> ref</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">rebuild</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">());</span></span></code></pre></div><p>这样就可以在消息内容里面显示 Chart 了：</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">v-chart</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6CB6FF;"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;chart&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6CB6FF;"> :option</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;opts&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6CB6FF;"> autoresize</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> /&gt;</span></span></code></pre></div><h2 id="演示" tabindex="-1">演示 <a class="header-anchor" href="#演示" aria-label="Permalink to &quot;演示&quot;">​</a></h2><p>看看最终的效果吧：</p><p><img src="`+i+'" alt=""></p><p>视频展示：</p><video controls="controls" src="'+a+'"></video><hr><div style="text-align:center;color:#00000099;font-size:14px;">END</div>',70)]))}const B=n(g,[["render",F]]);export{u as __pageData,B as default};
