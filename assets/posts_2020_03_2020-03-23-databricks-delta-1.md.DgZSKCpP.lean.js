import{_ as i,a,af as t,o as n}from"./chunks/framework.C87LdZyP.js";const e="/assets/deltalakebenefits.BDYC5uju.png",l="/assets/describe-history.CxWdTcGR.png",A=JSON.parse('{"title":"Databricks Delta - 1","description":"","frontmatter":{"title":"Databricks Delta - 1","date":"2020-03-23T00:00:00.000Z","tags":["databricks"],"category":["BigData"]},"headers":[],"relativePath":"posts/2020/03/2020-03-23-databricks-delta-1.md","filePath":"posts/2020/03/2020-03-23-databricks-delta-1.md","lastUpdated":1718173059000}'),h={name:"posts/2020/03/2020-03-23-databricks-delta-1.md"};function p(k,s,d,r,o,g){return n(),a("div",null,s[0]||(s[0]=[t('<p>去年一次听 AWS 的技术分享，听说了 Data Lake 的概念。如今最为流行的数据湖解决方案就是 Databricks 的 Delta Lake 了。其他的数据库解决方案， 比如 Apache 的 Iceberg，以后有时间再学习下，最近集中学习下 Delta。</p><p>Delta 是 Spark 的母公司 Databricks 在 2019 年 Spark Summit 大会上开源的。<a href="https://databricks.com/product/delta-lake-on-databricks" target="_blank" rel="noreferrer">官网</a> 的宣传是 <code>Brings data reliability and performance to your data lakes</code> 可见其官方的卖点是数据可靠性和性能。</p><p>下面的整体架构说明 Delta 旨在现在的数据库方案上来解决现在数据库的痛点。</p><p><img src="'+e+`" alt=""></p><p>他提供了如下特性：</p><ul><li>ACID 事务</li><li>DML API 更新、合并和删除数据集</li><li>时间旅行：数据版本和快照</li><li>可扩展的元数据管理</li><li>开放的数据格式</li><li>统一批处理、流处理和数据下沉</li><li>模式演进</li><li>审批历史</li><li>100% 兼容 Spark Api</li></ul><h2 id="快速开始" tabindex="-1">快速开始 <a class="header-anchor" href="#快速开始" aria-label="Permalink to &quot;快速开始&quot;">​</a></h2><h3 id="建表" tabindex="-1">建表 <a class="header-anchor" href="#建表" aria-label="Permalink to &quot;建表&quot;">​</a></h3><p>和 Spark SQL 一样，只需要将格式从 <code>parquet</code>, <code>csv</code>, <code>json</code> 转成 <code>delta</code> 就行了。</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">events </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> spark.read.json(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;/databricks-datasets/structured-streaming/events/&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">events.write.format(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;delta&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">).save(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;/mnt/delta/events&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">spark.sql(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;CREATE TABLE events USING DELTA LOCATION &#39;/mnt/delta/events/&#39;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span></code></pre></div><p>上面的操作就使从 JSON 数据里获取 Schema 创建了一个受管理的表。</p><h3 id="数据分割" tabindex="-1">数据分割 <a class="header-anchor" href="#数据分割" aria-label="Permalink to &quot;数据分割&quot;">​</a></h3><p>为了提高查询效率，可以指定一列或者多列来进行数据分割</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Copy to clipboardCopy</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">events </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> spark.read.json(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;/databricks-datasets/structured-streaming/events/&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">events.write.partitionBy(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;date&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">).format(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;delta&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">).save(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;/mnt/delta/events&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">spark.sql(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;CREATE TABLE events USING DELTA LOCATION &#39;/mnt/delta/events/&#39;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span></code></pre></div><h3 id="修改表" tabindex="-1">修改表 <a class="header-anchor" href="#修改表" aria-label="Permalink to &quot;修改表&quot;">​</a></h3><p>Delta 支持丰富的改表操作</p><h4 id="流写入" tabindex="-1">流写入 <a class="header-anchor" href="#流写入" aria-label="Permalink to &quot;流写入&quot;">​</a></h4><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> pyspark.sql.types </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">import</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> *</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">inputPath </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;/databricks-datasets/structured-streaming/events/&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">jsonSchema </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> StructType([ StructField(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;time&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, TimestampType(), </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">True</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">), StructField(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;action&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, StringType(), </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">True</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) ])</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">eventsDF </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  spark</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    .readStream</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    .schema(jsonSchema) </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"># Set the schema of the JSON data</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    .option(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;maxFilesPerTrigger&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"># Treat a sequence of files as a stream by picking one file at a time</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    .json(inputPath)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(eventsDF.writeStream</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  .outputMode(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;append&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  .option(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;checkpointLocation&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;/mnt/delta/events/_checkpoints/etl-from-json&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  .table(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;events&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span></code></pre></div><h3 id="批插更" tabindex="-1">批插更 <a class="header-anchor" href="#批插更" aria-label="Permalink to &quot;批插更&quot;">​</a></h3><p>使用 <code>MERGE INTO</code> 合并（插入或更新）数据到已存在的表。</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">MERGE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> INTO</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> events</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">USING</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> updates</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">ON</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> events</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">eventId</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> updates</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">eventId</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">WHEN</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> MATCHED</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> THEN</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  UPDATE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> SET</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">    events</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> updates</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">data</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">WHEN</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> NOT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> MATCHED</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  THEN</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> INSERT</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">date</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, eventId, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">data</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">VALUES</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">date</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, eventId, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">data</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span></code></pre></div><p>注意： 插入的时候要指定表中的所有数据。</p><h3 id="访问" tabindex="-1">访问 <a class="header-anchor" href="#访问" aria-label="Permalink to &quot;访问&quot;">​</a></h3><p>可以通过 DBFS 的路径或者表名来访问</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">val events </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> spark.read.format(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;delta&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">).load(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;/mnt/delta/events&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span></code></pre></div><p>or</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">val events </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> spark.table(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;events&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span></code></pre></div><h3 id="显示表历史" tabindex="-1">显示表历史 <a class="header-anchor" href="#显示表历史" aria-label="Permalink to &quot;显示表历史&quot;">​</a></h3><p>通过 <code>DESCRIBE HISTORY</code></p><p><img src="`+l+'" alt=""></p><h3 id="使用时间旅行查询早版本的数据" tabindex="-1">使用时间旅行查询早版本的数据 <a class="header-anchor" href="#使用时间旅行查询早版本的数据" aria-label="Permalink to &quot;使用时间旅行查询早版本的数据&quot;">​</a></h3><p>比如</p><ul><li>版本0 是在 <code>2019-01-29 00:37:58</code></li><li>版本1 是在 <code>2019-01-29 00:38:10</code></li></ul><p>查询版本0：</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">SELECT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> events </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">VERSION</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> AS</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> OF </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0</span></span></code></pre></div><p>or</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">SELECT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> events </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">TIMESTAMP</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> AS</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> OF </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;2019-01-29 00:37:58&#39;</span></span></code></pre></div><p>NOTE: 只要在 &#39;2019-01-29 00:37:58&#39; to &#39;2019-01-29 00:38:09&#39; 内的时间都可以查询到版本0.</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">df1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> spark.read.format(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;delta&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">).option(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;timestampAsOf&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, timestamp_string).load(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;/mnt/delta/events&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">df2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> spark.read.format(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;delta&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">).option(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;versionAsOf&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, version).load(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;/mnt/delta/events&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span></code></pre></div><h3 id="优化表" tabindex="-1">优化表 <a class="header-anchor" href="#优化表" aria-label="Permalink to &quot;优化表&quot;">​</a></h3><p>多次操作之后会产生很对小文件，优化表可提升性能。</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">OPTIMIZE delta.</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">`/mnt/delta/events`</span></span></code></pre></div><p>or</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">OPTIMIZE events</span></span></code></pre></div><h3 id="z-order" tabindex="-1">Z-Order <a class="header-anchor" href="#z-order" aria-label="Permalink to &quot;Z-Order&quot;">​</a></h3><p>为了更一步提升性能可以指定一列来帮助定位数据，</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">OPTIMIZE events</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  ZORDER </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">BY</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (eventType)</span></span></code></pre></div><h3 id="快照清理" tabindex="-1">快照清理 <a class="header-anchor" href="#快照清理" aria-label="Permalink to &quot;快照清理&quot;">​</a></h3><p>Delta 对不同版本数据进行了隔离，所以我们推荐<code>OPTIMIZE</code>，但是如果这的要清理快照可以用<code>VACUUM</code>命令</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">VACUUM events</span></span></code></pre></div><p>or</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">VACUUM events RETAIN </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">24</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> HOURS</span></span></code></pre></div>',52)]))}const y=i(h,[["render",p]]);export{A as __pageData,y as default};
