import{_ as s,a,af as t,o as l}from"./chunks/framework.C87LdZyP.js";const o=JSON.parse('{"title":"Scala Implicit - 1","description":"Scala Implicit","frontmatter":{"title":"Scala Implicit - 1","date":"2017-04-17T00:00:00.000Z","img":"docker-jekyll.jpg","description":"Scala Implicit","category":["Scala"],"tags":["container","docker","swarm","kubernetes","mesos"]},"headers":[],"relativePath":"posts/2017/04/2017-04-17-scala-implicit-1.md","filePath":"posts/2017/04/2017-04-17-scala-implicit-1.md","lastUpdated":1718173059000}'),n={name:"posts/2017/04/2017-04-17-scala-implicit-1.md"};function e(h,i,p,k,d,r){return l(),a("div",null,i[0]||(i[0]=[t(`<p><code>implicit</code>用法：</p><h2 id="implicit-parameters" tabindex="-1">Implicit Parameters <a class="header-anchor" href="#implicit-parameters" aria-label="Permalink to &quot;Implicit Parameters&quot;">​</a></h2><div class="language-scala vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">scala</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">implicit</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> val</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;"> n</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> Int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 5</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> add</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">x</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">implicit</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;"> y</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> y</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">add(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// takes n from the current scope, res: Int =</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">assert(add(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> n </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 5</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span></code></pre></div><div class="language-scala vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">scala</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> foo</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">[</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">](</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">t</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">implicit</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;"> integral</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">Integral</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">[</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">])</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> Unit</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    println(integral)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><h2 id="implicit-conversion" tabindex="-1">Implicit Conversion <a class="header-anchor" href="#implicit-conversion" aria-label="Permalink to &quot;Implicit Conversion&quot;">​</a></h2><p>如果一个的对象调用一个该对象没有的方法，那么scala就会在上下文中查找隐式转换， 转换成能够支持该方法的类的对象。</p><div class="language-scala vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">scala</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;abc&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.map(_.toInt)</span></span></code></pre></div><p><code>String</code>没有<code>map</code>方法，但是<code>StringOps</code>有。在<code>scala.Predef</code>中有定义： <code>implicit def augmentString</code>。</p><h2 id="implicit-conversions-as-implicit-parameters" tabindex="-1">Implicit conversions as implicit parameters <a class="header-anchor" href="#implicit-conversions-as-implicit-parameters" aria-label="Permalink to &quot;Implicit conversions as implicit parameters&quot;">​</a></h2><p>当既是隐式转换又是隐士参数的时候：</p><div class="language-scala vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">scala</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> getIndex</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">[</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">CC</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">](</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">seq</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">CC</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">implicit</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;"> conv</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">CC</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> Seq</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">[</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">]) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> seq.indexOf(value)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">getIndex(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;abc&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#F47067;">&#39;a&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span></code></pre></div><p><code>getIndex</code> 方法接受任何类型参数，只要有隐式转换能将其u转换成<code>Seq[T]</code>， 所以<code>String</code>可以传递给<code>getIndex</code>并正确运行。</p><p>其实编译器是把<code>seq.IndexOf(value)</code> 转换成 <code>conv(seq).indexOf(value)</code>。</p><h2 id="context-bounds" tabindex="-1">Context Bounds <a class="header-anchor" href="#context-bounds" aria-label="Permalink to &quot;Context Bounds&quot;">​</a></h2><p>隐式参数另外一个常用的场景是<code>type class pattern</code>。</p><p>未完。。。</p><p>参考：</p><ul><li><a href="http://docs.scala-lang.org/tutorials/FAQ/finding-implicits.html" target="_blank" rel="noreferrer">http://docs.scala-lang.org/tutorials/FAQ/finding-implicits.html</a></li><li><a href="http://stackoverflow.com/questions/5512397/passing-scala-math-integral-as-implicit-parameter" target="_blank" rel="noreferrer">http://stackoverflow.com/questions/5512397/passing-scala-math-integral-as-implicit-parameter</a></li></ul>`,18)]))}const g=s(n,[["render",e]]);export{o as __pageData,g as default};
