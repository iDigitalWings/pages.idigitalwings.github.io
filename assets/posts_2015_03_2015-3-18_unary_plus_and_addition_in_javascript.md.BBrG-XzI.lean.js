import{_ as i,a,af as n,o as t}from"./chunks/framework.C87LdZyP.js";const g=JSON.parse('{"title":"JavaScript中的加号[+]","description":"","frontmatter":{"title":"JavaScript中的加号[+]","date":"2015-03-18T00:00:00.000Z","tags":["js"],"category":["前端"],"author":"Alan Wong"},"headers":[],"relativePath":"posts/2015/03/2015-3-18_unary_plus_and_addition_in_javascript.md","filePath":"posts/2015/03/2015-3-18_unary_plus_and_addition_in_javascript.md","lastUpdated":1718193786000}'),l={name:"posts/2015/03/2015-3-18_unary_plus_and_addition_in_javascript.md"};function h(p,s,e,k,r,d){return t(),a("div",null,s[0]||(s[0]=[n(`<nav class="table-of-contents"><ul><li><a href="#关于addition">关于Addition</a></li><li><a href="#关于unary-plus">关于Unary plus</a></li><li><a href="#关于object-valueof-来源mdn">关于Object.valueOf 来源MDN</a></li></ul></nav><p>昨天看到一个问题， <code>var a=+new Data</code>是什么意思．</p><p>看了提问者的<a href="http://www.cnblogs.com/Raoh/p/4212075.html" target="_blank" rel="noreferrer">Blog</a>，明白了点儿东西，又产生了新的疑惑．</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> Person</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">Person</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">prototype</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">    valueOf</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> () {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">        return</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;valueOf&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    },</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">    toString</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> () {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">        return</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;toString&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">};</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> foo </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> Person</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;a</span><span style="--shiki-light:#005CC5;--shiki-dark:#F47067;">\\t</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> foo);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// Date tests</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> date </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> Date</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">123</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> date);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">123</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> +</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">date);</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// or 123 + + data</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;a</span><span style="--shiki-light:#005CC5;--shiki-dark:#F47067;">\\t</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> date);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;a</span><span style="--shiki-light:#005CC5;--shiki-dark:#F47067;">\\t</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> +</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">date);</span></span></code></pre></div><p>上面的程序输出是：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span>a	valueOf</span></span>
<span class="line"><span>123Wed Mar 18 2015 16:15:24 GMT+0800 (CST)</span></span>
<span class="line"><span>1426666524753</span></span>
<span class="line"><span>a	Wed Mar 18 2015 16:15:24 GMT+0800 (CST)</span></span>
<span class="line"><span>a	1426666524630</span></span></code></pre></div><p>从上面的测试程序可以看出，对于自定义的<code>Person</code>类型，确实使用了<code>valueOf</code>方法．但是对于<code>Data</code>类型的对象，却不尽然．</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">number </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> date </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// &gt;&gt; number + date.valueOf()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">string </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> date </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// &gt;&gt; string + date.toString()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">string </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> customerObject </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// &gt;&gt; string + customerObject.valueOf() !! not toString</span></span></code></pre></div><p>上面的结果让我很惊异，至今也没有找到合理的参考来解释<code>自定义对象和Date对象表现不一致</code>的原因．只能感叹<code>JavaScript是一门神奇的语言</code>．</p><p>两把刚才查阅的一些资料贴在下面：（<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Arithmetic_Operators" target="_blank" rel="noreferrer">来源MDN</a>）</p><h3 id="关于addition" tabindex="-1">关于Addition <a class="header-anchor" href="#关于addition" aria-label="Permalink to &quot;关于Addition&quot;">​</a></h3><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">Addition</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">The addition operator produces the sum </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">of</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> numeric operands or string concatenation.</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Syntax</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">Operator</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> y</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Examples</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// Number + Number -&gt; addition</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> +</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 2</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> // 3</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// Boolean + Number -&gt; addition</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">true</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> +</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 1</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> // 2</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// Boolean + Boolean -&gt; addition</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">false</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> +</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> false</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> // 0</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// Number + String -&gt; concatenation</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">5</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> +</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;foo&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> // &quot;5foo&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// String + Boolean -&gt; concatenation</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;foo&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> +</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> false</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> // &quot;foofalse&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// String + String -&gt; concatenation</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;foo&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> +</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;bar&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> // &quot;foobar&quot;</span></span></code></pre></div><h3 id="关于unary-plus" tabindex="-1">关于Unary plus <a class="header-anchor" href="#关于unary-plus" aria-label="Permalink to &quot;关于Unary plus&quot;">​</a></h3><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Unary </span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">plus</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">The unary plus operator precedes its operand and evaluates to its operand but attempts to converts it into a number, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> it isn</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;t already. Although unary negation (-) also can convert non-numbers, unary plus is the fastest and preferred way of converting something into a number, because it does not perform any other operations on the number. It can convert string representations of integers and floats, as well as the non-string values true, false, and null. Integers in both decimal and hexadecimal (&quot;0x&quot;-prefixed) formats are supported. Negative numbers are supported (though not for hex). If it cannot parse a particular value, it will evaluate to NaN</span><span style="--shiki-light:#B31D28;--shiki-dark:#FF938A;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">.</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Syntax</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">Operator</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">x</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Examples</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">3</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">     // 3</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;3&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">   // 3</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">true</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">  // 1</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">false</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> // 0</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">null</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">  // 0</span></span></code></pre></div><h3 id="关于object-valueof-来源mdn" tabindex="-1">关于Object.valueOf <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/valueOf" target="_blank" rel="noreferrer">来源MDN</a> <a class="header-anchor" href="#关于object-valueof-来源mdn" aria-label="Permalink to &quot;关于Object.valueOf [来源MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/valueOf)&quot;">​</a></h3><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Summary</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">The </span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">valueOf</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() method returns the primitive value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">of</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> the specified object.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Syntax</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">object.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">valueOf</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Description</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">JavaScript calls the valueOf method to convert an object to a primitive value. You rarely need to invoke the valueOf method yourself; JavaScript automatically invokes it when encountering an object where a primitive value is expected.</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">By </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">default</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, the valueOf method is inherited by every object descended from Object. Every built</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">-in</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> core object overrides </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> method to </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">return</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> an appropriate value. If an object has no primitive value, valueOf returns the object itself, which is displayed as:</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">[object Object]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">You can use valueOf within your own code to convert a built</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">-in</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> object into a primitive value. When you create a custom object, you can override </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">Object</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">prototype</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">valueOf</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() to call a custom method instead </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">of</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> the </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">default</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> Object method.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Overriding valueOf for custom objects</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">You can create a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> to</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> be</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> called</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> in</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> place</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> of</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> the</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> default</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> valueOf</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> method</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">. </span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">Your</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> must</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> take</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> no</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> arguments</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">Suppose</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> you</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> have</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> an</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> object</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> myNumberType</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> and</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> you</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> want</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> to</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> create</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> a</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> valueOf</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> method</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> for</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> it</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">. </span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">The</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> following</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> code</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> assigns</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> a</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> user</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">-</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">defined</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> to</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> the</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> object</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&#39;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">s</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> valueOf</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> method</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">myNumberType</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">prototype</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">valueOf</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> = </span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() { </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">return</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> customPrimitiveValue; };</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">With the preceding code </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> place, any time an object </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">of</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> myNumberType</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> is used in a context where it is to be represented as a primitive value, JavaScript automatically calls the function defined in the preceding code.</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">An object&#39;s valueOf method is usually invoked by JavaScript, but you can invoke it yourself as follows:</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">myNumber.valueOf()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Note: Objects in string contexts convert via the toString() method, which is different from String objects converting to string primitives using valueOf. All objects have a string conversion, if only &quot;[object type]&quot;. But many objects do not convert to number, boolean, or function.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Examples</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Example: Using valueOf</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">o </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> Object</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">myVar </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> o.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">valueOf</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();      </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// [object Object]</span></span></code></pre></div><hr><div style="text-align:center;color:#00000099;font-size:14px;">END</div>`,18)]))}const y=i(l,[["render",h]]);export{g as __pageData,y as default};
