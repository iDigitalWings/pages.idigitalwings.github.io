import{_ as i,a,af as e,o as t}from"./chunks/framework.C87LdZyP.js";const c=JSON.parse('{"title":"Python 包管理器 poetry","description":"","frontmatter":{"title":"Python 包管理器 poetry","date":"2023-02-09T00:00:00.000Z","tags":["python"],"category":["其它"]},"headers":[],"relativePath":"posts/2023/02/2023-02-09-python-poetry.md","filePath":"posts/2023/02/2023-02-09-python-poetry.md","lastUpdated":1718173059000}'),p={name:"posts/2023/02/2023-02-09-python-poetry.md"};function l(h,s,n,d,o,r){return t(),a("div",null,s[0]||(s[0]=[e(`<p>poetry是一个Python虚拟环境和依赖管理的工具。poetry和pipenv类似，另外还提供了打包和发布的功能。</p><p>Poetry 和 Pipenv 类似，是一个 Python 虚拟环境和依赖管理工具， 另外它还提供了包管理功能，比如打包和发布。你可以把它看做是 Pipenv 和 Flit 这些工具的超集。 它可以让你用 Poetry 来同时管理 Python 库和 Python 程序。</p><ul><li>主页：<a href="https://poetry.eustace.io/" target="_blank" rel="noreferrer">https://poetry.eustace.io/</a></li><li>源码：<a href="https://github.com/sdispater/poetry" target="_blank" rel="noreferrer">https://github.com/sdispater/poetry</a></li><li>文档：<a href="https://poetry.eustace.io/docs" target="_blank" rel="noreferrer">https://poetry.eustace.io/docs</a></li></ul><h2 id="安装-poetry" tabindex="-1">安装 Poetry <a class="header-anchor" href="#安装-poetry" aria-label="Permalink to &quot;安装 Poetry&quot;">​</a></h2><p>官方推荐的安装命令是使用自带的 get-poetry.py 脚本，使用 curl：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> curl</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> -sSL</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> https://raw.githubusercontent.com/sdispater/poetry/master/get-poetry.py</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> python</span></span></code></pre></div><p>或者直接下载这个安装脚本 <code>get-poetry.py</code>，然后在本地执行。</p><p>因为这个命令在安装时会从 GitHub 下载一个 7M 的压缩包，如果不用代理某些地区可能会很慢。实际测试使用代理安装耗时约 30 秒，不用代理等了 5 分钟，然后连接被重置。</p><p>如果没有用代理，可以用 pip 安装（不过 Poetry 官方文档不建议这么做，因为有可能会造成依赖冲突，可以考虑用 pipx 或 pipsi）：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> pip</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> install</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> --user</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> poetry</span></span></code></pre></div><p>安装后可以使用下面的命令确认安装成功：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> poetry</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> --version</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">Poetry</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 0.12.17</span></span></code></pre></div><p>默认安装到：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">$HOME/.poetry/bin</span></span></code></pre></div><h2 id="poetry-的基本用法" tabindex="-1">Poetry 的基本用法 <a class="header-anchor" href="#poetry-的基本用法" aria-label="Permalink to &quot;Poetry 的基本用法&quot;">​</a></h2><p>Poetry 的用法很简单，大部分命令和 Pipenv 接近。我们需要先了解一些基本概念和 Tips：</p><ul><li>使用 PEP 518 引入的新标准 <code>pyproject.toml</code> 文件管理依赖列表和项目的各种 meta 信息，用来替代 Pipfile、requirements.txt、setup.py、setup.cfg、MANIFEST.in 等等各种配置文件。</li><li>依赖分为两种，普通依赖（生产环境）和开发依赖。</li><li>安装某个包，会在 <code>pyproject.toml</code> 文件中默认使用 <code>upper bound</code> 版本限定，比如 Flask^1.1。这被叫做 <code>Caret requirements</code>，比如某个依赖的版本限定是 ^2.9.0，当你执行 <code>poetry update</code> 的时候，它或许会更新到 2.14.0，但不会更新到 3.0.0；假如固定的版本是 ^0.1.11，它可能会更新到 0.1.19，但不会更新到 0.2.0。总之，在更新依赖的时候不会修改最左边非零的数字号版本（对于 SemVer 版本号而言），这样的默认设定可以确保你在更新依赖的时候不会更新到具有不兼容变动的版本。另外也支持更多依赖版本限定符号。</li><li>不会像 Pipenv 那样随时更新你的锁定依赖版本，锁定依赖存储在 poetry.lock 文件里（这个文件会自动生成）。所以，记得把你的 poetry.lock 文件纳入版本控制。</li><li>执行 poetry 或 poetry list 命令查看所有可用的命令。</li></ul><p>如果你想了解更多进阶的内容，比如设置命令行补全、打包和发布等等，请阅读 Poetry 文档。</p><h2 id="准备工作" tabindex="-1">准备工作 <a class="header-anchor" href="#准备工作" aria-label="Permalink to &quot;准备工作&quot;">​</a></h2><p>如果你是在一个已有的项目里使用 Poetry，你只需要执行 poetry init 命令来创建一个 pyproject.toml 文件：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> poetry</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> init</span></span></code></pre></div><p>根据它的提示输入你的项目信息，不确定的内容就按下 Enter 使用默认值，后续也可以手动更新。指定依赖的环节可以跳过，手动安装会更高效一点。</p><p>如果你想创建一个新的 Python 项目，使用 <code>poetry new &lt;文件夹名称&gt;</code> 命令可以创建一个项目模板：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> poetry</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> new</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> foo</span></span></code></pre></div><p>这会创建一个这样的项目结构：</p><div class="language-vue vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">foo</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">├── pyproject.toml</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">├── README.rst</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">├── foo</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">│   └── __init__.py</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">└── tests</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">├── __init__.py</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">└── test_foo.py</span></span></code></pre></div><p>如果你想使用 <code>src</code> 文件夹，可以添加 <code>--src</code> 选项，这会把程序包嵌套在 <code>src</code> 文件夹里。</p><h2 id="创建虚拟环境" tabindex="-1">创建虚拟环境 <a class="header-anchor" href="#创建虚拟环境" aria-label="Permalink to &quot;创建虚拟环境&quot;">​</a></h2><p>使用 <code>poetry install</code> 命令创建虚拟环境（确保当前目录有 pyproject.toml 文件）：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> poetry</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> install</span></span></code></pre></div><p>这个命令会读取 <code>pyproject.toml</code> 中的所有依赖（包括开发依赖）并安装，如果不想安装开发依赖， 可以附加 <code>--no-dev</code> 选项。如果项目根目录有 <code>poetry.lock</code> 文件， 会安装这个文件中列出的锁定版本的依赖。如果执行 <code>add/remove</code> 命令的时候没有检测到虚拟环境， 也会为当前目录自动创建虚拟环境。</p><h2 id="激活虚拟环境" tabindex="-1">激活虚拟环境 <a class="header-anchor" href="#激活虚拟环境" aria-label="Permalink to &quot;激活虚拟环境&quot;">​</a></h2><p>执行 <code>poetry</code> 开头的命令并不需要激活虚拟环境，因为它会自动检测到当前虚拟环境。如果你想快速在当前目录对应的虚拟环境中执行命令，可以使用 <code>poetry run &lt;你的命令&gt;</code> 命令，比如：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> poetry</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> run</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> python</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> app.py</span></span></code></pre></div><p>如果你想显式的激活虚拟环境，使用 <code>poetry shell</code> 命令：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> poetry</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> shell</span></span></code></pre></div><h2 id="安装包" tabindex="-1">安装包 <a class="header-anchor" href="#安装包" aria-label="Permalink to &quot;安装包&quot;">​</a></h2><p>使用 <code>poetry add</code> 命令来安装一个包：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> poetry</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> add</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> flask</span></span></code></pre></div><p>添加 <code>--dev</code> 参数可以指定为开发依赖：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> poetry</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> add</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> pytest</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> --dev</span></span></code></pre></div><h2 id="追踪-更新包" tabindex="-1">追踪 &amp; 更新包 <a class="header-anchor" href="#追踪-更新包" aria-label="Permalink to &quot;追踪 &amp; 更新包&quot;">​</a></h2><p>使用 <code>poetry show</code> 命令可以查看所有安装的依赖（可以传递包名称作为参数查看具体某个包的信息）：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> poetry</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> show</span></span></code></pre></div><p>添加 <code>--tree</code> 选项可以查看依赖关系：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> poetry</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> show</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> --tree</span></span></code></pre></div><p>添加 <code>--outdated</code> 可以查看可以更新的依赖：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> poetry</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> show</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> --outdated</span></span></code></pre></div><p>执行 <code>poetry update</code> 命令可以更新所有锁定版本的依赖：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> poetry</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> update</span></span></code></pre></div><p>如果你想更新某个指定的依赖，传递包名作为参数：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> poetry</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> update</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> foo</span></span></code></pre></div><p>卸载包 使用 <code>poetry remove &lt;包名称&gt;</code> 卸载一个包：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> poetry</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> remove</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> foo</span></span></code></pre></div><p>常用配置 Poetry 的配置存储在单独的文件中，比 Pipenv 设置环境变量的方式要方便一点。 配置通过 <code>poetry config</code> 命令设置，比如下面的命令可以写入 PyPI 的账号密码信息：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> poetry</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> config</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> http-basic.pypi</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> username</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> password</span></span></code></pre></div><p>下面的命令设置在项目内创建虚拟环境文件夹：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> poetry</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> config</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> settings.virtualenvs.in-project</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> true</span></span></code></pre></div><p>另一个常用的配置是设置 PyPI 镜像源，以使用豆瓣提供的 PyPI 镜像源为例， 你需要在 <code>pyproject.toml</code> 文件里加入这部分内容：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">[[tool.poetry.source]]</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">name</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;douban&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">url</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;https://pypi.doubanio.com/simple/&quot;</span></span></code></pre></div><p>不过经过测试 Poetry 会使用 pip.ini 设置的 PyPI 镜像， 而且豆瓣的源好像很久没更新了（创建虚拟环境安装的默认依赖里 importlib-metadata==0.20 找不到）， 这篇文章列出了一些其他国内的 PyPI 源。</p><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p>总的来说，我愿意深入尝试和使用 Poetry。 当然，经过使用 Pipenv 的痛苦经历，我对推荐工具这种事情变得更保守了。 所以我不推荐 Python 初学者使用，不推荐直接在生产环境使用，不推荐没法正常访问国际互联网的人使用。</p><p>列一些我了解到的优缺点：</p><h3 id="优点" tabindex="-1">优点 <a class="header-anchor" href="#优点" aria-label="Permalink to &quot;优点&quot;">​</a></h3><ul><li>使用标准的 pyproject.toml 文件，不用写多个配置文件</li><li>同时支持管理 Python 程序和 Python 库</li><li>更符合直觉的默认设计，比如不会随便更新锁定版本的依赖</li><li>干净简洁的命令行输出，没有星星和蛋糕</li><li>安装包的时候，使用 upper bound 版本限定，而不是 Pipenv 默认的通配符</li><li>卸载包的时候，直接卸载孤立的子依赖，不需要像 Pipenv 那样需要再执行 pipenv clean</li></ul><hr><ul><li><a href="http://www.huggingface.co" target="_blank" rel="noreferrer">http://www.huggingface.co</a></li></ul>`,68)]))}const y=i(p,[["render",l]]);export{c as __pageData,y as default};
