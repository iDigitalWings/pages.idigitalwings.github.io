import{_ as i,a,af as n,o as t}from"./chunks/framework.C87LdZyP.js";const p="/assets/41555363868375.1R_iDjqQ.png",e="/assets/41779261652541.DoYpWVqG.png",l="/assets/42167194843000.CaHcy3tk.png",D=JSON.parse('{"title":"使用 Docker 构建和部署 Flask 应用","description":"","frontmatter":{"title":"使用 Docker 构建和部署 Flask 应用","date":"2023-08-09T00:00:00.000Z","tags":["ai","llm"],"category":["ai"]},"headers":[],"relativePath":"posts/2023/08/2023-08-09-build-deploy-flask-using-docker-space.md","filePath":"posts/2023/08/2023-08-09-build-deploy-flask-using-docker-space.md","lastUpdated":1718173059000}'),k={name:"posts/2023/08/2023-08-09-build-deploy-flask-using-docker-space.md"};function h(r,s,o,d,c,F){return t(),a("div",null,s[0]||(s[0]=[n('<h2 id="介绍" tabindex="-1">介绍 <a class="header-anchor" href="#介绍" aria-label="Permalink to &quot;介绍&quot;">​</a></h2><p><a href="https://www.docker.com/" target="_blank" rel="noreferrer">Docker</a> 是一个开源应用程序，允许管理员使用容器创建、管理、部署和复制应用程序。 容器可以被认为是一个包，其中包含应用程序在操作系统级别运行所需的依赖项。这意味着使用 Docker 部署的每个应用程序都位于自己的环境中，并且其需求是单独处理的。</p><p><img src="'+p+'" alt="Docker 主页"></p><p><a href="https://fastapi.tiangolo.com/" target="_blank" rel="noreferrer">FastAPI</a> 是一个现代的高性能 Web 框架，用于使用 Python 构建 API。它被设计为易于使用、高效且高度可扩展。 FastAPI 利用 Python 3.7+ 类型提示的强大功能来提供自动生成的交互式 API 文档，该文档对开发人员和用户都友好。</p><p><img src="'+e+'" alt=""></p><p>使用 Docker 部署 Flask 应用程序将允许您以最少的重新配置跨不同服务器复制应用程序。</p><h2 id="fastapi-与-docker-的兼容性和优势" tabindex="-1">FastAPI 与 Docker 的兼容性和优势 <a class="header-anchor" href="#fastapi-与-docker-的兼容性和优势" aria-label="Permalink to &quot;FastAPI 与 Docker 的兼容性和优势&quot;">​</a></h2><p>FastAPI 和 Docker 相得益彰。FastAPI 的高性能、异步功能和易于使用的 API 文档使其成为构建强大 API 的理想选择。 另一方面，Docker 为运行 FastAPI 应用程序提供了可靠且一致的环境。</p><p>通过使用 Docker 容器化 FastAPI 应用程序，您可以获得以下优势：</p><ul><li><strong>可重复的构建</strong>：Docker 允许您在 Dockerfile 中定义应用程序的依赖项和环境，从而确保在不同的开发和部署环境中实现一致且可重复的构建。</li><li><strong>轻松部署</strong>：Docker 提供了一个轻量级、可移植的容器，封装了 FastAPI 应用程序及其所有依赖项，从而可以轻松地将应用程序部署在任何与 Docker 兼容的基础设施上。</li><li><strong>可扩展性</strong>：Docker 通过启动多个容器实例来轻松扩展 FastAPI 应用程序，使您能够无缝处理增加的流量和工作负载。</li><li><strong>隔离</strong>：Docker 容器在 FastAPI 应用程序和主机系统之间提供隔离，防止冲突并确保应用程序可靠且独立于底层基础设施运行。</li><li><strong>持续集成和部署</strong>：Docker 与 CI/CD 管道完美集成，允许自动构建、测试和部署 FastAPI 应用程序，从而简化开发流程。</li></ul><p>通过结合 FastAPI 和 Docker，开发人员可以构建高性能和可扩展的 API，同时享受容器化带来的轻松部署、管理和可扩展性的优势。 在以下部分中，我们将探索使用 Docker 容器化 FastAPI 应用程序的分步过程。</p><h2 id="安装-docker" tabindex="-1">安装 Docker <a class="header-anchor" href="#安装-docker" aria-label="Permalink to &quot;安装 Docker&quot;">​</a></h2><p>访问 <a href="https://www.docker.com/products/docker-desktop/" target="_blank" rel="noreferrer">Docker 官方网站</a> 下载适用于您的特定操作系统的 Docker Desktop 安装程序， 运行并安装 Docker。</p><p><img src="'+l+`" alt=""></p><h3 id="docker-组件" tabindex="-1">Docker 组件 <a class="header-anchor" href="#docker-组件" aria-label="Permalink to &quot;Docker 组件&quot;">​</a></h3><p><strong>Docker Engine</strong> 是运行和管理Docker容器的核心运行时。它负责在主机上构建、运行和管理容器。Docker Engine 包含多个组件，例如：</p><ul><li><strong>Docker Daemon</strong>：Docker Daemon 是一个运行在主机上并管理容器生命周期的后台服务。它监听 Docker API 请求并处理容器操作，例如启动、停止和监视容器。</li><li><strong>Containerd</strong>：Containerd 是一个轻量级容器运行时，用于管理低级容器操作，包括图像处理、容器执行和存储。</li><li><strong>Docker CLI</strong>：Docker 命令行界面 (CLI) 是用于与 Docker 交互的命令行工具。它提供了一组命令来管理 Docker 映像、容器、网络、卷和其他 Docker 资源。</li><li><strong>Docker 镜像</strong>：Docker 镜像是一个只读模板，其中包含运行 Docker 容器所需的所有依赖项、配置和代码。镜像是使用 Dockerfile 构建的，它定义了创建镜像的指令。镜像存储在注册表中，例如 Docker Hub 或私有注册表，并且可以在任何 Docker 兼容的系统上拉取和运行。</li><li><strong>Docker 容器</strong>：Docker 容器是 Docker 映像的运行实例。容器是封装应用程序及其依赖项的隔离环境，确保不同环境之间的行为一致。每个容器作为一个独立的进程运行，并拥有自己的文件系统、网络和进程空间。</li><li><strong>Docker 注册表</strong>：Docker 注册表是存储 Docker 映像的存储库。最常用的注册表是 Docker Hub，它是一个托管大量 Docker 映像集合的公共注册表。您还可以设置私有注册表来安全地存储您的自定义 Docker 映像。</li></ul><p>通过了解这些基本的 Docker 组件并在您选择的平台上安装 Docker， 您将准备好容器化和部署 FastAPI 应用程序。在接下来的部分中， 我们将探讨如何使用 Docker 将 FastAPI 应用程序容器化，并利用其功能来轻松部署和管理。</p><h2 id="fastapi-项目" tabindex="-1">FastAPI 项目 <a class="header-anchor" href="#fastapi-项目" aria-label="Permalink to &quot;FastAPI 项目&quot;">​</a></h2><p>我们先看下项目目录：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">├──</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> Dockerfile</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">├──</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> README.md</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">├──</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> app</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">│</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">   ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> __init__.py</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">│</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">   ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> database.py</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">│</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">   ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> main.py</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">│</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">   ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> models</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">│</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">   ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> routers</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">│</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">   └──</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> service</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">├──</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> requirements.txt</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">└──</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> test_main.http</span></span></code></pre></div><p>app 是我们的项目代码文件。</p><p><code>app/__init__.py</code> 模块文件里面导入 app 对象。</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> .main </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> app</span></span></code></pre></div><p>而 <code>app</code> 在 <code>app/main.py</code> 中定义：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">app </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> FastAPI()</span></span></code></pre></div><p>其他的代码就不展示了，确认能运行：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> uvicorn app:app</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">INFO:</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">     Will</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> watch</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> for</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> changes</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> in</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> these</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> directories:</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> [</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;...&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">]</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">INFO:</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">     Uvicorn</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> running</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> on</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> http://127.0.0.1:8000</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (Press </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">CTRL+C</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> to</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> quit</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">INFO:</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">     Started</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> reloader</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> process</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> [40553] using StatReload</span></span></code></pre></div><p>开发阶段可以是用 <code>--reload</code> 参数自动加载：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">uvicorn</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> app:app</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> --reload</span></span></code></pre></div><h3 id="dockerfile" tabindex="-1">Dockerfile <a class="header-anchor" href="#dockerfile" aria-label="Permalink to &quot;Dockerfile&quot;">​</a></h3><p>然后编写 Dockerfile，文件内容就不介绍了，注释写的很详细。</p><div class="language-docker vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">docker</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"># 使用官方 Python 基础镜像</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> python:3.10-bookworm</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"># 设置容器内的工作目录</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">WORKDIR</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> /app</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"># 将需求文件复制到工作目录</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">COPY</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> requirements.txt .</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"># 安装 Python 依赖项</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">RUN</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> pip install --upgrade pip \\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    &amp;&amp; pip install -r requirements.txt</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"># 将应用程序代码复制到工作目录</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">COPY</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> ./app ./app</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"># 公开应用程序将运行的端口</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">EXPOSE</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> 8080</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"># 使用 uvicorn 服务器 CMD 运行 FastAPI 应用程序</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">CMD</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> [ </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;uvicorn&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> , </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;app:app&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> , </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;--host&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> , </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;0.0.0.0&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> , </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;--port&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> , </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;8080&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> ]</span></span></code></pre></div><p>最后使用 <code>docker build</code> 进行打包：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> build</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> -t</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> shuyi/app:latest</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> .</span></span></code></pre></div>`,35)]))}const y=i(k,[["render",h]]);export{D as __pageData,y as default};
