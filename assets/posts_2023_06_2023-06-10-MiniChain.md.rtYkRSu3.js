import{_ as i,a,af as n,o as h}from"./chunks/framework.C87LdZyP.js";const p="/assets/1924573309651958.B6NG8vlB.png",t="/assets/1925761036854708.Ciw_h1EK.png",l="/assets/1929305552872416.0zV-8un8.png",k="/assets/1927702689757083.SnozA2Po.png",D=JSON.parse('{"title":"受够了 LangChain 复杂接口？那就试试 MiniChain 这个极小对话框架","description":"","frontmatter":{"title":"受够了 LangChain 复杂接口？那就试试 MiniChain 这个极小对话框架","date":"2023-06-10T00:00:00.000Z","tags":["ai","ml"],"category":["AI"]},"headers":[],"relativePath":"posts/2023/06/2023-06-10-MiniChain.md","filePath":"posts/2023/06/2023-06-10-MiniChain.md","lastUpdated":1718173059000}'),e={name:"posts/2023/06/2023-06-10-MiniChain.md"};function d(r,s,F,g,y,o){return h(),a("div",null,s[0]||(s[0]=[n('<p>MiniChain 是一个用于使用大型语言模型进行编码的开源小型库。</p><p>这个轻量级的Python对话AI框架,专注于让任何人都可以快速上手创建对话机器人。 核心代码以及后端实现总共 500 多行代码。</p><p>几十这么 Mini ，也有自己的内部功能模块化设计思想，可以灵活组合和扩展不同模块。</p><p>废话不多说直接介绍功能。</p><h3 id="openai-调用" tabindex="-1">OpenAI 调用 <a class="header-anchor" href="#openai-调用" aria-label="Permalink to &quot;OpenAI 调用&quot;">​</a></h3><p><img src="'+p+`" alt=""></p><p>定义下面方法，输入一个单词，然后让 OpenAI 判断一下这是不是一个颜色：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">@prompt</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(OpenAI())</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> color_prompt</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(model, input):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> model(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">f</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;Answer &#39;Yes&#39; if this is a color, </span><span style="--shiki-light:#005CC5;--shiki-dark:#F47067;">{</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">input</span><span style="--shiki-light:#005CC5;--shiki-dark:#F47067;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">. Answer:&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span></code></pre></div><p>使用 run 方法测试执行下：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> color_prompt(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;blue&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">).run() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">==</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;Yes&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">    print</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;It&#39;s a color&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span></code></pre></div><p>就可以快乐的运行了。</p><h3 id="使用模板" tabindex="-1">使用模板 <a class="header-anchor" href="#使用模板" aria-label="Permalink to &quot;使用模板&quot;">​</a></h3><p>你在编写的时候可以使用 Jinja 语言的模板来格式化你的提示，这样就不用把提示和代码混在一起了。</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">@prompt</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(OpenAI(), </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">template_file</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;math.pmpt.tpl&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> math_prompt</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(model, question):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> model(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">dict</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">question</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">question))</span></span></code></pre></div><h3 id="可视化-ui" tabindex="-1">可视化 UI <a class="header-anchor" href="#可视化-ui" aria-label="Permalink to &quot;可视化 UI&quot;">​</a></h3><p>MiniChain 有一个内置的提示可视化系统，使用 Gradio. 如果您构造一个调用提示链的函数，您可以通过调用show和来可视化它。</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">show(math_demo,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">     examples</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">[&quot;What is the sum of the powers of 3 (3^i) that are smaller than 100?&quot;,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">              &quot;What is the sum of the 10 first positive integers?&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">     subprompts</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">[math_prompt,</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> python],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">     out_type</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;markdown&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">.queue</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">()</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">.launch</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">()</span></span></code></pre></div><h3 id="实现-memory" tabindex="-1">实现 Memory <a class="header-anchor" href="#实现-memory" aria-label="Permalink to &quot;实现 Memory&quot;">​</a></h3><p>MiniChain 并不构建显式的有状态内存类。可以使用队列快速的实现 Memory 的能力。</p><p><img src="`+t+`" alt=""></p><p>比如下面用简单的 List 来实现对话 Memory 功能。</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">@dataclass</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> State</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    memory: List[Tuple[</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">str</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">str</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">]]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    human_input: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">str</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> push</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(self, response: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">str</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) -&gt; </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;State&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        memory </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> self</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.memory </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">if</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> len</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">self</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.memory) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> MEMORY_LIMIT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> else</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> self</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.memory[</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> State(memory </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> [(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">self</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.human_input, response)])</span></span></code></pre></div><h3 id="工具和代理" tabindex="-1">工具和代理 <a class="header-anchor" href="#工具和代理" aria-label="Permalink to &quot;工具和代理&quot;">​</a></h3><p><img src="`+l+`" alt=""></p><p>MiniChain 同样不提供这样的概念，也不区分 LLM 和 Tools，所有你要知道的只是一个概念：后端。</p><ul><li>OpenAI 是一个后端，</li><li>Python 是一个后端，</li><li>Bash 是一个后端</li><li>...</li></ul><p>当然，你把他理解成 工具也行。</p><p>你可以简单的把想要接入的后端（工具），当做参数传入 prompt 注解即可。</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">@prompt</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">([Python(), Bash()])</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> math_prompt</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(model, input, lang):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> model(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">input</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">tool_num</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> lang </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">==</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;python&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> else</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span></code></pre></div><p>当然，实现自己的后端非常容易。</p><h2 id="例子" tabindex="-1">例子 <a class="header-anchor" href="#例子" aria-label="Permalink to &quot;例子&quot;">​</a></h2><p>最后跟大家一起看一下官方刚开始的例子，仔细看下执行和模板的过程：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> minichain </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> show, prompt, OpenAI, Python, GradioConf</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> gradio </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> gr</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">@prompt</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(OpenAI(), </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">template_file</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;math.pmpt.tpl&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">        gradio_conf</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">GradioConf(</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">block_input</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">gr.Markdown))</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> math_prompt</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(model, question):</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">    &quot;Prompt to call GPT with a Jinja template&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> model(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">dict</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">question</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">question))</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">@prompt</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(Python(), </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">template</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;import math</span><span style="--shiki-light:#005CC5;--shiki-dark:#F47067;">\\n{{</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">code</span><span style="--shiki-light:#005CC5;--shiki-dark:#F47067;">}}</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> python</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(model, code):</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">    &quot;Prompt to call Python interpreter&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    code </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#F47067;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.join(code.strip().split(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#F47067;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)[</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">])</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> model(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">dict</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">code</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">code))</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> math_demo</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(question):</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">    &quot;Chain them together&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> python(math_prompt(question))</span></span></code></pre></div><p>比如输入：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span>小于 100 的 3 (3^i) 次幂之和是多少？</span></span></code></pre></div><p>返回：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">55</span></span></code></pre></div><p>其内部的执行过程如下：</p><p><img src="`+k+`" alt=""></p><p>看明白了是对的 Prompt 工程实现很好的借鉴。</p><h3 id="具体执行分析" tabindex="-1">具体执行分析 <a class="header-anchor" href="#具体执行分析" aria-label="Permalink to &quot;具体执行分析&quot;">​</a></h3><p>先执行 <code>math_prompt</code>，</p><p>加载 <code>math.pmpt.tpl</code>，模板内容如下：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    #### Question:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">    *</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> What</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> is</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 37593</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> *</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> 67?</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    #### Code:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    </span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">    \`\`\`</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">python</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">    print</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">(37593 </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 67</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">)</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">    \`\`\`</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    #### Question:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">    *</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> Janet&#39;s ducks lay 16 eggs per day. She eats three for breakfast every morning and bakes muffins for her friends every day with four. She sells the remainder at the farmers&#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> market</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> daily</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> for</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;"> $2</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> per</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> fresh</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> duck</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> egg.</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> How</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> much</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> in</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> dollars</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> does</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> she</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> make</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> every</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> day</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> at</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> the</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> farmers&#39; market?</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">    </span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">    #### Code:</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">    </span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">    \`\`\`python</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">    print((16-3-4)*2)</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">    \`\`\`</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">    </span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">    #### Question:</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">    </span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">    * How many of the integers between 0 and 99 inclusive are divisible by 8?</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">    </span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">    #### Code:</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">    </span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">    \`\`\`python</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">    count = 0</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">    for i in range(0, 99+1):</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">        if i % 8 == 0: count += 1</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">    print(count)</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">    \`\`\`</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">    </span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">    #### Question:</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">    </span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">    * A robe takes 2 bolts of blue fiber and half that much white fiber. How many bolts in total does it take?</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">    </span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">    #### Code:</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">    </span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">    \`\`\`python</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">    print(2 + 2/2)</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">    \`\`\`</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">    </span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">    #### Question:</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">    </span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">    * {{question}}</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">    </span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">    #### Code:</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">    \`\`\`</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">    </span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">    Math </span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">    \`\`\`python</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">    {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">      &quot;string&quot;: &quot;\`\`\`python\\nprint(sum(range(1,11)))\\n\`\`\`&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">    }</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">    \`\`\`</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">    </span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">    \`\`\`shell</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">    #### Question:</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">    </span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">    * What is 37593 * 67?</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">    </span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">    #### Code:</span></span></code></pre></div><p>给 OpenAI 之后输出：</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#8DDB8C;">  &quot;string&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;\`\`\`python</span><span style="--shiki-light:#005CC5;--shiki-dark:#F47067;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">print(sum(range(1,11)))</span><span style="--shiki-light:#005CC5;--shiki-dark:#F47067;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">\`\`\`&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><p>然后把输出扔给 Python 后端执行：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> math</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">sum</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">range</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">11</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)))</span></span></code></pre></div><p>最终的返回</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">55</span></span></code></pre></div><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p>MiniChain 是一个很简单的项目，其设计思想和符合 AI 时代的 Prompt 工程和简化思想，比起 LangChain 的那么多概念，用着不要太爽。</p><p>如果早点儿看到 MiniChain，我可能都不会拿 LangChain 去写东西。就像之前以为国外网友说的那样，用 OpenAI 原生接口把 基于LangChain 的项目重写了， 发现最终工作量少了很多。</p><hr><div style="text-align:center;color:#00000099;font-size:14px;">END</div>`,55)]))}const C=i(e,[["render",d]]);export{D as __pageData,C as default};
