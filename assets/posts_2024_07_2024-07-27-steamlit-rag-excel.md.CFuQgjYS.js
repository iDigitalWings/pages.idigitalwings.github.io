import{_ as a,a as n,af as t,o as p}from"./chunks/framework.C87LdZyP.js";const s="/assets/15424576447541.D5yYM5AF.png",h="/assets/7825076462666.BJxqgRlX.png",l="/assets/8016024460125.CIzaoiV5.png",k="/assets/146346285005416.DXo2QkEH.png",e="/assets/146441538855291.C_ZQqOK7.png",d="/assets/9641208409541.rmgvOyLT.png",r="/assets/8467366062375.C3aR4Edh.png",g="/assets/8997759613333.CcDTjbJ1.png",y="/assets/8907596508291.DUohvmbS.png",o="/assets/9134522045166.GKNB5ufj.png",A="/assets/9261022492666.B8F2vrWE.png",c="/assets/9198678482958.CGtjESBw.png",F="/assets/9700585497750.ByANvaoz.png",D="/assets/10922546907166.BkpkpcVg.png",C="/assets/14183529346250.Bp9XnCcj.png",u="/assets/16118578064583.DRM1Eq3G.png",L=JSON.parse('{"title":"《AI打工摸鱼笔记》Streamlit + AnythingLLM + LM Studio","description":"","frontmatter":{"title":"《AI打工摸鱼笔记》Streamlit + AnythingLLM + LM Studio","date":"2024-07-27 10:00:00","tags":["llm-local-api","streamlit"],"category":["AI"]},"headers":[],"relativePath":"posts/2024/07/2024-07-27-steamlit-rag-excel.md","filePath":"posts/2024/07/2024-07-27-steamlit-rag-excel.md","lastUpdated":1722437170000}'),m={name:"posts/2024/07/2024-07-27-steamlit-rag-excel.md"};function B(E,i,b,v,_,x){return p(),n("div",null,i[0]||(i[0]=[t('<div class="admonition abstract"><p class="admonition-title">abstract</p><p>本文使用 Streamlit 工具配合 AnythingLLM 和 LM Studio 搭建的本地知识库， 上传 Excel 技术需求文件，从知识库获取信息自动回答（RAG），实时显示 LLM 输出，同时展示当前工作进度。</p></div><p>书接上文，今天继续完成自动填写技术调研表的下篇，高级版本的 AI 助理员工的实现。</p><ul><li>背景需求和设计思路（上篇）</li><li>Anything LLM 使用（上篇）</li><li>基础版AI员工（LM Studio + Anything LLM + 知识库）（上篇）</li><li>高级版AI员工（Streamlit 程序）「下篇」</li></ul><p>我们现在看下最终的效果：</p><p><img src="'+s+`" alt="最终的运行效果"></p><h2 id="前提" tabindex="-1">前提 <a class="header-anchor" href="#前提" aria-label="Permalink to &quot;前提&quot;">​</a></h2><p>首先我们要把 LM Studio 以及 AnythingLLM 运行和配置好，具体内容可以参考上一篇文章。</p><ul><li><a href="./2024-07-26-anything-llm">《AI打工摸鱼笔记》LLM+本地知识库自动填写售前技术调研表(上)</a></li></ul><h2 id="streamlit" tabindex="-1">Streamlit <a class="header-anchor" href="#streamlit" aria-label="Permalink to &quot;Streamlit&quot;">​</a></h2><p>Streamlit 是我们的老朋友了，是现在构建 AI 应用程序 UI 的最佳选择之一。</p><p>关于 Streamlit 的介绍和使用可以参考之前的文章：</p><ul><li>todo</li></ul><h3 id="安装" tabindex="-1">安装 <a class="header-anchor" href="#安装" aria-label="Permalink to &quot;安装&quot;">​</a></h3><p>如果还没有安装，我们使用 pip 安装一下 Streamlit。</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">pip</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> streamlit</span></span></code></pre></div><h3 id="标题" tabindex="-1">标题 <a class="header-anchor" href="#标题" aria-label="Permalink to &quot;标题&quot;">​</a></h3><p>首先给应用程序增加，标题我们可以使用 <code>st.title</code> 方法，</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">import</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> streamlit</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> as</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> st</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">st.set_page_config(layout</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">&quot;wide&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"># 设置页面宽度</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">st.title(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">&quot;RAG Excel&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span></code></pre></div><p><img src="`+h+`" alt="显示标题"></p><p>为了美观，我们使用图片来做标题：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">import</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> streamlit</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> as</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> st</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">st.set_page_config(layout</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">&quot;wide&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">h1,</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> h2</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> st.columns</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">([3,1])</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">with</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> h1:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">    st.image(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">&#39;./assets/shuyi-llm-1.png&#39;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> width=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">480</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">with</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> h2:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">    st.image(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">&#39;./assets/shuyi-llm-2.png&#39;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> width=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span></code></pre></div><p><img src="`+l+'" alt="程序标题"></p><h2 id="anythingllm-api-密钥" tabindex="-1">AnythingLLM API 密钥 <a class="header-anchor" href="#anythingllm-api-密钥" aria-label="Permalink to &quot;AnythingLLM API 密钥&quot;">​</a></h2><p>接下来为了调用 Anything LLM 来实现 RAG，需要获取 AnythingLLM 接口调用的密钥。</p><p>打开 Anything LLM 设置，选择「API密钥」，然后点击「生成」：</p><p><img src="'+k+'" alt="生成密钥"></p><p>复制生成的密钥。</p><p><img src="'+e+'" alt="生成的密钥"></p><p>我们可以在程序中把 密钥记录下来，</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">api_key </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &#39;6DDGHVK-C9Q44NT-NGMVN8H-QG3086Y&#39;</span></span></code></pre></div><p>但是更好的方式是在程序上让用户可以自己设置密钥，这样密钥变化的时候就不用修改程序，也降低了密钥泄露的风险。</p><p>我们使用一个密码框，来记录密钥，提供一个默认值，也可让用户更改：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">apikey </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> st.text_input(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;API KEY&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">type</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;password&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">api_key)</span></span></code></pre></div><p>效果如下：</p><p><img src="'+d+'" alt="兼容 OpenAI 的聊天接口"></p><h3 id="兼容-openapi" tabindex="-1">兼容 OpenAPI <a class="header-anchor" href="#兼容-openapi" aria-label="Permalink to &quot;兼容 OpenAPI&quot;">​</a></h3><p>我们知道 AnythingLLM 提供了兼容 OpenAI 的接口。</p><p>查看文档，可以看到其接口调用示例。</p><p><img src="'+r+'" alt=""></p><p>所需要的三个信息，除了 API Key，还有两个没确认：</p><ul><li>API Key</li><li>模型名称</li><li>URL</li></ul><h3 id="baseurl" tabindex="-1">BaseURL <a class="header-anchor" href="#baseurl" aria-label="Permalink to &quot;BaseURL&quot;">​</a></h3><p>如果是本机运行，兼容 OpenAI 接口的 BaseURL 是 ： <code>http://localhost:3001/api/v1/openai</code> ， 我们再程序中指定一下：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">openai_base_url </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;http://localhost:3001/api/v1/openai&quot;</span></span></code></pre></div><h3 id="获取模型-工作区" tabindex="-1">获取模型(工作区) <a class="header-anchor" href="#获取模型-工作区" aria-label="Permalink to &quot;获取模型(工作区)&quot;">​</a></h3><p>AnythingLLM 的工作区就是 OpenAI 接口要传的模型，有两种方法可以获取。</p><h4 id="anythingllm-管理-api" tabindex="-1">AnythingLLM 管理 API <a class="header-anchor" href="#anythingllm-管理-api" aria-label="Permalink to &quot;AnythingLLM 管理 API&quot;">​</a></h4><p>AnythingLLM 提供了一整套管理接口，能在 UI 上做的任何事情，也能通过接口完成。</p><p><img src="'+g+'" alt="AnythingLLM 接口"></p><p>当然也包含列出工作区的接口：</p><p><img src="'+y+`" alt="工作区列表接口"></p><p>我们通过 requests 模块发起请求来获取工作区列表：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">url </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &#39;http://127.0.0.1:3001/api/v1/workspaces&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">headers </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">    &#39;accept&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;application/json&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">    &#39;Authorization&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;Bearer &#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> apikey</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"># 发送GET请求</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">response </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> requests.get(url, </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">headers</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">headers)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> response.status_code </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 200</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    data </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> response.json()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    workspaces </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    for</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> workspace </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> data[</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;workspaces&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">]:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        workspaces[workspace[</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;slug&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">]] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> workspace[</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;name&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">]</span></span></code></pre></div><p>工作区列表接口返回了关于工作区很详细的信息：</p><p><img src="`+o+'" alt="获取工作区接口返回"></p><h4 id="使用-openai-api-获取模型" tabindex="-1">使用 OpenAI API 获取模型 <a class="header-anchor" href="#使用-openai-api-获取模型" aria-label="Permalink to &quot;使用 OpenAI API 获取模型&quot;">​</a></h4><p>OpenAI 的 API 有一个 <code>models</code> 接口来返回模型列表，Anything LLM 也支持了这个接口：</p><p><img src="'+A+`" alt="获取模型结果"></p><p>Python 程序调用也很简单：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">client</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> OpenAI</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    api_key</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">api_key,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    base_url</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">openai_base_url,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">client.models.list</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">()</span></span></code></pre></div><p>接口返回符合 OpenAI API 的规范：</p><p><img src="`+c+`" alt="获取模型接口返回结果"></p><h3 id="界面选择模型-工作区" tabindex="-1">界面选择模型（工作区） <a class="header-anchor" href="#界面选择模型-工作区" aria-label="Permalink to &quot;界面选择模型（工作区）&quot;">​</a></h3><p>我们在程序上提供一个用下拉列表选择模型的功能。</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">model </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> st.selectbox(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;Workspaces&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, workspaces.keys(), </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">format_func</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=lambda</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> x: workspaces[x])</span></span></code></pre></div><p>调整一下UI，把 API 和模型两个控件放到一行：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">col1, col2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> st.columns(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">apikey </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> col1.text_input(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;API KEY&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">type</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;password&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">api_key)</span></span></code></pre></div><p><img src="`+F+`" alt="获取工作区并下拉显示"></p><h3 id="文件上传" tabindex="-1">文件上传 <a class="header-anchor" href="#文件上传" aria-label="Permalink to &quot;文件上传&quot;">​</a></h3><p>然后我们创建一个文件上传按钮。</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">uploaded_file </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> st.file_uploader(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;上传 Excel 文件&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">type</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;xlsx&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span></code></pre></div><p>文件上传成功显示文件内容，显示的时候预留一部分区域给未来的 LLM 输出实时显示。</p><p>划分出「文件内容」和「LLM实时输出」的显示区域。</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">col_grid, col_reply </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> st.columns([</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">])</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">area_grid </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> col_grid.empty()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">area_reply </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> col_reply.empty()</span></span></code></pre></div><p>当文件上传的时候，显示文件内容：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> uploaded_file </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">is</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> not</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> None</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    df </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> get_df()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    area_grid.data_editor(df, </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">use_container_width</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">True</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span></code></pre></div><p>看看效果：</p><p><img src="`+D+`" alt="上传文件、显示文件内容"></p><h2 id="rag-调用" tabindex="-1">RAG 调用 <a class="header-anchor" href="#rag-调用" aria-label="Permalink to &quot;RAG 调用&quot;">​</a></h2><p>RAG 的调用也很简单，我们先写一个 Chat 函数：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> chat</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(model_select, prompt):</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">    print</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(prompt)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    chat_completion </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> client.chat.completions.create(</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">        messages</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">[</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">            {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">                &quot;role&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;user&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">                &quot;content&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: prompt,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        ],</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">        model</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">model_select,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">        temperature</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0.7</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">        stream</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">True</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    )</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    for</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> completion </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> chat_completion:</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">        print</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(completion.choices[</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">].delta.content)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">        yield</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> completion.choices[</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">].delta.content</span></span></code></pre></div><p>然后增加一个 「RAG」 的按钮：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">rag </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> st.button(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;RAG&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">use_container_width</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">True</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">type</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;primary&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span></code></pre></div><p>点击按钮的时候遍历数据，如果有描述那么针对描述做应答问答的生成， 同时在 LLM 应答区域实时输出 LLM &amp; RAG 应答结果。</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> rag:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    for</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> idx, row </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> df.iterrows():</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        condition </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> row[name_desc]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> condition </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">and</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> type</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(condition) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> str</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">            print</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;&gt;&gt;&gt;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, condition)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">            reply </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &#39;&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">            for</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> xx </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> chat(model, condition):</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">                reply </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> reply </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> xx</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">                area_reply.success(reply)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">            df.loc[idx, name_reply] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> reply</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">            processed.append(idx)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">            area_grid.dataframe(</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">use_container_width</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">True</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">df)</span></span></code></pre></div><p><img src="`+C+'" alt="实时显示 LLM 回复内容"></p><h2 id="文件保存" tabindex="-1">文件保存 <a class="header-anchor" href="#文件保存" aria-label="Permalink to &quot;文件保存&quot;">​</a></h2><p>为了避免 LLM 失败等异常，每次成功回答我们都保存一次文件：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">df.to_excel(uploaded_file.name.replace(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;.xlsx&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;_reply.xlsx&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">), </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">index</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">False</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span></code></pre></div><p>回答过程中搞得文件可能是这样的：</p><p><img src="'+u+`" alt="生成的EXCEL文件"></p><h2 id="显示进度" tabindex="-1">显示进度 <a class="header-anchor" href="#显示进度" aria-label="Permalink to &quot;显示进度&quot;">​</a></h2><p>功能实现了，不过由于整个文档的时间很长，我们看不到当前生成到哪条了，生成之后的结果也不能在界面上很方便地看到。</p><p>我们做一些优化，显示一下文档的进度：</p><ul><li>当前正在处理的行用黄色背景表示</li><li>已经处理成功的行用绿色背景表示</li></ul><p>使用 <code>df.style.apply</code> 方法来实现：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> row_bg</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(row):</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    index </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> row.name</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> index </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> idx:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> [</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;background-color: #ffffb8&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> len</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(row)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    elif</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> index </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> processed:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> [</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;background-color: #d9f7be&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> len</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(row)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    else</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> [</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> len</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(row)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">area_grid.dataframe(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    df.style.apply(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        row_bg, </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">subset</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(processed </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> [idx], </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">slice</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">None</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">),),</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">        axis</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    ),</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">    use_container_width</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">True</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span></code></pre></div><p>运行的效果如下：</p><p><img src="`+s+'" alt="最终的运行效果"></p><p>最后看一个完整的视频吧：</p><p><img src="'+s+'" alt="最终的运行效果"></p><p>!!! article 相关文章阅读</p><ul><li><a href="./2024-07-26-anything-llm">《AI打工摸鱼笔记》LLM+本地知识库自动填写售前技术调研表(上)</a></li><li><a href="./2024-07-25-lm-studio">本地 LLM 可视化工具 LM Studio 突破国内网络限制使用</a></li><li><a href="./../../2023/07/2023-07-03-streamlit-intro-all">Steamlit 教程：快速构建人工智能应用的神奇工具</a></li><li><a href="./../../2023/07/2023-07-04-streamlit-advanced">Streamlit 高级功能讲解并从头实现一个支持多会话的仿 ChatGPT 应用</a></li><li><a href="./../../2023/07/2023-07-05-streamlit-chatcsv">使用 Streamlit + PandasAI 和 Excel 进行数据问答和分析</a></li><li><a href="./../../2023/07/2023-07-07-streamlit-classfication">Streamlit+分类器分析『国外网友怎么看待苹果15发布会』</a> !!!</li></ul>',103)]))}const q=a(m,[["render",B]]);export{L as __pageData,q as default};
