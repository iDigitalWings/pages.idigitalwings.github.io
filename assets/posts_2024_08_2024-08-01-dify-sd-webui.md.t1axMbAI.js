import{_ as i,a,af as e,o as t}from"./chunks/framework.C87LdZyP.js";const p="/assets/124439226857875.DIfq2_my.png",l="/assets/124858935128375.s4gv8iAp.png",n="/assets/125955248955541.CUw1sg86.png",h="/assets/126358805525166.Dq0fvELw.png",o="/assets/127013036244333.CubMFmAY.png",d="/assets/127089510874583.CqJ8ZR1p.png",r="/assets/126669497268708.CmS35x8h.png",k="/assets/126881251011791.5rJ2Nv9E.png",c="/assets/127357638812375.C10lO0FL.png",g="/assets/127636579880625.Eizh6kf0.png",F="/assets/127766008546333.BF_rUy-N.png",y="/assets/127863982171166.C3ETL9Ck.png",u="/assets/127918370413750.By5mtnxa.png",b="/assets/127959994213916.B2B3NfPE.png",D="/assets/128386829789833.D7PIesRm.png",f="/assets/128700624312416.B8fN482p.png",m="/assets/128950162863500.CZ2_cw6s.png",C="/assets/129034395650708.DXj75720.png",v="/assets/129083126704000.rmWZWUAV.png",_="/assets/129137602927833.D7QM5H2v.png",A="/assets/129218442355166.DNt6ljn6.png",q="/assets/129703984171083.Bk5ENtko.png",x="/assets/129894643732833.CEA79Xbl.png",S="/assets/130387699497583.Djwrqm5_.png",E="/assets/130490214101791.CQ0kUPEU.png",P="/assets/130527669820541.DbXR8Sml.png",R=JSON.parse('{"title":"Dify+谷歌翻译 使用中文提示词实现本地文生图","description":"","frontmatter":{"title":"Dify+谷歌翻译 使用中文提示词实现本地文生图","date":"2024-08-01 10:00:00","tags":["dify","stable-diffusion"],"category":["AI"]},"headers":[],"relativePath":"posts/2024/08/2024-08-01-dify-sd-webui.md","filePath":"posts/2024/08/2024-08-01-dify-sd-webui.md","lastUpdated":1722849016000}'),I={name:"posts/2024/08/2024-08-01-dify-sd-webui.md"};function w(B,s,U,L,W,T){return t(),a("div",null,s[0]||(s[0]=[e(`<div class="admonition abstract"><p class="admonition-title">abstract</p><p>本文讲述如何使用 <code>Dify</code> + <code>Stable Diffusion Web UI</code> 配合<code>谷歌翻译</code>实现使用中文提示词进行本地图片生成。</p></div><p>文章主要内容：</p><ul><li>StableDiffusion WebUI 安装踩坑</li><li>Dify 安装使用</li><li>Dify 集成 Stable Diffusion WebUI 聊天生成图片</li></ul><h2 id="stable-diffusion-webui-安装" tabindex="-1">Stable Diffusion WebUI 安装 <a class="header-anchor" href="#stable-diffusion-webui-安装" aria-label="Permalink to &quot;Stable Diffusion WebUI 安装&quot;">​</a></h2><p>首先是 <a href="https://github.com/AUTOMATIC1111/stable-diffusion-webui" target="_blank" rel="noreferrer">Stable Diffusion WebUI</a> 的安装， <code>AUTOMATIC1111 / stable-diffusion-webui</code> 这个项目提供了各个平台的安装脚本，但是由于他的脚本使用了 <code>venv</code> 本地创建了一个 Python 虚拟环境，加之网络、证书等问题，还是出现了不少波折。</p><h3 id="苹果芯片" tabindex="-1">苹果芯片 <a class="header-anchor" href="#苹果芯片" aria-label="Permalink to &quot;苹果芯片&quot;">​</a></h3><p>我使用了 MacOS 系统（苹果的芯片），貌似比 Windows\\Linux 复杂些，作者专门写了个页面来说明：</p><p><a href="https://github.com/AUTOMATIC1111/stable-diffusion-webui/wiki/Installation-on-Apple-Silicon" target="_blank" rel="noreferrer">《Installation on Apple Silicon》</a></p><h3 id="基础库安装" tabindex="-1">基础库安装 <a class="header-anchor" href="#基础库安装" aria-label="Permalink to &quot;基础库安装&quot;">​</a></h3><p>安装一些 SD WebUI 环境需要的一些基础库</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">brew</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> cmake</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> protobuf</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> rust</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> python@3.10</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> wget</span></span></code></pre></div><h3 id="代码库下载" tabindex="-1">代码库下载 <a class="header-anchor" href="#代码库下载" aria-label="Permalink to &quot;代码库下载&quot;">​</a></h3><p>下载代码：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> clone</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> https://github.com/AUTOMATIC1111/stable-diffusion-webui</span></span></code></pre></div><p>然后进入目录：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> stable-diffusion-webui</span></span></code></pre></div><p>然后执行 <code>./webui.sh</code> 命令就好了。</p><p>执行过程中遇到了些问题，可能少部分人也会遇到。</p><h3 id="pip-ssl-certificate-error" tabindex="-1">Pip ssl certificate error <a class="header-anchor" href="#pip-ssl-certificate-error" aria-label="Permalink to &quot;Pip ssl certificate error&quot;">​</a></h3><p>在 SD WebUI 自己创建的环境中，执行 <code>pip install</code> 的时候说证书错误。</p><blockquote><p>WARNING: Retrying (Retry(total=0, connect=None, read=None, redirect=None, status=None)) after connection broken by &#39;SSLError(SSLCertVerificationError(1, &#39;[SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: unable to get local issuer certificate (_ssl.c:997)&#39;))&#39;: /simple/torch/ Could not fetch URL <a href="https://pypi.org/simple/torch/:" target="_blank" rel="noreferrer">https://pypi.org/simple/torch/:</a> There was a problem confirming the ssl certificate: HTTPSConnectionPool(host=&#39;pypi.org&#39;, port=443): Max retries exceeded with url: /simple/torch/ (Caused by SSLError(SSLCertVerificationError(1, &#39;[SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: unable to get local issuer certificate (_ssl.c:997)&#39;))) - skipping</p></blockquote><p>对于这个问题最简单的方案是让 <code>pip</code> 信任对应的站点。</p><p>可以修改 <code>webui-macos-env.sh</code> 文件，</p><p>增加 pip install 参数:</p><ul><li><code>--trusted-host pypi.org</code></li><li><code>--trusted-host files.pythonhosted.org</code></li></ul><p>修改后的命令如下：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">export</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> TORCH_COMMAND</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;pip install --trusted-host pypi.org --trusted-host files.pythonhosted.org torch==2.3.1 torchvision==0.18.1&quot;</span></span></code></pre></div><p>好处是执行 <code>pytorch</code> 安装成功了，不好的是还有别的安装失败了。</p><h3 id="github-网络问题" tabindex="-1">Github 网络问题 <a class="header-anchor" href="#github-网络问题" aria-label="Permalink to &quot;Github 网络问题&quot;">​</a></h3><p>WebUI 安装 <strong>clip</strong> 等包的时候要从 Github 上下载 Zip 包，网络的问题自然是下载失败了。</p><p>我的解决方案是，手动下载 Zip 包放到本地，然后修改环境变量：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">export</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> CLIP_PACKAGE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;--trusted-host pypi.org --trusted-host files.pythonhosted.org  ~/Downloads/CLIP-d50d76daa670286dd6cacf3bcd80b5e4823fc8e1.zip&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">export</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> OPENCLIP_PACKAGE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;--trusted-host pypi.org --trusted-host files.pythonhosted.org  ~/Downloads/open_clip-bb6e834e9c70d9c27d0dc3ecedeebeaeb1ffad6b.zip&quot;</span></span></code></pre></div><h3 id="pip-全局证书信任" tabindex="-1">Pip 全局证书信任 <a class="header-anchor" href="#pip-全局证书信任" aria-label="Permalink to &quot;Pip 全局证书信任&quot;">​</a></h3><p>后续其他包还有 SSL 证书不认的情况，我们可以把这个忽略SSL的指令加到全局。</p><p>执行 <code>pip config list -v</code> 查看 Pip 配置文件位置：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> pip config list -v</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">For</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> variant</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &#39;global&#39;,</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> will</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> try</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> loading</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &#39;/Library/Application Support/pip/pip.conf&#39;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">For</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> variant</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &#39;user&#39;,</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> will</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> try</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> loading</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &#39;/Users/shuyi/.pip/pip.conf&#39;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">For</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> variant</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &#39;user&#39;,</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> will</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> try</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> loading</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &#39;/Users/shuyi/.config/pip/pip.conf&#39;</span></span></code></pre></div><p>我们修改 <code>~/pip/pip.conf</code> 文件，信任这几个网址：</p><div class="language-ini vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ini</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">[global]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">trusted-host</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> = pypi.python.org</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">               pypi.org</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">               files.pythonhosted.org</span></span></code></pre></div><p>Linux 和 Windows 也可以这样修改哈，文件位置是：</p><ul><li>Unix - <code>$HOME/.config/pip/pip.conf</code></li><li>Windows - <code>%APPDATA%\\pip\\pip.ini</code></li></ul><p>接下来再执行启动命令：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">sh</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> webui-macos-env.sh</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">sh</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> webui.sh</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> --no-half</span></span></code></pre></div><p>系统会使用默认浏览器自动打开网址 <code>http://127.0.0.1:7860/</code> ，可以看到熟悉的界面了：</p><p><img src="`+p+'" alt=""></p><p>我们让它来画一只猫，提示就是简单的 <code>a cat</code>：</p><p><img src="'+l+`" alt=""></p><h3 id="api-模式运行" tabindex="-1">API 模式运行 <a class="header-anchor" href="#api-模式运行" aria-label="Permalink to &quot;API 模式运行&quot;">​</a></h3><p>如果要让 Dify 调用 SD Web UI ，必须让 SD Web UI 以 API 监听的模式运行，增加 <code>--api --listen</code> 参数：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">sh</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> webui-macos-env.sh</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">sh</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> webui.sh</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> --api</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> --listen</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> --no-half</span></span></code></pre></div><h2 id="dify-安装" tabindex="-1">Dify 安装 <a class="header-anchor" href="#dify-安装" aria-label="Permalink to &quot;Dify 安装&quot;">​</a></h2><p>Dify 支持本地源码运行、容器运行，之前使用源码运行，过了很长一段时间发现也没啥修改源码的地方，所以推荐搭建全部用 容器运行。</p><p>我们可以参考 <a href="https://docs.dify.ai/getting-started/install-self-hosted/docker-compose" target="_blank" rel="noreferrer">Dify 容器部署文档</a> 来部署。</p><h3 id="克隆项目" tabindex="-1">克隆项目 <a class="header-anchor" href="#克隆项目" aria-label="Permalink to &quot;克隆项目&quot;">​</a></h3><p>首先克隆项目：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> clone</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> https://github.com/langgenius/dify.git</span></span></code></pre></div><h3 id="复制修改环境变量" tabindex="-1">复制修改环境变量 <a class="header-anchor" href="#复制修改环境变量" aria-label="Permalink to &quot;复制修改环境变量&quot;">​</a></h3><p>进入目录复制 ENV 环境变量：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> dify/docker</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">cp</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> .env.example</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> .env</span></span></code></pre></div><p>如果要修改环境变量，可以修改 <code>.env</code> 文件，比如：</p><ul><li>开启调试</li><li>服务端口</li><li>服务地址等等</li></ul><h3 id="启动-dify-容器" tabindex="-1">启动 Dify 容器 <a class="header-anchor" href="#启动-dify-容器" aria-label="Permalink to &quot;启动 Dify 容器&quot;">​</a></h3><p>使用 Compose 服务启动中间件和 Dify 服务：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> compose</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> up</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> -d</span></span></code></pre></div><p>可以看到一共有如下容器启动：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">[+] Running 11/11</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> ✔</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> Network</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> docker_ssrf_proxy_network</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> ✔</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> Network</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> docker_default</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">             </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> ✔</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> Container</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> docker-redis-1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">           </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> ✔</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> Container</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> docker-ssrf_proxy-1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">      </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> ✔</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> Container</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> docker-sandbox-1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">         </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> ✔</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> Container</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> docker-web-1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">             </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> ✔</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> Container</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> docker-weaviate-1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> ✔</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> Container</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> docker-db-1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">              </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> ✔</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> Container</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> docker-api-1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">             </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> ✔</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> Container</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> docker-worker-1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">          </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> ✔</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> Container</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> docker-nginx-1</span></span></code></pre></div><h3 id="访问-dify" tabindex="-1">访问 Dify <a class="header-anchor" href="#访问-dify" aria-label="Permalink to &quot;访问 Dify&quot;">​</a></h3><p>启动成功， 访问 <code>http://localhost</code>，设置完用户密码，即可看到 Dify 的界面了：</p><p><img src="`+n+`" alt=""></p><div class="admonition note"><p class="admonition-title">Dify 端口号</p><p>Dify Compose 默认端口是 80，如果希望使用别的端口运行，可以修改 <code>.env</code> 中的端口号<code>NGINX_PORT=80</code>。</p></div><h3 id="更新项目" tabindex="-1">更新项目 <a class="header-anchor" href="#更新项目" aria-label="Permalink to &quot;更新项目&quot;">​</a></h3><p>如果要更新 Dify，也很简单，停止容器、更新代码、重新启动即可。</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> dify/docker</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> compose</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> down</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> pull</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> origin</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> main</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> compose</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> pull</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> compose</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> up</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> -d</span></span></code></pre></div><h2 id="集成-stable-diffusion-工具" tabindex="-1">集成 Stable Diffusion 工具 <a class="header-anchor" href="#集成-stable-diffusion-工具" aria-label="Permalink to &quot;集成 Stable Diffusion 工具&quot;">​</a></h2><p>前面我们已经将 Stable Diffusion Web UI 使用 API 模式运行起来了，可以在 Dify 工具中直接配置即可。 Dify 也提供了 <a href="https://docs.dify.ai/guides/tools/tool-configuration/stable-diffusion" target="_blank" rel="noreferrer">SD 集成文档</a>，大家有兴趣可以查看。</p><p>点击 Dify 的工具<code>Tools</code> 页签，打开工具页面，搜索 <code>stable</code>，选择 <code>Stable Diffusion</code>：</p><p><img src="`+h+'" alt="Dify 选择 Stable Diffusion 工具"></p><p>然后点击 <code>To Authorize</code> 按钮进行认证：</p><p><img src="'+o+'" alt=""></p><p>有两个参数 <code>Base URL</code> 和 <code>Model</code>：</p><p><img src="'+d+'" alt=""></p><p>由于 Dify 是在容器中运行，Base URL 不能填写 <code>localhost</code>，Docker 提供了主机名<code>host.docker.internal</code> 来代替宿主机地址。 我们填写：</p><ul><li><code>http://host.docker.internal:7860</code></li></ul><p>接下来是模型名称， 模型列表可以浏览器访问如下网址获得：</p><ul><li><code>http://127.0.0.1:7860/sdapi/v1/sd-models</code></li></ul><p>格式化之后，可以清楚看到模型名称，</p><p><img src="'+r+'" alt=""></p><p>为了方便起见，我写个命令给大家获取模型名称，执行下面命令，</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">curl</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> http://127.0.0.1:7860/sdapi/v1/sd-models</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> python</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> -m</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> json.tool</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> grep</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> model_name</span></span></code></pre></div><p>可以直接提取到模型名称：</p><p><img src="'+k+'" alt=""></p><p>挑选一个我们喜欢的 模型，填入即可，比如：</p><p><code>realisticVisionV20_v20</code></p><p>点击确定，可以看到认证成功：</p><p><img src="'+c+'" alt="Dify Stable Diffusion 工具认证成功"></p><h2 id="创建应用" tabindex="-1">创建应用 <a class="header-anchor" href="#创建应用" aria-label="Permalink to &quot;创建应用&quot;">​</a></h2><p>接下来我们来创建应用：</p><ul><li>点击 <code>Studio</code> 进入应用页面</li><li>点击 <code>Create from Blank</code> 创建一个空白应用</li><li>选择<code>Chatbot</code> 和 <code>Chatflow</code></li><li>选择应用图标，填写应用名称</li><li>点击创建</li></ul><p><img src="'+g+'" alt="从空白创建应用"></p><p>在工作区中点击右键，选择<code>添加块</code>，</p><p><img src="'+F+'" alt=""></p><p>然后搜索选择 <code>Stable Diffusion WebUI</code> 工具：</p><p><img src="'+y+'" alt="Stable Diffusion WebUI 工具"></p><p>把开始节点连接到 WebUI 工具：</p><p><img src="'+u+'" alt="开始节点连接到 WebUI 工具"></p><p>点击 WebUI 工具进行设置，Prompt 输入框输入 <code>/</code> 可以选择变量，我们选择 <code>sys.query</code> 作为提示词：</p><p><img src="'+b+'" alt=""></p><div class="admonition note"><p class="admonition-title">sys.query</p><p><code>sys.query</code> 就是聊天时用户输入的提示词。 每一个工具节点都有相应的输入和输出，会在变量列表中分类显示。</p></div><p>为了快速验证，我们把图片的 宽度和高度 都改成 512，这样绘图的时间不会太长。</p><p>然后选择默认生成的 <code>LLM</code> 节点，按 <strong>DEL</strong> 键删掉，查新连线如下图：</p><p><img src="'+D+'" alt=""></p><p>选中最后一个 「回答」 节点，设置回答内容内 <code>files</code>：</p><p><img src="'+f+'" alt="选择 SD WebUI 文件输出"></p><p>点击预览按钮进行测试，在聊天输入框中输入 <code>a tiger</code> 发送消息， 过一会可以看到 应用返回了一张老虎图片：</p><p><img src="'+m+'" alt="测试提示词绘画功能"></p><h2 id="翻译" tabindex="-1">翻译 <a class="header-anchor" href="#翻译" aria-label="Permalink to &quot;翻译&quot;">​</a></h2><p>同样的方法，我们在画布右击，选择 <code>谷歌翻译</code> 这个工具，添加到画布上：</p><p><img src="'+C+'" alt="添加翻译工具"></p><p>重新连线如下：</p><p><img src="'+v+'" alt=""></p><p>设置翻译工具的内容为 <code>sys.query</code>，目标语言为 <code>English</code>，</p><p><img src="'+_+'" alt=""></p><p>调整 Stable diffusion WebUI 工具的提示词为 <code>Translate / {x} text</code>：</p><p><img src="'+A+'" alt=""></p><p>下面我们写一个复杂一些的提示：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span>一大群人举着巴勒斯坦旗帜和气球，自由巴勒斯坦，</span></span></code></pre></div><p>应用也给出了可用的图片：</p><p><img src="'+q+'" alt="通过翻译正常生成图片"></p><h2 id="翻译的必要性" tabindex="-1">翻译的必要性 <a class="header-anchor" href="#翻译的必要性" aria-label="Permalink to &quot;翻译的必要性&quot;">​</a></h2><p>前面我没有讲到绘画时翻译的必要性。</p><p>Stable Diffusion 是可以理解简单的中文的，但是仅仅限于简单简单的词语，比如<code>一只猫</code>，<code>老虎</code> 等单个词语，</p><p>如果是一个句子，Stable Diffusion 就理解不了，比如我们上面的那句话，如果直接发送给 SD，结果可能很随机：</p><p><img src="'+x+'" alt="中文提示词效果不佳"></p><p>所以使用 Stable Diffusion 还是要英文提示词，所以我们在英文不好的时候，通过翻译自动翻译给 StableDiffusion 还是很有必要的。</p><p>翻译之后，虽然说不上多专业，但是一些普通的使用还是可以满足的。</p><h2 id="发布" tabindex="-1">发布 <a class="header-anchor" href="#发布" aria-label="Permalink to &quot;发布&quot;">​</a></h2><p>一切就绪，我们来发布应用。</p><p>点击发布按钮，在弹框中点击「发布」或「更新」即可：</p><p><img src="'+S+'" alt="发布应用"></p><h2 id="使用" tabindex="-1">使用 <a class="header-anchor" href="#使用" aria-label="Permalink to &quot;使用&quot;">​</a></h2><p>我们点击 <code>Explore</code> 或者 Dify Logo 回到首页，都可以看到我们刚刚创建的应用：</p><p><img src="'+E+'" alt="浏览应用列表"></p><p>点击应用然后开始聊天吧：</p><p><img src="'+P+'" alt="开始聊天"></p><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p>Dify 提示了众多的工具让我们使用，我们可以通过流程编排来实现一些工具的串联， 这样的话如果没有额外逻辑我们就不需要编写代码了，可以节省很大工作量。</p><p>如果有额外的需求，我们也可以编写服务，然后使用自定义工具的方式来实现，这个咱们下期再讲。</p>',146)]))}const M=i(I,[["render",w]]);export{R as __pageData,M as default};
