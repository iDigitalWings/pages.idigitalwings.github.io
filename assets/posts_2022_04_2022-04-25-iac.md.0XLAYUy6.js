import{_ as l,a as i,af as r,o as e}from"./chunks/framework.C87LdZyP.js";const o="/assets/img.CKE7xvSb.png",m=JSON.parse('{"title":"基础设施代码化（IaC）的自动化配置与编（阿里云社区）","description":"","frontmatter":{"title":"基础设施代码化（IaC）的自动化配置与编（阿里云社区）","date":"2022-04-25T00:00:00.000Z","tags":["IaC"],"category":["运维"]},"headers":[],"relativePath":"posts/2022/04/2022-04-25-iac.md","filePath":"posts/2022/04/2022-04-25-iac.md","lastUpdated":1718173059000}'),t={name:"posts/2022/04/2022-04-25-iac.md"};function u(s,a,c,h,n,d){return e(),i("div",null,a[0]||(a[0]=[r('<p>云上运维涉及的一系列资源部署。比如</p><ul><li>简单地使用一台云服务器 <ul><li>依次创建 VPC、VSwitch、安全组和云服务器实例，</li></ul></li><li>如果想创建一个集群 <ul><li>进一步创建负载均衡、数据库和多个云服务器实例</li></ul></li></ul><p>随着业务规模的不断扩大，IT 系统和环境日益复杂，人工一个一个创建资源的方式显然不可取，许多人正在转向自动化资源部署和配置的工具。</p><h2 id="手动运维痛点" tabindex="-1">手动运维痛点 <a class="header-anchor" href="#手动运维痛点" aria-label="Permalink to &quot;手动运维痛点&quot;">​</a></h2><ul><li>部署效率低。 <ul><li>手动创建对于创建少量种类的资源来说倒是种很直观的方式，但一旦涉及到大量不同资源时，尤其是资源之间还有依赖关系，这时候会发现需要在不同的产品控制台之间来回切换，还要时刻关注创建进度，才能再去创建下一个依赖它的资源，整个过程所耗费的时间和精力可想而知，相信不少人有深有体会。</li></ul></li><li>可复制性差。 <ul><li>当手动创建好了一系列的资源后，如果需要针对不同的环境（如预发、测试和生产）或不同的地域（如北京和上海）创建完全相同的资源，则又需要花费很多时间一步步地进行操作，无法直接复制、做到一键部署。</li></ul></li><li>一致性差。 <ul><li>手动创建还有一个非常大的问题，那就是非常容易出现配置错误，很难保证两套环境中各个资源配置是完全相同的。</li></ul></li><li>管理困难。 <ul><li>资源的创建只是开始，可能还需要针对这批资源做扩缩容、更新特定资源的规格等操作。但手动运维的方式就导致没有统一管理这批资源的入口，仍需要分别到各产品控制台上操作。随着资源数越来越多，资源管理就愈发难以维护。</li></ul></li><li>难以 DevOps。 <ul><li>每次开发、测试或部署软件应用程序时都可能需要手动部署基础设施，既无法对基础设施进行版本控制，也无法对其变动进行评审，更无法做到敏捷部署。</li></ul></li></ul><h2 id="引入基础设施即代码-iac-理念-实现云上资源自动化部署" tabindex="-1">引入基础设施即代码 IaC 理念，实现云上资源自动化部署 <a class="header-anchor" href="#引入基础设施即代码-iac-理念-实现云上资源自动化部署" aria-label="Permalink to &quot;引入基础设施即代码 IaC 理念，实现云上资源自动化部署&quot;">​</a></h2><p>基础设施即代码（Infrastructure as Code, IaC）的理念，将基础设施配置视为软件编程。 Kief Morris 在《Infarftruce as Code》一书中对基础设施即代码是这么定义的：</p><blockquote><p>『基础设施即代码是一种使用新的技术来构建和管理动态基础设施的方式。 它把基础设施、工具和服务以及对基础设施的管理本身作为一个软件系统， 采纳软件工程实践以结构化的安全的方式来管理对系统的变更。』</p></blockquote><p>引入 IaC 的理念，运维人员可以将基础设施的部署和管理过程变得敏捷：</p><ul><li>在模板（宽泛意义上的代码）中定义基础设施，即各类云资源及其规格、数量等属性、云资源之间的依赖；</li><li>使用版本控制（如 Git）管理模板，并提交评审；</li><li>通过评审后由自动化部署工具使用模板来创建/更新基础设施。</li></ul><p>基础设施的部署和管理变得便捷后，上述提到的手动运维/半手动运维的痛点问题就能得到很好的解决：</p><ul><li>提升部署效率。使用自动化部署工具进行部署，相对于人工部署的效率将大大提升。</li><li>标准化和一致性。将基础设施的内容通过模板的形式保存，对基础设施的变更由对模板的变更来实现，实现了基础设施管理的标准化。此外，使用相同的模板在不同地域部署，也能够保证资源的一致性。</li><li>易于管理。对基础设施的管理不再分散于各个产品控制台，而统一到单个模板，使得管理成本大大降低。</li><li>敏捷化工作流程。通过基础设施管理流程的规范化和标准化，资源部署的整个过程就变得敏捷。</li><li>审计和回滚。对模板进行版本管理，使得对基础设施变动的审计和回退到某个特定版本成为了可能。</li></ul><h2 id="四个常见的-iac-自动化配置与编排工具" tabindex="-1">四个常见的 IaC 自动化配置与编排工具 <a class="header-anchor" href="#四个常见的-iac-自动化配置与编排工具" aria-label="Permalink to &quot;四个常见的 IaC 自动化配置与编排工具&quot;">​</a></h2><h3 id="阿里云资源编排服务-ros-resource-orchestration-service" tabindex="-1">阿里云资源编排服务 ROS（Resource Orchestration Service） <a class="header-anchor" href="#阿里云资源编排服务-ros-resource-orchestration-service" aria-label="Permalink to &quot;阿里云资源编排服务 ROS（Resource Orchestration Service）&quot;">​</a></h3><p>这是云原生编排工具，通过编写 JSON/YAML 格式的模板， 在模板中定义所需的ECS实例、数据库实例等云服务资源以及资源依赖关系等， 然后再根据模板在 ROS 中创建资源栈，ROS 服务端将根据模板自动完成所有资源的创建和配置， 实现自动化部署及运维。而资源栈则管理着模板中定义的所有资源， 并可通过新模板来更新资源栈，包括资源的新增、更新或删除等操作。</p><h3 id="aws-cloudformation" tabindex="-1">AWS CloudFormation <a class="header-anchor" href="#aws-cloudformation" aria-label="Permalink to &quot;AWS CloudFormation&quot;">​</a></h3><p>也是云原生的编排工具，运维人员也是通过 JSON/YAML 格式的模板定义云服务资源，通过资源栈管理这些资源。</p><h3 id="hashicorp-terraform" tabindex="-1">HashiCorp Terraform <a class="header-anchor" href="#hashicorp-terraform" aria-label="Permalink to &quot;HashiCorp Terraform&quot;">​</a></h3><p>这是一个开源的自动化编排工具。以配置文件为驱动，可以在文件中定义所要管理的组件， 即基础设施资源，以此生成一个可执行的计划，通过执行这个计划来完成所定义组件的创建， 增量式的变更和持续的管理。如果不可执行，会提示报错。Terraform 不仅可以管理IaaS层的资源， 如计算实例、网络实例和存储实例等，也可以管理更上层的服务，如DNS 域名和解析记录、SaaS 应用的功能等。</p><h3 id="pulumi" tabindex="-1">Pulumi <a class="header-anchor" href="#pulumi" aria-label="Permalink to &quot;Pulumi&quot;">​</a></h3><p>与 Terraform 一样也是开源项目，但它与 Terraform 的重要区别在于： 可以用熟悉的编程语言来编写声明式配置，而不需要额外学习云服务商特定的模板语言来写配置。</p><h2 id="自动化配置与编排工具的选择" tabindex="-1">自动化配置与编排工具的选择 <a class="header-anchor" href="#自动化配置与编排工具的选择" aria-label="Permalink to &quot;自动化配置与编排工具的选择&quot;">​</a></h2><ul><li>如果你的业务部署在单一云平台，就选择云平台提供的资源编排工具，在阿里云平台就用 ROS、在 AWS 平台就用 CloudFormation，原因很简单：云平台提供的工具是云原生，是免费的托管服务，在服务端就可以执行自动化部署；同时，它还实现了云原生的访问控制、编排资源与实际资源差异检测等功能，用起来比较省心。</li><li>如果你的业务是部署在多个云平台，建议使用第三方的 Terraform 和 Pulumi，因为它不仅可以进行多云资源的部署和管理，还能管理除云以外的其他资源，如 Kubernetes。</li></ul><h2 id="编写模板的注意事项" tabindex="-1">编写模板的注意事项 <a class="header-anchor" href="#编写模板的注意事项" aria-label="Permalink to &quot;编写模板的注意事项&quot;">​</a></h2><ul><li>注意资源的依赖关系。不恰当的依赖或少了依赖都会导致资源创建出错。</li><li>注意使用通用属性作为参数。比如实例规格等就是比较通用的属性，建议使用同一份模板，指定不同的参数来达到部署不同规格实例的目的。</li><li>使用有价值的属性作为输出。比如实例 ID、连接地址等内容就是有价值的属性，它们都是在资源创建完成后才能获取到，把这些属性作为整个模板的输出，可以方便后续的查看和管理。</li></ul><h2 id="自动解析依赖关系-自动化部署基础设施" tabindex="-1">自动解析依赖关系，自动化部署基础设施 <a class="header-anchor" href="#自动解析依赖关系-自动化部署基础设施" aria-label="Permalink to &quot;自动解析依赖关系，自动化部署基础设施&quot;">​</a></h2><p>编写完模板后，就可以通过对应的自动化部署工具将模板转化为真正的资源。上述提到的编排工具都能解析资源的依赖关系，并能先后创建这些资源。同时，对于互不依赖的资源也能够并行创建。</p><ul><li>对于阿里云 ROS 和 AWS CloudFormation 来说，可使用模板来创建一个资源栈。一个资源栈即一组云上资源，也就是在模板中定义的基础设施。后续当需要增/删/改一些资源时，也是通过使用模板来更新资源栈来达到目的。</li><li>对于 Terraform 来说，可使用配置文件生成一个可执行的计划，通过执行这个计划来完成所定义资源/组件的创建，增量式的变更和持续的管理。</li><li>对于 Pulumi 来说，则是直接执行代码来进行部署。这样的部署方式既能使得资源能按照合理的顺序创建出来，又能够提升部署效率，在遇到异常情况时也会进行一定程度的重试，真正让整个自动化部署过程变得稳定和高效。</li></ul><p><img src="'+o+'" alt=""></p><hr><ul><li><a href="https://developer.aliyun.com/article/782455" target="_blank" rel="noreferrer">https://developer.aliyun.com/article/782455</a></li></ul>',31)]))}const f=l(t,[["render",u]]);export{m as __pageData,f as default};
