import{_ as i,a,af as n,o as l}from"./chunks/framework.C87LdZyP.js";const h="/assets/250542994384708.BYxXot-i.png",p="/assets/252429022884916.C7IfSnHl.png",t="/assets/252341442229000.CnU-Ijfq.png",e="/assets/253048319238500.CdQf1Oot.png",k="/assets/253075302899333.BDi1mUK9.png",r="/assets/253302167960875.C-DuC1gP.png",d="/assets/253337965242666.BtfEL5MP.png",g="/assets/254340177517916.jeiEdTQ-.png",y="/assets/258223234451125.lOY6P47R.png",F="/assets/258279627246125.GPf83M4J.png",o="/assets/259896051587000.DnjnsSnP.png",D="/assets/260033621902416.Ra169Yas.png",c="/assets/260205584915375.CiF0NA97.png",A="/assets/260333214810541.CoiypvkP.png",C="/assets/260415844529500.CDHZM9bZ.png",q=JSON.parse('{"title":"扩展 Dify 内置工具集，打造自己独有的 AI Agent 工作站","description":"","frontmatter":{"title":"扩展 Dify 内置工具集，打造自己独有的 AI Agent 工作站","date":"2024-08-06 10:00:00","tags":["ai-agent","dify"],"category":["AI"]},"headers":[],"relativePath":"posts/2024/08/2024-08-06-dify-buildin-tools.md","filePath":"posts/2024/08/2024-08-06-dify-buildin-tools.md","lastUpdated":1723105119000}'),u={name:"posts/2024/08/2024-08-06-dify-buildin-tools.md"};function B(m,s,_,b,E,f){return l(),a("div",null,s[0]||(s[0]=[n('<div class="admonition abstract"><p class="admonition-title">abstract</p><p>使用 Python 代码扩展 Dify 的内置工具集，打造自己独有的 AI 工作站。</p></div><p>Dify 提供了很多的内置工具，让我们在创建 Agent 的时候可以做更多的事情。 看着琳琅满目的工具，我们是不是也想接入自己独特的工具呢？</p><p><img src="'+h+'" alt="Dify 默认工具集"></p><p>今天演示下如何构建自己的工具并添加到 Dify 内置工具集里面。</p><p><img src="'+p+'" alt="扩展内置厂商和工具"></p><p>!!! explain 文章源码 为了方便大家自己本地测试，我将项目代码上传了 Github，大家有需要的可以去下载代码：</p><p><a href="https://github.com/iDigitalWings/dify_custom_tools" target="_blank" rel="noreferrer">https://github.com/iDigitalWings/dify_custom_tools</a> !!!</p><h2 id="运行-dify" tabindex="-1">运行 Dify <a class="header-anchor" href="#运行-dify" aria-label="Permalink to &quot;运行 Dify&quot;">​</a></h2><p>如何运行 Dify（源码和容器运行）我这里就不赘述了，大家可以参考前面这两篇文章：</p><ul><li><a href="./2024-08-02-dify-api-extension">Dify + FastAPI 创建自定义工具</a></li><li><a href="./2024-08-01-dify-sd-webui">Dify+谷歌翻译 使用中文提示词实现本地文生图</a></li></ul><h2 id="扩展工具" tabindex="-1">扩展工具 <a class="header-anchor" href="#扩展工具" aria-label="Permalink to &quot;扩展工具&quot;">​</a></h2><h3 id="厂商-供应商-和工具" tabindex="-1">厂商（供应商）和工具 <a class="header-anchor" href="#厂商-供应商-和工具" aria-label="Permalink to &quot;厂商（供应商）和工具&quot;">​</a></h3><p>首先我们了解下 Dify 内置工具的两个概念：<code>厂商</code> 和 <code>工具</code>。</p><p>你要扩展工具的话，首先要注册一个厂商，一个厂商下面可以有多个工具，在你选择工具的时候，工具会按照厂商分组。</p><p><img src="'+t+`" alt="工具按厂商分组展示"></p><h3 id="扩展方式" tabindex="-1">扩展方式 <a class="header-anchor" href="#扩展方式" aria-label="Permalink to &quot;扩展方式&quot;">​</a></h3><p>扩展 Dify 工具和厂商分了两部分：</p><ul><li>使用 <code>yaml</code> 文件描述其参数的功能</li><li>使用 <code>python</code> 文件编写厂商注册函数和工具实现</li></ul><p>不如定义了两个工具，最终的目录结构大概是这样：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">├──</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> _assets</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">│  </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> └──</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> icon.svg</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">├──</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> shuyi.py</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">├──</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> shuyi.yaml</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">└──</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> tools</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">    ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> shuyi_excel.py</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">    ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> shuyi_excel.yaml</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">    ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> shuyi_test.py</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">    └──</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> shuyi_test.yaml</span></span></code></pre></div><h2 id="定义厂商" tabindex="-1">定义厂商 <a class="header-anchor" href="#定义厂商" aria-label="Permalink to &quot;定义厂商&quot;">​</a></h2><h3 id="厂商定义-yaml" tabindex="-1">厂商定义 yaml <a class="header-anchor" href="#厂商定义-yaml" aria-label="Permalink to &quot;厂商定义 yaml&quot;">​</a></h3><p>这个 yaml 将包含工具供应商的信息，包括供应商名称、图标、作者等详细信息，以帮助前端灵活展示。</p><p>在 <code>core/tools/provider/builtin</code> 目录下创建一个文件夹，比如 <code>shuyi</code>，然后软件 <code>shuyi.yaml</code>。</p><p>在文件里面增加关于工具的描述、以及展示的图标。</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">identity:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">  author:</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> Shuyi</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">  name:</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> shuyi</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">  label:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">    en_US:</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> Shuyi</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">    zh_Hans:</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> 数翼</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">    pt_BR:</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> Shuyi</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">  description:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">    en_US:</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> Shuyi</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> tools</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">    zh_Hans:</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> 数翼自定义工具集</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">    pt_BR:</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> Shuyi</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> tools</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">  icon:</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> icon.svg</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">  tags:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">    -</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> search</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">    -</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> productivity</span></span></code></pre></div><h4 id="授权定义" tabindex="-1">授权定义 <a class="header-anchor" href="#授权定义" aria-label="Permalink to &quot;授权定义&quot;">​</a></h4><p>如果工具需要授权，那么我们还需要定义<strong>授权参数</strong>。</p><p>授权一般都是填写这个工具的密钥（API Key），比如谷歌搜索、DALL-E 绘画，通过授权可以完成工具的安全调用。</p><p>如果配置了授权在工具详情就会出现一个授权按钮：</p><p><img src="`+e+'" alt=""></p><p>点击可以看到授权参数的填写：</p><p><img src="'+k+`" alt=""></p><p>我们自定义工具增加两个授权参数：</p><ul><li>服务器地址：我们自己部署服务的地址</li><li>API Key：用于验证调用的合法性</li></ul><p>定义授权参数 <code>shuyi_api_key</code> 和 <code>shuyi_api_url</code>，表单类型分别是<code>secret-input</code>和<code>text-input</code>。Yaml 增加如下内容：</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">credentials_for_provider</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">  shuyi_api_key</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">    type</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">secret-input</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">    required</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">true</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">    default</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;123456&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">    label</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      en_US</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">Shuyi API key</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      zh_Hans</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">Shuyi API key</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      pt_BR</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">Shuyi API key</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">    placeholder</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      en_US</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">Please input your Shuyi API key</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      zh_Hans</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">请输入你的 Shuyi API key</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      pt_BR</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">Please input your Shuyi API key</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">    help</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      en_US</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">Get your Shuyi API key from Shuyi</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      zh_Hans</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">从 Shuyi 获取您的 Shuyi API key</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      pt_BR</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">Get your Shuyi API key from Shuyi</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">    url</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">https://blog.tupu.work/</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">  shuyi_api_url</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">    type</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">text-input</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">    required</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">true</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">    default</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">http://localhost:8000</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">    label</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      en_US</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">Shuyi API url</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      zh_Hans</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">Shuyi API 地址</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      pt_BR</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">Shuyi API url</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">    placeholder</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      en_US</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">Please input your Shuyi API url</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      zh_Hans</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">请输入你的 Shuyi API 服务地址</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      pt_BR</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">Please input your Shuyi API url</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">    help</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      en_US</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">Get your Shuyi API url from Shuyi</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      zh_Hans</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">从 Shuyi 获取您的 Shuyi API url</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">      pt_BR</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">Get your Shuyi API url from Shuyi</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">    url</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">https://blog.tupu.work/</span></span></code></pre></div><p>这时候我们就可以看到工具的授权参数了：</p><p><img src="`+r+'" alt=""></p><p>点击可以看到授权表单：</p><p><img src="'+d+'" alt=""></p><h3 id="是否必须授权和调用外部服务" tabindex="-1">是否必须授权和调用外部服务 <a class="header-anchor" href="#是否必须授权和调用外部服务" aria-label="Permalink to &quot;是否必须授权和调用外部服务&quot;">​</a></h3><p>自定义工具当然<strong>不是必须</strong>需要授权或者调用服务的。</p><p>你可以把<strong>所有逻辑都在你的工具代码里面实现</strong>，这样比较简单，但是也有一些弊端：</p><ul><li>工具代码过于复杂，耦合性过高，也不利于测试</li><li>插件依赖等问题可能和 Dify 冲突，升级安装也不好保证</li><li>在 Dify 中计算不方便分布式扩容</li></ul><p>如果我们的工具功能比较简单，可以不用认证这些的，就比如 JSON 相关的工具：</p><p><img src="'+g+`" alt=""></p><p>如果要实现的工具功能复杂，还是建议单独写一个服务，让 Dify 来调用。</p><h2 id="工具实现" tabindex="-1">工具实现 <a class="header-anchor" href="#工具实现" aria-label="Permalink to &quot;工具实现&quot;">​</a></h2><p>工具实现也是分为定义文件 Yaml 和功能实现类两部分。</p><p>我们再 <code>shuyi/tools</code> 目录下创建 <code>shuyi_test.yaml</code> 文件如下，内容主要就是工具描述、以及参数两部分。</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">identity:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">  name:</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> shuyi_test</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">  author:</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> Shuyi</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">  label:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">    en_US:</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> ShuyiTest</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">    zh_Hans:</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> 数翼工具测试</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">    pt_BR:</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> ShuyiTest</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">description:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">  human:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">    en_US:</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> A</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> tool</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> for</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> testing</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> Dify</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> message</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> type</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> and</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> input</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> parameters.Input</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> should</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> be</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> a</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> search</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> query.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">    zh_Hans:</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> 用于测试Dify消息类型和输入参数的工具。</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">    pt_BR:</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> A</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> tool</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> for</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> testing</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> Dify</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> message</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> type</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> and</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> input</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> parameters.Input</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> should</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> be</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> a</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> search</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> query.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">  llm:</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> A</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> tool</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> for</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> testing</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> Dify</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> message</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> type</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> and</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> input</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> parameters.Input</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> should</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> be</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> a</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> search</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> query.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">parameters:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">  -</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> name:</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> query</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">    type</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> string</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">    required:</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> true</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">    label:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">      en_US:</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> Query</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> string</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">      zh_Hans:</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> 查询语句</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">      pt_BR:</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> Query</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> string</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">    human_description:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">      en_US:</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> used</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> for</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> searching</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">      zh_Hans:</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> 用于搜索内容</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">      pt_BR:</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> used</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> for</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> searching</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">    llm_description:</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> key</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> words</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> for</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> searching</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">    form:</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> llm</span></span></code></pre></div><p>Dify 支持的参数有四种类型：</p><ul><li>string</li><li>number</li><li>boolean</li><li>select</li></ul><p>这块儿我们不在赘述，需要的话可以参考<a href="https://docs.dify.ai/v/zh-hans/guides/gong-ju/quick-tool-integration#id-3.-zhun-bei-gong-ju-yaml" target="_blank" rel="noreferrer">官方文档</a>。</p><p>值得注意的是 <code>form</code> 这个参数， <code>form</code> 表示表单类型，目前支持<code>llm</code>、<code>form</code>两种类型，分别对应 Agent 自行推理和前端填写。</p><p>Agent 自行推理的意思就是有 LLM 确定字段的值。</p><p>工具的实现类 <code>shuyi_test.py</code> 最简单的莫过于直接返回一个固定的消息。</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> typing </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> Any, Union</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> core.tools.entities.tool_entities </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> ToolInvokeMessage</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> core.tools.tool.builtin_tool </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> BuiltinTool</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> ShuyiTestTool</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6CB6FF;">BuiltinTool</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> _invoke</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(self,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">                user_id: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">str</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">                tool_parameters: dict[</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">str</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, Any],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">                ) -&gt; Union[ToolInvokeMessage, list[ToolInvokeMessage]]:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">        return</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> self</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.create_link_message(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;hello&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span></code></pre></div><p>当然现实中肯定不会这么简单，我们一般要获取插件认证的参数：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">api_url </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> self</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.runtime.credentials[</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;shuyi_api_url&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">params </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">    &quot;api_key&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">self</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.runtime.credentials[</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;shuyi_api_key&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">],</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">    &quot;type&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: tool_parameters[</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;type&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">],</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">    &quot;query&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: tool_parameters[</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;query&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><p>调用外部服务：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">response </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> requests.get(</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">url</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">api_url, </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">params</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">params)</span></span></code></pre></div><p>解析调用结果的服务返回一般逻辑比较复杂，我们可以使用一个单独的函数实现：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> _parse_response</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(self, response: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">dict</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) -&gt; </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">dict</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    # logics</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> result</span></span></code></pre></div><p>然后返回：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">response.raise_for_status()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">valuable_res </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> self</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">._parse_response(response.json())</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">return</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> self</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.create_json_message(valuable_res)</span></span></code></pre></div><p>我写了这样一个模板，大家可以<strong>基于这个模板来创建自己的工具</strong>：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> typing </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> Any, Union</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> requests</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> core.tools.entities.tool_entities </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> ToolInvokeMessage</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> core.tools.tool.builtin_tool </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> BuiltinTool</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> ShuyiTestTool</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6CB6FF;">BuiltinTool</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">):</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> _parse_response</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(self, response: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">dict</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) -&gt; </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">dict</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">        # logics</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> result</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> _invoke</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(self,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">                user_id: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">str</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">                tool_parameters: dict[</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">str</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, Any],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">                ) -&gt; Union[ToolInvokeMessage, list[ToolInvokeMessage]]:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        api_url </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> self</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.runtime.credentials[</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;shuyi_api_url&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        params </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">            &quot;api_key&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">self</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.runtime.credentials[</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;shuyi_api_key&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">],</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">            &quot;type&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: tool_parameters[</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;type&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">],</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">            &quot;query&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: tool_parameters[</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;query&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        response </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> requests.get(</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">url</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">api_url, </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">params</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">params)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        response.raise_for_status()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        valuable_res </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> self</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">._parse_response(response.json())</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">        return</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> self</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.create_json_message(valuable_res)</span></span></code></pre></div><h2 id="消息类型" tabindex="-1">消息类型 <a class="header-anchor" href="#消息类型" aria-label="Permalink to &quot;消息类型&quot;">​</a></h2><p>Dify 提供了几种<a href="https://docs.dify.ai/v/zh-hans/guides/gong-ju/advanced-tool-integration" target="_blank" rel="noreferrer">消息类型</a>， 在我看来都是<strong>文本（Markdown）类型的封装</strong>，下面是对应的封装方法：</p><ul><li>图片：<code>create_image_message(self, image: str, save_as: str = &#39;&#39;)</code></li><li>链接：<code>create_link_message(self, link: str, save_as: str = &#39;&#39;)</code></li><li>文本：<code>create_text_message(self, text: str, save_as: str = &#39;&#39;)</code></li><li>Blob: <code>create_blob_message(self, blob: bytes, meta: dict = None, save_as: str = &#39;&#39;)</code></li><li>JSON: <code>create_json_message(self, object: dict)</code></li></ul><p>当然，也支持返回多个消息，用数组表示即可。</p><h3 id="文本" tabindex="-1">文本 <a class="header-anchor" href="#文本" aria-label="Permalink to &quot;文本&quot;">​</a></h3><p>文本类型其实是 <code>Markdown</code> 。</p><p>我们创建一个包含图片、列表、标题的 Markdown 消息：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">return</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> self</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.create_text_message(</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">                &quot;&quot;&quot;### User message</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#F47067;">%s</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">### 生成式 AI 应用创新引擎</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">开源的 LLM 应用开发平台，轻松构建和运营生成式 AI 原生应用。</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">- 生成式 AI</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">- 应用开发框架</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">![image](https://buffer.com/cdn-cgi/image/w=1000,fit=contain,q=90,f=auto/library/content/images/size/w1200/2023/10/free-images.jpg)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">#### RAG Pipeline</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;&quot;&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> %</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> params[</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;query&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">])</span></span></code></pre></div><p>效果如下：</p><p><img src="`+y+`" alt="文本消息"></p><h3 id="图片消息" tabindex="-1">图片消息 <a class="header-anchor" href="#图片消息" aria-label="Permalink to &quot;图片消息&quot;">​</a></h3><p>图片消息需要传递一个 地址：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">image_path </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &#39;https://buffer.com/cdn-cgi/image/w=1000,fit=contain,q=90,f=auto/library/content/images/size/w1200/2023/10/free-images.jpg&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">return</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> self</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.create_image_message(image_path)</span></span></code></pre></div><p>效果如下：</p><p><img src="`+F+`" alt="图片消息"></p><h3 id="blob-消息" tabindex="-1">Blob 消息 <a class="header-anchor" href="#blob-消息" aria-label="Permalink to &quot;Blob 消息&quot;">​</a></h3><p>文档上说 Blob 消息可以返回文件的原始数据，如图片、音频、视频、PPT、Word、Excel 等。</p><p>但是实际测试下来效果不太对。</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">with</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> open</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(file_path, </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;rb&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> mp4:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    byte_arr </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> mp4.read()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">return</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> self</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.create_blob_message(</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">    blob</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">byte_arr,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">    meta</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">{</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">        # &#39;mime_type&#39;: &#39;application/vnd.openxmlformats-officedocument.spreadsheetml.sheet&#39;,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">        &#39;mime_type&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;video/mp4&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">        &#39;file_name&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;xxx.mp4&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,},</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">    save_as</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">self</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">VARIABLE_KEY</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">IMAGE</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.value</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span></code></pre></div><p>效果并没有显示出文件内容，或者下载链接：</p><p><img src="`+o+'" alt="Blob 文件消息"></p><p>经过尝试，如果想要返回文档，发现只有使用 Markdown 来实现一个下载超链接。</p><div class="language-markdown vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">markdown</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">[</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;--shiki-light-text-decoration:underline;--shiki-dark-text-decoration:inherit;">something.xlsx</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">](https://yourhost/xxx.xlsx</span></span></code></pre></div><h2 id="链接消息" tabindex="-1">链接消息 <a class="header-anchor" href="#链接消息" aria-label="Permalink to &quot;链接消息&quot;">​</a></h2><p>连接类型的消息只需要出入一个地址，</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">return</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> self.create_link_message</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">link</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span></code></pre></div><p>返回的内容就是：<code>Link: </code> 后面跟上你的链接：</p><p><img src="'+D+`" alt="链接消息"></p><h2 id="多条消息" tabindex="-1">多条消息 <a class="header-anchor" href="#多条消息" aria-label="Permalink to &quot;多条消息&quot;">​</a></h2><p>Dify 还支持多条消息的返回，使用数组即可：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">messages </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> [</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">    self</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.create_text_message(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;&quot;&quot;### User message ...&quot;&quot;&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> %</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> params[</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;query&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">]),</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">    self</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.create_json_message({</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;result&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;success&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;text&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;This is a message&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}),</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">    self</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.create_image_message(image_path),</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">    self</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.create_link_message(link),</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">    ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">]</span></span></code></pre></div><p>效果也是多条消息的拼接：</p><p><img src="`+c+'" alt="多条消息拼接"></p><h2 id="使用工具" tabindex="-1">使用工具 <a class="header-anchor" href="#使用工具" aria-label="Permalink to &quot;使用工具&quot;">​</a></h2><p>当我们编写好工具类，重启服务就可以使用刚刚创建的工具类了。</p><p>添加节点的时候找到并选择自己的工具：</p><p><img src="'+A+'" alt="选择自定义工具"></p><p>就可以和 Dify 提供的默认工具一样用了。</p><p><img src="'+C+'" alt="使用自定义工具"></p><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p>相比于在 UI 上创建基于 OpenAPI 的自定义工具，通过代码来扩展供应商和工具集更使能方便我们完成 工具的积累和传播，在使用上也有更大的可能性。</p><p>通过扩展工具，基于 Dify <strong>打造自己独特的 AI 工作站</strong>，同时还可以复用自己之前的工具积累，而不仅仅是通用的 AI Agent 工作站。</p><p>!!! explain 代码仓库 代码已上传，有需要的可以直接去线上下载代码。</p><ul><li><a href="https://github.com/iDigitalWings/dify_custom_tools" target="_blank" rel="noreferrer">https://github.com/iDigitalWings/dify_custom_tools</a></li></ul><p>!!!</p><p>!!! article 相关文章阅读</p><ul><li><a href="./2024-08-02-dify-api-extension">Dify + FastAPI 创建自定义工具</a></li><li><a href="./2024-08-01-dify-sd-webui">Dify+谷歌翻译 使用中文提示词实现本地文生图</a></li><li><a href="./../07/2024-07-27-steamlit-rag-excel">《AI打工摸鱼笔记》Streamlit + AnythingLLM + LM Studio</a></li><li><a href="./../07/2024-07-24-ollama-full-guide">Ollama 本地运行大模型(LLM)完全指南</a> !!!</li></ul>',116)]))}const x=i(u,[["render",B]]);export{q as __pageData,x as default};
