import{_ as t,a as o,af as r,o as a}from"./chunks/framework.C87LdZyP.js";const p="/assets/mem1.DMQ9wRqe.png",s="/assets/mem2.BoPfIKvE.png",v=JSON.parse('{"title":"Docker Memory and JVM GC","description":"","frontmatter":{"title":"Docker Memory and JVM GC","date":"2017-05-18T00:00:00.000Z","tags":["docker","jvm","gc","oom","java"]},"headers":[],"relativePath":"posts/2017/05/2017-05-18-jvm-gc-and-docker-memery.md","filePath":"posts/2017/05/2017-05-18-jvm-gc-and-docker-memery.md","lastUpdated":1718193786000}'),l={name:"posts/2017/05/2017-05-18-jvm-gc-and-docker-memery.md"};function i(m,e,c,d,n,h){return a(),o("div",null,e[0]||(e[0]=[r('<p>最近服务器上有暴露一些内存问题，几个Tomcat Docker在某些业务场景内存使用会很大，然后超过DContainer的mem limit， 最终程序挂掉。</p><p>刚开始以为程序有问题，于是用Idea限制内存跑了一下。用 Spring Boot Admin 看了下实施的内存，发现内存回收 的很及时，也只用了<code>400M</code>不到的内存，而线上环境动辄几个G都能OOM。</p><p>排除了程序的原因，我把程序打包放到Tomcat里面，同样测试之后，也只用了几百M的内存，没有一直上升的迹象。</p><p>最后放在容器上面，不测不知道，一测吓一跳，主要有两个问题。</p><ol><li>容器停止后CPU等资源一下子就释放了，但是内存不释放，不管是<code>kill</code>掉还是<code>rm</code>掉都不释放。</li></ol><ul><li>这就简介导致了，重启容器后容器内存占用会在原来的基础上增加</li><li>当时也不是一直不是放，大概十分钟之后会释放</li></ul><ol start="2"><li>Tomcat占用比如400M内存，随着系统运行容器内存会一直上升，直至超过容器限制，然后容器就挂了。</li></ol><p>网络上查找发现很多人都遇到相同的问题，去github上能看到很多相关的issue，有些人的解决方案是环境变量里加上</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span>MALLOC_ARENA_MAX=4</span></span></code></pre></div><p>但是有些人不管用，比如我测试下来这个并不能解决容器内存比Tomcat内存多很多的问题，可能能抑制其增长速度并偶尔让容器回收。</p><p>最后的解决方案呢，<code>先放弃Docker吧</code>。</p><p>放两张截图：</p><p>Tomcat上限500M，而容器的占用：</p><p><img src="'+p+'" alt=""></p><p>这个不知道什么情况，偶尔内存占用有点下降：</p><p><img src="'+s+'" alt=""></p><hr><p>下面是相关的一些链接：</p><ul><li><p><a href="http://stackoverflow.com/questions/24374854/docker-can-you-over-allocate-ram-tomcat" target="_blank" rel="noreferrer">http://stackoverflow.com/questions/24374854/docker-can-you-over-allocate-ram-tomcat</a></p></li><li><p><a href="https://github.com/moby/moby/issues/32788" target="_blank" rel="noreferrer">https://github.com/moby/moby/issues/32788</a></p></li><li><p><a href="https://forums.docker.com/t/docker-and-java-dont-mix/21772" target="_blank" rel="noreferrer">https://forums.docker.com/t/docker-and-java-dont-mix/21772</a></p></li><li><p><a href="http://hg.openjdk.java.net/jdk9/jdk9/hotspot/rev/5f1d1df0ea49" target="_blank" rel="noreferrer">http://hg.openjdk.java.net/jdk9/jdk9/hotspot/rev/5f1d1df0ea49</a></p></li><li><p><a href="http://trustmeiamadeveloper.com/2016/03/18/where-is-my-memory-java" target="_blank" rel="noreferrer">http://trustmeiamadeveloper.com/2016/03/18/where-is-my-memory-java</a></p></li><li><p><a href="https://developers.redhat.com/blog/2017/03/14/java-inside-docker" target="_blank" rel="noreferrer">https://developers.redhat.com/blog/2017/03/14/java-inside-docker</a></p></li><li><p><a href="https://plumbr.eu/outofmemoryerror/gc-overhead-limit-exceeded" target="_blank" rel="noreferrer">https://plumbr.eu/outofmemoryerror/gc-overhead-limit-exceeded</a></p></li><li></li></ul><hr><div style="text-align:center;color:#00000099;font-size:14px;">END</div>',21)]))}const f=t(l,[["render",i]]);export{v as __pageData,f as default};
