import{_ as i,a,af as n,o as t}from"./chunks/framework.C87LdZyP.js";const g=JSON.parse('{"title":"Devon4j: 编码约定","description":"","frontmatter":{"title":"Devon4j: 编码约定","date":"2022-06-10T00:00:00.000Z","tags":["devon4j"],"category":["架构"]},"headers":[],"relativePath":"posts/2022/06/2022-06-10-devon4j-coding-conventions.md","filePath":"posts/2022/06/2022-06-10-devon4j-coding-conventions.md","lastUpdated":1718173059000}'),h={name:"posts/2022/06/2022-06-10-devon4j-coding-conventions.md"};function l(e,s,p,k,d,r){return t(),a("div",null,s[0]||(s[0]=[n(`<p>代码应遵循 Java 的一般约定（请参阅<a href="https://www.oracle.com/java/technologies/naming-conventions.html" target="_blank" rel="noreferrer">Oracle Naming Conventions</a>、<a href="https://google.github.io/styleguide/javaguide.html" target="_blank" rel="noreferrer">Google Java Style</a>等）。我们认为这是常识，并为<a href="https://www.sonarqube.org/" target="_blank" rel="noreferrer">SonarQube</a>和相关工具（例如<a href="https://checkstyle.sourceforge.io/" target="_blank" rel="noreferrer">Checkstyle</a>）提供配置，而不是在这里重复。</p><h2 id="命名" tabindex="-1">命名 <a class="header-anchor" href="#命名" aria-label="Permalink to &quot;命名&quot;">​</a></h2><p>除了一般的 Java 命名约定外，我们还遵循此处明确列出的其他规则：</p><ul><li>始终使用简短但会说话的名称（用于类型、方法、字段、参数、变量、常量等）。</li><li>严格避免技术名称中出现特殊字符（用于文件、类型、字段、方法、属性、变量、数据库表、列、约束等）。换句话说，对于技术名称（甚至不包括空格），仅使用带有常用技术分隔符的拉丁字母数字 ASCII 字符用于手风琴上下文（例如下划线）。</li><li>对于包段和类型名称，首选单数形式（<code>CustomerEntity</code>而不是<code>CustomersEntity</code>）。仅在没有单数或在语义上确实需要时才使用复数形式（例如，对于包含多个此类对象的容器）。</li><li>避免使用重复的类型名称。类、接口、枚举或注释的名称在您的项目中应该是唯一的，除非在特殊且合理的情况下有意这样做。</li><li>避免人为的命名结构，例如接口的前缀 (<code>I*</code>) 或后缀 (<code>*IF</code>)。</li><li>使用 CamelCase 甚至缩写（<code>XmlUtil</code>而不是<code>XMLUtil</code>）</li><li>避免第二个字符完全大写的属性/字段名称（例如&#39;aBc&#39;）。有关详细信息，请参阅<a href="https://github.com/devonfw/cobigen/issues/1095" target="_blank" rel="noreferrer">#1095</a>。</li><li>泛型名称应该易于理解。在合适的地方遵循通用规则。<code>E=Element</code>、<code>K=Key</code>、<code>V=Value</code>、<code>T=Type</code>。但对于更具体的情况，请随意使用更长的名称。大写的命名有助于区分泛型类型和常规类，<code>ID</code>、<code>DTO</code>、<code>ENTITY</code>。</li></ul><h2 id="包" tabindex="-1">包 <a class="header-anchor" href="#包" aria-label="Permalink to &quot;包&quot;">​</a></h2><p>Java 包是构建代码的最重要元素。我们使用严格的打包约定将技术层和业务组件（切片）映射到代码（有关详细信息，请参阅<code>技术架构</code>）。通过在文档和代码中使用相同的名称，我们创建了一个强大的链接，该链接可以提供方向，并可以轻松地从业务需求、规范或故事票证中找到代码并返回。</p><p>对于基于 devon4j 的应用程序，我们使用以下 Java-Package 模式：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span>«root».«component».«layer»[.«detail»]</span></span></code></pre></div><p>例如，在我们的示例应用程序中，我们<code>ordermanagement</code>在包中找到组件的 Spring Data 存储库<code>com.devonfw.application.mtsj.ordermanagement.dataaccess.api.repo</code></p><p>表 31. 包模式段</p><table tabindex="0"><thead><tr><th><strong>部分</strong></th><th><strong>描述</strong></th><th><strong>例子</strong></th></tr></thead><tbody><tr><td>«root»</td><td>是应用程序的基本 Java 包命名空间。通常我们建议使用<code>«group».«artifact»</code>where<code>«group»</code>is your maven/gradle<code>groupId</code>对应于您的组织或 IT 项目拥有遵循常见 Java 包约定的代码。该段<code>«artifact»</code>是您的 maven/gradle<code>artifactId</code>，通常是您的应用程序的技术名称。</td><td><code>com.devonfw.application.mtsj</code></td></tr><tr><td>«component»</td><td>代码所属的（业务）组件。它由业务架构定义并使用来自业务领域的术语。<code>general</code>对不属于特定组件的代码（基础代码）使用隐式组件。</td><td><code>salesmanagement</code></td></tr><tr><td>«layer»</td><td>技术层的名称（参见<code>技术架构</code>）。描述了[现代项目结构])和[经典项目结构]的详细信息。</td><td><code>logic</code>,<code>service</code>,<code>domain</code>,<code>common</code>,<code>rest</code></td></tr><tr><td>«detail»</td><td>在这里，您可以根据组件部分的大小自由地将代码进一步划分为子组件和其他关注点。如果你想严格地将 API 与实现分开，你应该从<code>«detail»</code>下面<code>«scope»</code>解释的开始。</td><td><code>dao</code>,<code>repo</code>,<code>model</code></td></tr><tr><td>«scope»</td><td>范围是<code>api</code>（其他层或组件使用的官方 API）、<code>base</code>（其他实现重用的基本代码）和<code>impl</code>（永远不应该从外部导入的实现）之一。该部分最初是强制性的，但由于微服务、精益和敏捷等趋势，我们决定将其设为可选，并且不强迫任何人使用它。</td><td><code>api</code>,<code>base</code>,<code>impl</code></td></tr></tbody></table><p>请注意，<code>devon4j</code>用于 spring 的库模块使用<code>com.devonfw.module</code>作为<code>«root»</code>，并且模块的名称为<code>«component»</code>。 例如，我们<code>beanmapping</code>模块的API可以在<code>com.devonfw.module.beanmapping.common.api</code>这个包中找到。</p><h2 id="代码任务" tabindex="-1">代码任务 <a class="header-anchor" href="#代码任务" aria-label="Permalink to &quot;代码任务&quot;">​</a></h2><p>需要返工的代码点可以使用以下任务标签进行标记。这些已经在您的开发环境中进行了正确的预配置，以便自动完成并查看您负责的任务。将代码任务的数量保持在较低水平很重要。因此，团队的每个成员都应该对整体代码质量负责。因此，如果您更改了一段代码并完成了可以可靠解决的代码任务，请将此作为更改的一部分并删除相应的标记。</p><h3 id="待办事项" tabindex="-1">待办事项 <a class="header-anchor" href="#待办事项" aria-label="Permalink to &quot;待办事项&quot;">​</a></h3><p>用于标记一段尚未完成的代码（通常是因为依赖于未准备好的东西而无法完成）。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> // TODO «author» «description»</span></span></code></pre></div><p>代码作者添加了一个 TODO 标记，该作者也负责完成此任务。</p><h3 id="修复" tabindex="-1">修复 <a class="header-anchor" href="#修复" aria-label="Permalink to &quot;修复&quot;">​</a></h3><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> // FIXME «author» «description»</span></span></code></pre></div><p>FIXME 标签由代码的作者或发现他现在无法修复的错误的人添加。添加 FIXME 的 «作者» 也负责完成此任务。这与 TODO 非常相似，但具有更高的优先级。FIXME 标签表示在发布完成之前应该解决的问题，而 TODO 标签可能需要保留更长时间。</p><h3 id="回顾" tabindex="-1">回顾 <a class="header-anchor" href="#回顾" aria-label="Permalink to &quot;回顾&quot;">​</a></h3><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> // REVIEW «responsible» («reviewer») «description»</span></span></code></pre></div><p>审查者在代码审查期间添加审查标签。在这里，代码的原始作者负责解析 REVIEW 标记，并且审阅者将这个任务分配给他。这对于反馈和学习很重要，并且必须与人们相互交谈并参与讨论的审查“过程”保持一致。在较小的团队或本地团队中，同行评审是可取的，但这不适用于大型甚至分布式团队。</p><h2 id="代码文档" tabindex="-1">代码文档 <a class="header-anchor" href="#代码文档" aria-label="Permalink to &quot;代码文档&quot;">​</a></h2><p>作为一般目标，代码应该易于阅读和理解。此外，清楚地命名文档很重要。我们遵循以下规则：</p><ul><li>API（尤其是组件接口）使用 JavaDoc 正确记录。</li><li>JavaDoc 应提供实际价值——我们编写 JavaDoc 不是为了满足 checkstyle 等工具，而是为了表达签名中尚不可用的信息。</li><li>我们利用<code>{@link}</code>JavaDoc 中的标签使其更具表现力。</li><li>API 的 JavaDoc 描述了如何使用类型或方法，而不是实现内部如何工作。</li><li>为了记录实现细节，我们使用代码注释（例如<code>// we have to flush explicitly to ensure version is up-to-date</code>）。这只需要复杂的逻辑。</li><li>避免无意义的事情<code>{@inheritDoc}</code>，因为自 Java 1.5 起就有被<code>@Override</code>覆盖方法的注解，而且您的 JavaDoc 会自动继承，即使根本没有任何 JavaDoc 注释。</li></ul><h2 id="代码风格" tabindex="-1">代码风格 <a class="header-anchor" href="#代码风格" aria-label="Permalink to &quot;代码风格&quot;">​</a></h2><p>本节为您提供编写更好代码并避免陷阱和错误的最佳实践。</p><h3 id="blobs" tabindex="-1">BLOBs <a class="header-anchor" href="#blobs" aria-label="Permalink to &quot;BLOBs&quot;">​</a></h3><p>避免使用<code>byte[]</code>for BLOB，因为这会将它们完全加载到您的内存中。这将导致性能问题或内存不足错误。相反，在处理 BLOB 时使用流。有关详细信息，请参阅<a href="https://devonfw.com/website/pages/docs/devonfw-guide_devon4j.wiki_guide-blob-support.asciidoc.html" target="_blank" rel="noreferrer">BLOB 支持</a>。</p><h3 id="无状态编程" tabindex="-1">无状态编程 <a class="header-anchor" href="#无状态编程" aria-label="Permalink to &quot;无状态编程&quot;">​</a></h3><p>当使用依赖注入将逻辑实现为容器的<em>组件</em>或<em>bean</em>时，我们强烈鼓励无状态编程。 这与设计为有状态的数据对象（如实体或传输对象）无关。 相反，这适用于所有用<code>@Named</code>, <code>@ApplicationScoped</code>, <code>@Stateless</code>等注解的类及其所有超类。 这些类尤其包括您的 <code>repositories</code>, <code>use-cases</code>和<code>REST 服务</code>。 这些类在初始化后不得修改。在运行时（通过容器初始化之后）调用的方法不会赋值字段（类的成员变量）或改变存储在字段中的对象。 这允许您的组件或 bean 是无状态的和线程安全的。因此它可以被初始化为一个单例，只有一个实例被创建并在应用程序的所有线程中共享。</p><p>这是一个例子：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">ApplicationScoped</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">Named</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> UcApproveContractImpl</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> implements</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6CB6FF;"> UcApproveContract</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">  // bad</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  private</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> String</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> contractOwner;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  private</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> MyState</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> state;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">Overide</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> approve</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(Contract </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">contract</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.contractOwner </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> contract.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">getOwner</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.contractOwner </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.contractOwner.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">toLowerCase</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(Locale.US);</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.state.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">setAdmin</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.contractOwner.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">endsWith</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;admin&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">));</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.state.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">isAdmin</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">()) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">      ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">      ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">  // fine</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">Overide</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> approveContract</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(Contract </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">contract</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    String</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> contractOwner</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> contract.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">getOwner</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">toLowerCase</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(Locale.US);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (contractOwner.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">endsWith</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;admin&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">      ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">      ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><p>正如您在<code>bad code</code> 中看到的，调用<code>approve</code>方法时类的字段会被赋值。。 因此，多个用户以及并发调用此方法的线程可能会干扰和覆盖此状态，从而对并行线程产生副作用。 这将导致难以追查的令人讨厌的错误和错误。 它们不会出现在简单的测试中，但肯定会出现在真实用户的生产中。 因此，<strong>永远</strong>不要这样做并无状态地实现您的功能。 也就是说，将所有状态保存在局部变量中，并严格避免修改字段或其值，如<code>fine</code>代码。 如果您发现自己在所有代表状态的方法之间传递了许多参数，您可以轻松地创建一个单独的类来封装此状态。 但是，您需要在方法中创建此状态对象作为局部变量，并将其作为参数在方法之间传递：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">ApplicationScoped</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">Named</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> UcApproveContractImpl</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> implements</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6CB6FF;"> UcApproveContract</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">  // fine</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">Overide</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> approveContract</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(Contract </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">contract</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    String</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> contractOwner</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> contract.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">getOwner</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">toLowerCase</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(Locale.US);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    MyState</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> state</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> MyState</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    state.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">setAdmin</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.contractOwner.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">endsWith</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;admin&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">));</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">    doApproveContract</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(contract, state);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><h3 id="关闭资源" tabindex="-1">关闭资源 <a class="header-anchor" href="#关闭资源" aria-label="Permalink to &quot;关闭资源&quot;">​</a></h3><p>需要正确处理流（<code>InputStream</code>、<code>OutputStream</code>、<code>Reader</code>、 ）或事务等资源。<code>Writer</code>因此，遵守这些规则很重要：</p><ul><li>每个资源都必须正确关闭，否则您将无法使用文件句柄、TX 会话、内存泄漏等</li><li>尽可能避免手动处理此类资源。这就是为什么我们建议<code>@Transactional</code>在 devonfw 中使用事务（请参阅[事务处理]）。</li><li>如果您必须手动处理资源（例如二进制流），请确保正确关闭它们。有关详细信息，请参见下面的示例。</li></ul><p>关闭流和其他此类资源很容易出错。看看下面的例子：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// bad</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">try</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  InputStream</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> in</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> FileInputStream</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(file);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">  readData</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(in);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  in.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">close</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (IOException </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">e</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  throw</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> IllegalStateException</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;Failed to read data.&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, e);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><p>上面的代码是错误的，因为如果<code>IOException</code>没有<code>InputStream</code>正确关闭。在服务器应用程序中，此类错误可能会导致通常只会在生产中发生的严重错误。由于这些资源实现了<code>AutoCloseable</code>接口，您可以使用<code>try-with-resource</code>语法编写正确的代码。以下代码显示了示例的正确版本：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// fine</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">try</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (InputStream</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> in</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> FileInputStream</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(file)) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">  readData</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(in);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (IOException </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">e</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  throw</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> IllegalStateException</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;Failed to read data.&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, e);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><h3 id="捕获和处理异常" tabindex="-1">捕获和处理异常 <a class="header-anchor" href="#捕获和处理异常" aria-label="Permalink to &quot;捕获和处理异常&quot;">​</a></h3><p>捕获异常时，请始终确保以下几点：</p><ul><li><code>printStackTrace()</code>永远不要在异常上调用方法</li><li>记录或包装并重新抛出整个捕获的异常。请注意，异常的原因是非常有价值的信息。如果您因异常处理不当而丢失此类信息，您可能无法正确分析可能导致严重问题的生产问题。 <ul><li>如果包装并重新抛出异常，请确保将捕获的异常作为原因传递给新创建和抛出的异常。</li><li>如果您记录异常，请确保将整个异常作为参数传递给记录器（而不仅仅是异常的结果<code>getMessage()</code>或<code>toString()</code>异常的结果）。</li></ul></li><li>见[异常处理]</li></ul><h3 id="lambda-和-streams" tabindex="-1">Lambda 和 Streams <a class="header-anchor" href="#lambda-和-streams" aria-label="Permalink to &quot;Lambda 和 Streams&quot;">​</a></h3><p>使用 Java8，您可以拥有很酷的新特性，例如 lambda 和 monad，例如 (<code>Stream</code>,<code>CompletableFuture</code>,<code>Optional</code>, 等)。但是，这些新功能也可能被滥用或导致代码难以阅读或调试。为避免痛苦，我们为您提供以下最佳实践：</p><ol><li><p>使用前了解如何正确使用新功能。开发人员通常热衷于使用很酷的新功能。当您在项目代码中进行第一次实验时，您会感到非常痛苦，之后可能会感到羞愧。请正确研究这些功能。即使是 Java8 专家仍然编写 for 循环来迭代集合，所以只在真正有意义的地方使用这些特性。</p></li><li><p>Streams 只能用于流畅的 API 调用，因为 Stream 不能被分叉或重用。</p></li><li><p>每个流必须只有一个终端操作。</p></li><li><p>不要将多个语句写入 lambda 代码：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// bad</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">collection.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">stream</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">map</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Foo</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> foo</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> doSomething</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(x);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">...</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">return</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> foo;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">collect</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(Collectors.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">toList</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">());</span></span></code></pre></div><p>这种风格使代码难以阅读和调试。永远不要那样做！相反，将 lambda 主体提取到具有有意义名称的私有方法中：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// fine</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">collection.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">stream</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">map</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">this</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">::</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">convertToFoo).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">collect</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(Collectors.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">toList</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">());</span></span></code></pre></div></li><li><p>不要<code>parallelStream()</code>在一般代码中使用（将在服务器端运行），除非您确切知道自己在做什么以及幕后发生的事情。一些开发人员可能认为使用并行流是一个好主意，因为它会使代码更快。但是，如果您想进行性能优化，请咨询您的技术主管（架构师）。许多功能（例如安全性和事务）将依赖于与当前线程关联的上下文信息。因此，使用并行流很可能会导致严重的错误。仅将它们用于独立 (CLI) 应用程序或仅用于处理大量数据的代码。</p></li><li><p>不要对 lambda 内的子流执行操作：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">set.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">stream</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">flatMap</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> x.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">getChildren</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">stream</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">filter</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">this</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">::</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">isSpecial)).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">collect</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(Collectors.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">toList</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">()); </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// bad</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">set.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">stream</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">flatMap</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> x.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">getChildren</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">stream</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">()).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">filter</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">this</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">::</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">isSpecial).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">collect</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(Collectors.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">toList</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">()); </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// fine</span></span></code></pre></div></li><li><p>仅<code>collect</code>在流的末尾使用：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">set.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">stream</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">collect</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(Collectors.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">toList</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">()).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">forEach</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(...) </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// bad</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">set.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">stream</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">peek</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(...).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">collect</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(Collectors.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">toList</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">()) </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// fine</span></span></code></pre></div></li><li><p>具有类型推断的 Lambda 参数</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(String a, Float b, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">Byte</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">[] c) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> a.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">toString</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> Float.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">toString</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(b) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> Arrays.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">toString</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(c)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// bad</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(a,b,c)  </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> a.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">toString</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> Float.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">toString</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(b) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> Arrays.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">toString</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(c)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// fine</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Collections.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">sort</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(personList, (Person p1, Person p2) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> p1.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">getSurName</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">compareTo</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(p2.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">getSurName</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">()));  </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// bad</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Collections.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">sort</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(personList, (p1, p2) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> p1.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">getSurName</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">compareTo</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(p2.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">getSurName</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">()));  </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// fine</span></span></code></pre></div></li><li><p>避免返回大括号和语句</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  { </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">return</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> a.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">toString</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(); } </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// bad</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  a.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">toString</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();   </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// fine</span></span></code></pre></div></li><li><p>避免使用单个参数的括号</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(a) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> a.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">toString</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(); </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// bad</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> a.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">toString</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();  </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// fine</span></span></code></pre></div></li><li><p>避免在 foreach 方法中使用 if/else。使用过滤器方法和理解</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// bad</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> public</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> Iterator</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">String</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> TwitterHandles</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(Iterator</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Author</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> authors, string company) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    final</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> List</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> result</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> ArrayList&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt; ();</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">    foreach</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (Author</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> a</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> :</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> authors) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">      if</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (a.Company.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">equals</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(company)) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        String</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> handle</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> a.TwitterHandle;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (handle </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">          result.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">Add</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(handle);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">      }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> result;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  }</span></span></code></pre></div><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// fine</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">public</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> List</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">String</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> twitterHandles</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(List</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Author</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> authors, String company) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> authors.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">stream</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">            .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">filter</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">-&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> null</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> !=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> a.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">getCompany</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">equals</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(company))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">            .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">map</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> a.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">getTwitterHandle</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">())</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">            .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">collect</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">toList</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">());</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  }</span></span></code></pre></div></li></ol><h3 id="option" tabindex="-1">Option <a class="header-anchor" href="#option" aria-label="Permalink to &quot;Option&quot;">​</a></h3><p>您可以包装值以<code>Optional</code>避免<code>NullPointerException</code>（NPE）。<code>Optional</code>但是，对每个参数或结果都使用它来表示它可能为空并不是一种好的代码风格。对于这种情况，使用<code>@Nullable</code>甚至更好地代替注释<code>@NotNull</code>哪里<code>null</code>是不可接受的。</p><p>但是，<code>Optional</code>可用于防止流畅调用中的 NPE（由于缺少 elvis 运算符）：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Long</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> id;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> fooCto.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">getBar</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">getBar</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">getId</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(); </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// may cause NPE</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> Optional.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">ofNullable</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(fooCto).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">map</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(FooCto</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">::</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">getBar).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">map</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(BarCto</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">::</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">getBar).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">map</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(BarEto</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">::</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">getId).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">orElse</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// null-safe</span></span></code></pre></div><h3 id="编码" tabindex="-1">编码 <a class="header-anchor" href="#编码" aria-label="Permalink to &quot;编码&quot;">​</a></h3><p>编码（尤其是结合字符和代理的 Unicode）是一个复杂的话题。如果您必须处理特殊字符的编码和处理，请研究此主题。对于基础知识，请遵循以下建议：</p><ul><li>尽可能首选 unicode（UTF-8 或更好）作为编码。这尤其会影响您的数据库，并且必须预先定义，因为它通常不能（容易）在之后更改。</li><li>不要从<code>byte</code>to 转换<code>char</code>（unicode 字符可以由多个字节组成，这种转换可能只对 ASCII 字符有效）</li><li>永远不要使用默认语言环境转换字符串的大小写（尤其是在编写类似 devonfw 的通用代码时）。例如，如果您这样做<code>&quot;HI&quot;.toLowerCase()</code>并且您的系统语言环境是土耳其语，那么输出将是“hı”而不是“hi”，这可能会导致错误的假设和严重的问题。如果您想进行“通用”大小写转换，请始终明确使用相应的西方语言环境（例如<code>toLowerCase(Locale.US)</code>）。考虑使用帮助器类（参见例如<a href="https://github.com/m-m-m/base/blob/master/core/src/main/java/io/github/mmm/base/text/CaseHelper.java" target="_blank" rel="noreferrer">CaseHelper</a>）或在您的项目中为此创建您自己的小型静态实用程序。</li><li>编写独立于默认编码（系统属性<code>file.encoding</code>）的代码 - 这在 JUnit 中很可能与生产环境不同 <ul><li>创建<code>String</code>from时始终提供编码<code>byte[]</code>：<code>new String(bytes, encoding)</code></li><li>创建<code>Reader</code>或时始终提供编码<code>Writer</code>：<code>new InputStreamReader(inStream, encoding)</code></li></ul></li></ul><h3 id="首选通用-api" tabindex="-1">首选通用 API <a class="header-anchor" href="#首选通用-api" aria-label="Permalink to &quot;首选通用 API&quot;">​</a></h3><p>避免不必要的强绑定：</p><ul><li>不要将您的代码绑定到实现，例如<code>Vector</code>or<code>ArrayList</code>而不是<code>List</code></li><li>在用于输入（=参数）的 API 中，总是考虑做一些假设： <ul><li>更喜欢或差异无关紧要的地方（例如，仅<code>Collection</code>在您需要唯一性或高效时使用）<code>List\`\`Set\`\`Set\`\`contains</code></li><li>考虑优先<code>Collection&lt;? extends Foo&gt;</code>于<code>Collection&lt;Foo&gt;</code>何时<code>Foo</code>是接口或超类</li></ul></li></ul><h3 id="首选原始布尔值" tabindex="-1">首选原始布尔值 <a class="header-anchor" href="#首选原始布尔值" aria-label="Permalink to &quot;首选原始布尔值&quot;">​</a></h3><p>除非在极少数情况下您需要允许标志<code>null</code>避免使用对象类型<code>Boolean</code>。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// bad</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">public</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> Boolean isEmpty {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  return</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> size</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><p>而是始终使用原始<code>boolean</code>类型：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// fine</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> boolean</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> isEmpty {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  return</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> size</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><p>由于休眠的限制，唯一已知的例外是，由于 Hibernate 的限制在使用可嵌入类型(embeddable types)中的标志(flags)。</p>`,66)]))}const c=i(h,[["render",l]]);export{g as __pageData,c as default};
