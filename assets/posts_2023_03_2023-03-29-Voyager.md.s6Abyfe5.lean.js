import{_ as i,a,af as n,o as t}from"./chunks/framework.C87LdZyP.js";const e="/assets/967648988375333.CYJXSnAL.png",l="/assets/968431331936583.BeIqp132.png",p="/assets/968465925300958.CAufekza.png",h="/assets/968496682049916.Z6hWKfCA.png",r="/assets/968250215315708.DrjXUbyM.png",o="/assets/967904399026916.Cb7emxrc.png",k="/assets/967918193256583.CRDxrDuU.png",g="/assets/967943651712791.CxghW6db.png",d="/assets/968052722903333.D-vxcPjv.png",b=JSON.parse('{"title":"用 GPT4 来打游戏是个什么体验","description":"","frontmatter":{"title":"用 GPT4 来打游戏是个什么体验","date":"2023-03-29T00:00:00.000Z","tags":["ai","ml"],"category":["AI"]},"headers":[],"relativePath":"posts/2023/03/2023-03-29-Voyager.md","filePath":"posts/2023/03/2023-03-29-Voyager.md","lastUpdated":1718173059000}'),c={name:"posts/2023/03/2023-03-29-Voyager.md"};function F(y,s,u,m,D,C){return t(),a("div",null,s[0]||(s[0]=[n('<blockquote><p>由 NVIDIA 领导的研究团队<strong>开源</strong>了 <strong>Voyager</strong>， 这是一种基于<strong>大语言模型</strong> (LLM) 的<strong>终身学习代理</strong>。 Voyager 在没有人为干预的情况下不断探索世界，在流行游戏 《我的世界》 中学习不同的技能并取得新发现。</p></blockquote><p>先看下动图，具体视频可以到官网看，或者你已经安装了游戏，可以根据后问的教程自己运行这个 AI 程序：</p><p><img src="'+e+'" alt=""></p><p>《我的世界》这款游戏，大家应该都很熟悉，而 NVIDIA 已经把 大语言模型用在了玩儿《我的世界》上， 合成新物品、解锁成就、开拓地图，各个能力无所不能。用 GPT4 做加持，让它和「同行」的机器人迅速拉开差距。</p><p>我们先看对比图，在看介绍：</p><p><img src="'+l+'" alt="发现新物品和技能对比"></p><p><img src="'+p+'" alt="探索范围对比"></p><p><img src="'+h+'" alt="物品获得速度对比"></p><p>Voyager 在测试过程中显示出强大的情境终身学习能力， 并且在玩 Minecraft 时表现出非凡的熟练程度，远远优于同类机器人。</p><ul><li>它获得的独特物品增加了 3.3 倍，</li><li>行进距离增加了 2.3 倍，</li><li>解锁关键技术树里程碑的速度比之前的 SOTA 快了 15.3 倍，</li><li>Voyager 能够在新的 Minecraft 世界中利用学到的技能库从头开始解决新任务，而其他技术则难以推广。</li></ul><h2 id="团队" tabindex="-1">团队 <a class="header-anchor" href="#团队" aria-label="Permalink to &quot;团队&quot;">​</a></h2><p>创建 Voyager 的研究团队包括来自 NVIDIA、加州理工学院、德克萨斯大学奥斯汀分校 (UT Austin)、 斯坦福大学和亚利桑那州立大学 (ASU) 的研究人员。</p><p>在一篇总结 Voyager 研究成果的论文（发表在 <strong>arXiv</strong> 上）中， 研究团队将之前基于 LLM 的代理所面临的挑战描述如下：</p><blockquote><p>『开发在开放世界中不断探索、规划和发展新技能的具有普遍能力的智能体， 是 AI（人工智能）社区面临的重大挑战。基于 LLM 的智能体是最近取得的进展， 预训练 LLM 对世界的知识，以生成一致的行动计划和可操作的政策， 但这些代理人获得知识的时间很长，不是可以更新、积累和迁移的终身学习者。』</p></blockquote><p>研究团队描述了 Minecraft 的特点如下。 『与使用 AI 研究的许多其他游戏不同， Minecraft 提供了一个独特的游乐场，拥有无限的可能性， 而不是强加预定义的最终目标或固定的故事。现实的终身学习代理必须能够在这些游戏中表现得与人类一样好。』</p><p>该论文的作者之一、NVIDIA 的 AI 科学家 Jim Huang 博士在 2023 年 5 月 27 日发布在 Twitter 上的一条推文中说， 『具有通用能力的自主代理是 AI 的下一个前沿领域。Minecraft 是无限可能性的终极试验台对于代理商。』</p><h2 id="实现" tabindex="-1">实现 <a class="header-anchor" href="#实现" aria-label="Permalink to &quot;实现&quot;">​</a></h2><p><img src="'+r+'" alt=""></p><p>Voyager 由三个主要模块实现：</p><ul><li>自动化课程以最大限度地探索</li><li>用于存储和检索复杂行为的可执行代码的不断增长的技能库</li><li>一种重复的提示机制，结合环境（游戏）反馈、执行错误和自我验证来完善程序</li></ul><p>Voyager 通过提示和上下文学习与黑盒 LLM (GPT-4) 交互。这避免了对模型参数进行微调的需要。</p><h3 id="自动课程" tabindex="-1">自动课程 <a class="header-anchor" href="#自动课程" aria-label="Permalink to &quot;自动课程&quot;">​</a></h3><p>自动课程考虑探索进度和代理状态以最大化探索。GPT-4 将根据『<strong>发现尽可能多的不同事物</strong>』的总体目标生成课程。</p><p><img src="'+o+'" alt=""></p><h3 id="技能库" tabindex="-1">技能库 <a class="header-anchor" href="#技能库" aria-label="Permalink to &quot;技能库&quot;">​</a></h3><p><img src="'+k+'" alt=""></p><p>图表的上半部分显示了新技能的添加。每个技能都带有嵌入式描述的索引，以便将来在类似情况下进行搜索。 下图为技能搜索。当面对自动化课程中建议的新任务时，查询并确定前五项相关技能。 复杂的技能可以通过组合简单的程序来合成，航海者的能力会随着时间的推移而迅速提高。</p><h3 id="重复提示机制" tabindex="-1">重复提示机制 <a class="header-anchor" href="#重复提示机制" aria-label="Permalink to &quot;重复提示机制&quot;">​</a></h3><p><img src="'+g+'" alt=""></p><p>图的左侧显示了来自环境的反馈。 GPT-4 知道在 Minecraft 中制作一根棍子需要两块木头。 右侧显示执行错误。GPT-4 明白 Minecraft 中没有『金合欢锯』，所以必须制作一把『木锯』。</p><h3 id="终身学习能力强" tabindex="-1">终身学习能力强 <a class="header-anchor" href="#终身学习能力强" aria-label="Permalink to &quot;终身学习能力强&quot;">​</a></h3><p>Voyager 在上下文中展示了强大的终身学习能力， 与传统的 SOTA（最先进的）相比，在 Minecraft 中获得的独特物品增加了 3.3 倍， 独特物品增加了 2.3 倍，旅行距离增加了一倍，达到主要科技树里程碑的速度提高了 15.3 倍。 研究人员说：</p><blockquote><p>虽然其他技术难以推广，但 Voyager 可以利用新 Minecraft 世界中学到的技能库从头开始解决新任务。</p></blockquote><p><img src="'+d+`" alt="Voyager 通过自我探索不断发现新的 Minecraft 物品和技能，显著优于现有的基于 LLM 的代理。X轴显示提示的迭代次数"></p><p>Voyager 通过自我探索不断发现新的 Minecraft 物品和技能，显著优于现有的基于 LLM 的代理。X轴显示提示的迭代次数</p><h2 id="使用" tabindex="-1">使用 <a class="header-anchor" href="#使用" aria-label="Permalink to &quot;使用&quot;">​</a></h2><p>该项目已经开源，如果你有《我的世界》账号和 OpenAI 账号，那么可以直接按照下面方法运行该项目，让 AI 替你玩儿游戏。</p><p>首先，提前装好 《我的世界(Minecraft)》。 项目 Python 依赖：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> clone</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> https://github.com/MineDojo/Voyager</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> Voyager</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">pip</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> install</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> -e</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> .</span></span></code></pre></div><p>项目 NodeJS 依赖：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> voyager/env/mineflayer</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> install</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> -g</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> npx</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> install</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> mineflayer-collectblock</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">npx</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> tsc</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> ..</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> install</span></span></code></pre></div><p>然后执行下面代码登录游戏就可以让 AI 帮你探索世界了：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> voyager</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> import</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> Voyager</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"># You can also use mc_port instead of azure_login, but azure_login is highly recommended</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">azure_login</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">    &quot;client_id&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;YOUR_CLIENT_ID&quot;,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">    &quot;redirect_url&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;https://127.0.0.1/auth-response&quot;,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">    &quot;secret_value&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;[OPTIONAL] YOUR_SECRET_VALUE&quot;,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">    &quot;version&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;fabric-loader-0.14.18-1.19&quot;,</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> # the version Voyager is tested on</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">openai_api_key</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;YOUR_API_KEY&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">voyager</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> Voyager</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    azure_login</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">azure_login,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    openai_api_key</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">openai_api_key,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"># start lifelong learning</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">voyager.learn</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">()</span></span></code></pre></div><h2 id="项目信息" tabindex="-1">项目信息 <a class="header-anchor" href="#项目信息" aria-label="Permalink to &quot;项目信息&quot;">​</a></h2><p>论文下载：</p><ul><li><a href="https://voyager.minedojo.org/assets/documents/voyager.pdf" target="_blank" rel="noreferrer">https://voyager.minedojo.org/assets/documents/voyager.pdf</a></li></ul><p>官网：</p><ul><li><a href="https://voyager.minedojo.org/" target="_blank" rel="noreferrer">https://voyager.minedojo.org/</a></li></ul><p>Github:</p><ul><li><a href="https://github.com/MineDojo/Voyager" target="_blank" rel="noreferrer">https://github.com/MineDojo/Voyager</a></li></ul><hr><div style="text-align:center;color:#00000099;font-size:14px;">END</div>`,52)]))}const f=i(c,[["render",F]]);export{b as __pageData,f as default};
