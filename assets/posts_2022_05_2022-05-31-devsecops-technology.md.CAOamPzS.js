import{_ as a,a as t,af as r,o as s}from"./chunks/framework.C87LdZyP.js";const o="/assets/KubernetesSecurity.Mw3OhSN7.png",u=JSON.parse('{"title":"DevSecOps: 技术篇（Technology）","description":"","frontmatter":{"title":"DevSecOps: 技术篇（Technology）","date":"2022-05-31T00:00:00.000Z","tags":["devsecops","devops"],"category":["运维"]},"headers":[],"relativePath":"posts/2022/05/2022-05-31-devsecops-technology.md","filePath":"posts/2022/05/2022-05-31-devsecops-technology.md","lastUpdated":1718173059000}'),i={name:"posts/2022/05/2022-05-31-devsecops-technology.md"};function l(n,e,c,p,h,d){return s(),t("div",null,e[0]||(e[0]=[r('<p>技术使您的员工能够正确执行<a href="./2022-05-30-devsecops-overview">DevSecOps</a>流程。当大多数人想到 DevSecOps 和<a href="https://snyk.io/learn/what-is-ci-cd-pipeline-and-tools-explained/" target="_blank" rel="noreferrer">CI/CD</a>时，工具通常是最重要的。集成和自动化各种开发、安全和运营流程的能力是成功实施 DevSecOps 的核心。以下是组织在寻求在企业内实施成功的 DevSecOps 方法时必须考虑的技术集合。</p><h2 id="源代码存储库" tabindex="-1">源代码存储库 <a class="header-anchor" href="#源代码存储库" aria-label="Permalink to &quot;源代码存储库&quot;">​</a></h2><p>源代码存储库是地球上几乎所有开发环境的核心。在实施 DevSecOps 方法时，存储库是管道中大多数其他技术集成的关键技术。当组织评估其准备采用 DevSecOps 范式时，必须考虑存储库与其他关键技术集成的能力。</p><p>随着越来越多的应用程序环境方面在代码中定义，存储库的安全性变得至关重要。必须实施用户访问、存储库配置等方面的最佳实践。将存储库暴露给未经授权或不必要的各方可能会导致重大暴露。</p><h2 id="技术聚焦-bitbucket-存储库的最佳实践" tabindex="-1">技术聚焦：bitbucket 存储库的最佳实践 <a class="header-anchor" href="#技术聚焦-bitbucket-存储库的最佳实践" aria-label="Permalink to &quot;技术聚焦：bitbucket 存储库的最佳实践&quot;">​</a></h2><p>DevSecOps 组织中最受欢迎的存储库之一是 Bitbucket。它基于 Web 的便捷界面以及与各种其他技术的集成使其完美匹配 DevSecOps 的自动化和编排要求。然而，随着这种流行度的增加，安全漏洞的发生率增加了，这通常是由于不安全的配置或存储库的使用。为了帮助防御这些问题，应采用以下最佳实践：</p><ol><li><strong>切勿将凭据存储为 Bitbucket 中的代码/配置。</strong> 对于存储在 Bitbucket 中的任何存储库，应始终遵循机密管理实践。其中一些实践包括利用 git-secrets、定期秘密审计和使用信誉良好的秘密管理器。</li><li><strong>删除敏感数据</strong> 如果敏感数据最终进入存储库，则使所有暴露的令牌和密码无效，删除信息并清除 Git 历史记录，并评估泄露的私人信息的影响。</li><li><strong>严格控制访问</strong> 存储库安全性故障通常归结为人为错误。为了帮助减轻这种风险，请利用强大的用户管理并使用访问控制技术。</li><li><strong>添加 SECURITY.md 文件</strong> 您应该包含一个 SECURITY.md 文件，该文件突出显示项目的安全相关信息。该文件应包括披露策略、安全更新策略、安全相关配置、已知安全漏洞和未来增强功能。</li><li><strong>验证 Bitbucket 应用程序</strong> 这些应用程序由第三方开发人员编写，应检查访问权限、作者/组织可信度和整体安全状况。</li><li><strong>通过代码洞察获取安全提示作为工作流的一部分</strong> 使用 Bitbucket Code Insights 对所有打开的拉取请求执行扫描。这将有助于识别 PR 可能引入的新漏洞。</li><li><strong>向 PR 添加安全测试</strong> 使用 Bitbucket 挂钩检查 PR 是否不会引入新漏洞。</li><li><strong>在 Bitbucket 管道中</strong> 添加安全测试 将安全扫描管道添加到 CI/CD 流中，以确保自动化管道不包含安全回归。</li><li><strong>考虑 Bitbucket 服务器</strong> 为了显着减少存储库的攻击面，Bitbucket 服务器允许将存储库托管在本地。</li><li><strong>轮换 SSH 密钥和个人访问令牌</strong> Bitbucket 访问通常使用 SSH 密钥或个人用户令牌完成。定期轮换这些密钥可以降低泄露的密钥暴露您的存储库的风险。</li></ol><p>有关更多信息，请参阅我们的博客和备忘单，网址为<a href="https://snyk.io/blog/cheat-sheet-10-bitbucket-security-best-practices/" target="_blank" rel="noreferrer">https://snyk.io/blog/cheat-sheet-10-bitbucket-security-best-practices/</a></p><p><a href="./resources/2022-05-31-devsecops-technology/cheat-sheet-10-bitbucket-security-best-practices.pdf">下载 CHEAT SHEET</a></p><h2 id="配置管理" tabindex="-1">配置管理 <a class="header-anchor" href="#配置管理" aria-label="Permalink to &quot;配置管理&quot;">​</a></h2><p>传统上，定义和维护跨基础架构、系统软件甚至支持应用程序的一致配置所涉及的任务非常耗费资源。为了实现真正的 DevSecOps 模型，这种配置管理需要自动化并集成到整个开发生命周期中。随着代码定义组件级别的提高，这变得更容易实现。</p><p>集成和自动化配置管理具有许多关键优势。首先，它使环境变化的可视化和报告变得容易。虽然它不能替代变更管理实践，但它可以确保进行正确的跟踪。此外，这种自动化提供了精细的版本控制，允许将基础架构和支持软件更改链接到它们支持的代码版本。这有助于消除配置不匹配导致软件故障的问题。最后，通过自动化配置管理，组织还可以确保整个环境的配置一致。这样做的附带好处是可以更轻松地识别威胁的存在并响应安全事件。</p><p>当组织准备实施自动化配置管理时。有几个关键要素需要考虑。</p><h2 id="编排" tabindex="-1">编排 <a class="header-anchor" href="#编排" aria-label="Permalink to &quot;编排&quot;">​</a></h2><p>将自动化配置管理与基础架构即代码集成的一大好处是能够根据需要自动部署基础架构。无论环境是利用虚拟机环境、云环境还是容器，都有可用的解决方案以动态方式协调基础设施的部署。随着组织转向 DevSecOps 模型，他们需要了解这些部署的范围，并确保他们为其应用程序利用正确的工具。</p><p><img src="'+o+'" alt=""> 在 <a href="https://snyk.io/series/open-source-security/report-2020/" target="_blank" rel="noreferrer">2020 年开源安全状况报告</a>中，44% 的受访者表示他们使用 Kubernetes，但常见的安全实践并未得到广泛实施。</p><p><a href="./resources/2022-05-31-devsecops-technology/State-Of-Open-Source-Security-Report-2020.pdf">下载报告</a></p><h2 id="主机硬化" tabindex="-1">主机硬化 <a class="header-anchor" href="#主机硬化" aria-label="Permalink to &quot;主机硬化&quot;">​</a></h2><p>主机加固的做法并不新鲜，但如果更频繁地使用它，就会减少不必要的服务和应用程序公开暴露。随着高度动态的编排基础设施的引入，这种做法变得更加重要。无数安全事件示例与留下通用攻击面直接相关，使自动化攻击工具能够在最基本的攻击中取得成功。大多数技术的强化最佳实践和方法已经足够成熟，可以轻松地包含在模板的创建中，以减少攻击面并加强信任模型。后者可以编码为元数据，供 CI 管道进一步处理，然后用于其他过程，例如打补丁。</p><h2 id="技术聚焦-保护-docker-镜像" tabindex="-1">技术聚焦：保护 docker 镜像 <a class="header-anchor" href="#技术聚焦-保护-docker-镜像" aria-label="Permalink to &quot;技术聚焦：保护 docker 镜像&quot;">​</a></h2><p>随着越来越多的组织转向云原生环境，容器的使用呈指数级增长。Docker 镜像已经变得司空见惯，不安全的容器镜像也遭到破坏。为了帮助确保 docker 镜像的安全性，应遵循以下最佳实践：</p><ol><li><strong>最小化容器镜像</strong> 选择具有更少操作系统库和工具的镜像，以减少整体攻击面。在可能的情况下，利用基于 alpine 的映像，而不是成熟的系统操作系统映像。</li><li><strong>限制用户权限</strong> 在镜像上创建一个专用的用户和组，以最小的权限运行应用程序；使用同一用户运行此过程。</li><li><strong>签署和验证容器映像</strong> 在创建映像时对映像进行数字签名，并在从发布者处提取映像时验证它们的信任和真实性。</li><li><strong>定期监控镜像中的开源漏洞</strong> 扫描 docker 镜像中的已知漏洞，并将这些扫描结果集成到持续集成环境中。</li><li><strong>保护图像免受信息泄漏</strong> 令牌、密钥和其他秘密通常在构建时暴露在图像中。为了防止这种情况发生，请使用多阶段构建并利用 Docker 机密功能来挂载敏感文件而不缓存它们。此外，使用 .dockerignore 文件可以帮助避免 COPY 指令拉入作为构建上下文一部分的敏感文件。</li><li><strong>使用固定标签实现不变性</strong> 可以将新版本的图像推送到相同的标签，这可能会导致构建期间的图像不一致。为防止这种情况，请使用包含版本和操作系统的详细图像标签，或使用内容的哈希来标记图像。</li><li><strong>使用 COPY 代替 ADD</strong> ADD 指令可以暴露多种攻击向量，包括中间人攻击和 Zip Slip 攻击。只要有可能，请改用 COPY。</li><li><strong>为元数据使用标签</strong> 在图像标签中包含额外的元数据可以为用户提供有用的信息。此外，建议在图像标签中包含负责任的披露政策信息。</li><li><strong>使用多阶段构建来最小化镜像大小</strong> 使用多阶段构建来生成更小更干净的镜像，从而最小化捆绑 docker 镜像依赖项的攻击面。</li><li><strong>使用</strong> linter 使用静态代码分析工具可以强制执行 Dockerfile 最佳实践并检测潜在问题。</li></ol><p>有关更多信息，请参阅我们的博客和备忘单，网址为<a href="https://snyk.io/blog/10-docker-image-security-best-practices/" target="_blank" rel="noreferrer">https://snyk.io/blog/10-docker-image-security-best-practices/</a></p><p>鉴于此元数据是在代码中定义的，并且通常与应用程序的其余代码一起存储在存储库中，因此还应该实施能够识别配置中的漏洞或偏离强化最佳实践的自动化工具。这有助于确保安全性不仅融入到基础设施的设计和部署中，而且以一种不妨碍开发的不显眼的方式实现。</p><h2 id="用于修补的-ci-cd" tabindex="-1">用于修补的 CI/CD <a class="header-anchor" href="#用于修补的-ci-cd" aria-label="Permalink to &quot;用于修补的 CI/CD&quot;">​</a></h2><p>一旦元数据与每个资产相关联，组织就可以使用此数据在 CI/CD 级别实施修补。来自<a href="https://snyk.io/learn/threat-intelligence/" target="_blank" rel="noreferrer">威胁情报</a>和<a href="https://snyk.io/learn/vulnerability-management/" target="_blank" rel="noreferrer">漏洞管理</a>的信息可以与已部署的软件堆栈进行比较，以识别模板中的匹配项，然后依次排队等待部署。修补实时系统已成为过去，从而限制了停机时间的影响。这也将提供近乎实时的风险敞口的能力。</p><h2 id="安全编码实践" tabindex="-1">安全编码实践 <a class="header-anchor" href="#安全编码实践" aria-label="Permalink to &quot;安全编码实践&quot;">​</a></h2><p>必须根据新的安全建议不断检查所有<a href="https://snyk.io/learn/secure-coding-standards/" target="_blank" rel="noreferrer">安全编码标准。</a>代码的所有更改都需要根据这些建议进行验证和测试：在此过程中没有任何更改太小而无法避免。这不是一项微不足道的练习，不应低估与此类实践相关的好处，因为它们不仅限于开发生命周期中发生的更改量。</p><p><a href="https://snyk.io/learn/owasp-top-10-vulnerabilities/" target="_blank" rel="noreferrer">OWASP Top 10</a>是开始此审查的好地方，通过将代码更改转换为您的 QA 测试，利用自动化测试工具向开发团队提供及时的反馈。此外，具有 19 个验证域的 OWASP ASVS 非常适合构建安全软件的工艺。</p><p>随着新软件开发技术和框架的步伐不断加快，攻击驱动的开发提供了一个流程，开发人员可以通过该流程同时了解软件开发和应用程序安全的工具、技术和程序。</p><h2 id="应用级评估" tabindex="-1">应用级评估 <a class="header-anchor" href="#应用级评估" aria-label="Permalink to &quot;应用级评估&quot;">​</a></h2><p>自动评估应用程序的安全漏洞是 DevSecOps 的一个重要方面。它使企业能够充分了解他们的风险状况，并在漏洞被攻击者利用之前对其进行补救。以下解决方案有助于完善 DevSecOps 环境的安全态势：</p><h2 id="源代码扫描" tabindex="-1">源代码扫描 <a class="header-anchor" href="#源代码扫描" aria-label="Permalink to &quot;源代码扫描&quot;">​</a></h2><p><a href="https://snyk.io/learn/application-security/static-application-security-testing/" target="_blank" rel="noreferrer">实施静态应用程序安全测试 (SAST)</a>工具应涵盖源代码扫描。SAST 用于扫描源代码存储库，通常是主分支，识别漏洞并执行软件组成分析。SAST 工具应集成到提交后流程中，以确保主动扫描引入的新代码以查找漏洞。拥有 SAST 工具集成可以在软件开发生命周期的早期修复漏洞，并降低应用程序风险和暴露。</p><h4 id="动态应用程序扫描工具-dast" tabindex="-1">动态应用程序扫描工具 (DAST) <a class="header-anchor" href="#动态应用程序扫描工具-dast" aria-label="Permalink to &quot;动态应用程序扫描工具 (DAST)&quot;">​</a></h4><p><a href="https://snyk.io/learn/application-security/dast-dynamic-application-security-testing/" target="_blank" rel="noreferrer">动态应用程序扫描</a>工具旨在扫描处于运行状态的登台和生产网站，分析输入字段、表单和 Web 应用程序的许多方面以防止漏洞。这些工具应在发布部署到后续环境时集成到管道中。</p><h4 id="sast-ide-集成" tabindex="-1">SAST IDE 集成 <a class="header-anchor" href="#sast-ide-集成" aria-label="Permalink to &quot;SAST IDE 集成&quot;">​</a></h4><p>静态代码分析插件的 IDE 集成允许开发人员在集成开发环境中获得近乎实时的不安全编码实践通知。这提供了一种无需离开开发环境即可立即优化和缓解漏洞的有效方法。</p><h4 id="二进制扫描" tabindex="-1">二进制扫描 <a class="header-anchor" href="#二进制扫描" aria-label="Permalink to &quot;二进制扫描&quot;">​</a></h4><p>必须扫描所有二进制文件以查找源自编码清单的安全问题，然后必须对二进制文件进行数字签名。数字签名的处理方式与元数据相同。例如，在 CI 中，只能使用和实施已签名的二进制文件，从而确保正确级别的安全签核，而无需等待安全团队的免费周期。</p><h4 id="部署前审计" tabindex="-1">部署前审计 <a class="header-anchor" href="#部署前审计" aria-label="Permalink to &quot;部署前审计&quot;">​</a></h4><p>使用预定义的模板来构建资产对于确保所需的安全级别至关重要，尽管这应该辅以基于主机的扫描。大多数安全扫描程序现在都提供了允许您导入模板的合规模块。</p><h4 id="部署后审计" tabindex="-1">部署后审计 <a class="header-anchor" href="#部署后审计" aria-label="Permalink to &quot;部署后审计&quot;">​</a></h4><p>这些预定义模板一旦实例化，就可以根据部署前扫描检查任何差异，以识别可能引入安全威胁的任何更改。这应该通过使用 API 集成来实现明显的自动化目的。</p><h4 id="自动化漏洞管理" tabindex="-1">自动化漏洞管理 <a class="header-anchor" href="#自动化漏洞管理" aria-label="Permalink to &quot;自动化漏洞管理&quot;">​</a></h4><p>漏洞管理解决方案应通过 API 集成到基础架构和 Web 应用程序扫描平台中。这种集成向组织保证，所有发现的漏洞都被跟踪。此外，在成熟的 DevSecOps 环境中，它可以提供活动威胁与已识别漏洞的实时关联。这有助于识别以下内容：</p><ol><li>哪些资产会受到已知攻击。</li><li>任何可能对业务构成直接风险的新威胁。</li></ol><p>漏洞管理流程还应与开发人员错误跟踪系统集成。通过这种方式，可以在发现漏洞时立即打开错误记录，从而确保更快的修复。</p><h4 id="自动合规扫描" tabindex="-1">自动合规扫描 <a class="header-anchor" href="#自动合规扫描" aria-label="Permalink to &quot;自动合规扫描&quot;">​</a></h4><p>可以使用自动安全配置评估来实现合规性，以降低风险并保持持续合规性。这有助于通过减少评估系统所需的工作量和时间来降低合规成本，并且它允许与业务 GRC 工具和帮助台应用程序共享合规数据，以提供合规状态的可见性。</p><h3 id="秘密管理" tabindex="-1">秘密管理 <a class="header-anchor" href="#秘密管理" aria-label="Permalink to &quot;秘密管理&quot;">​</a></h3><p>信息安全环境中的“秘密”包括团队应该知道的所有私人信息，例如数据库或第三方 API。要建立受信任的连接，凭据或证书或 API 令牌是必要的，但即使有这些预防措施，处理机密也可能具有挑战性，并且通常会成为错误甚至安全漏洞的来源。</p><p>使处理机密任务更容易的技术包括在源代码中使用常量，或将机密存储在未检入版本控制的配置文件中。这些技术解决了一些问题，但它们也产生了自己的挑战，尤其是在密钥轮换方面。</p><p>理想的方法是同步的、加密的、共享的密码存储，所有团队成员都可以单独解密，但不使用共享密码。有两个工具可以实现这一点：GPG（Gnu Privacy Guard）和 Pass。GPG 允许实施公钥基础设施，并且经常用于电子邮件加密。然而，GPG 使用起来可能很复杂，而 Pass——其开发人员称之为“标准 Unix 密码管理器”——为用户提供了一个方便的 GPG 包装。Pass 允许您使用一个或多个私钥对秘密信息进行加密，所有加密信息都以平面文件的形式存储在一个目录中，可以使用版本控制进行共享。这些工具促进了仍然安全的加密、可共享信息池。</p><p>使用 GPG 和 Pass 等工具有效管理机密是 DevSecOps 的基本要素，因为它们从请求到创建和分发，确保整个链的安全。</p><hr><ul><li><a href="https://snyk.io/series/devsecops/technology/" target="_blank" rel="noreferrer">https://snyk.io/series/devsecops/technology/</a></li></ul>',57)]))}const g=a(i,[["render",l]]);export{u as __pageData,g as default};
