import{_ as i,a,af as n,o as t}from"./chunks/framework.C87LdZyP.js";const p="/assets/202141619442791.DwWswC2x.png",l="/assets/182237406020250.Cp9rux3I.png",e="/assets/182607473751583.8xdkf1sc.png",h="/assets/184842466504875.CdxoKDz9.png",k="/assets/184116865719833.DHL9p_Nh.png",d="/assets/185395984249125.C6c-5jNP.png",r="/assets/185590572297500.Dcp7u3zU.png",o="/assets/185931256789500.CmlI0Svj.png",F="/assets/186059328242291.DTjtRkHa.png",g="/assets/187967212576666.DP0_eJC4.png",c="/assets/189589040490916.CkWTFV-C.png",y="/assets/194849564241333.OEvhsqWW.png",D="/assets/194968910291166.DI3VTlqQ.png",C="/assets/195056844391458.pXs4gk0B.png",m="/assets/195527632555375.DMCcyH-f.png",u="/assets/195647208212916.Btt52p_p.png",A="/assets/195707834582541.CoUq3B8h.png",b="/assets/196064520760208.Ch_6ShG8.png",S=JSON.parse('{"title":"Dify + FastAPI 创建自定义工具","description":"","frontmatter":{"title":"Dify + FastAPI 创建自定义工具","date":"2024-08-02 10:00:00","tags":["dify"],"category":["AI"]},"headers":[],"relativePath":"posts/2024/08/2024-08-02-dify-api-extension.md","filePath":"posts/2024/08/2024-08-02-dify-api-extension.md","lastUpdated":1722954728000}'),v={name:"posts/2024/08/2024-08-02-dify-api-extension.md"};function E(B,s,f,_,x,q){return t(),a("div",null,s[0]||(s[0]=[n('<div class="admonition abstract"><p class="admonition-title">abstract</p><p>本文介绍源代码运行Dify，使用容器和源码进行二开的方案。 如何使用 <strong>FastAPI 创建一个服务并使用 Dify 自定义工具调用</strong>。</p></div><p>Dify 提供了强大的流程编排能力和众多丰富的工具，但是很多时候我们还要实现个性化的需求。 最常见的就是和我们私有的服务集成，今天就演示如何使用 FastAPI 开发一个自定义工具。</p><p>文章主要内容：</p><ul><li>源码运行 Dify</li><li>容器挂载插件代码</li><li>FastAPI 服务</li><li>自定义工具</li><li>JSON解析节点</li><li>条件判断和汇总节点</li></ul><p>先看下最终结果：</p><p><img src="'+p+`" alt="自定义工具和流程编排"></p><h2 id="容器运行中间件" tabindex="-1">容器运行中间件 <a class="header-anchor" href="#容器运行中间件" aria-label="Permalink to &quot;容器运行中间件&quot;">​</a></h2><p>使用中间件和源码分离的方式运行 Dify 不是本文必须的。</p><p>我们可以参考 <a href="https://docs.dify.ai/getting-started/install-self-hosted/local-source-code" target="_blank" rel="noreferrer">使用源代码启动 Dify</a> 在本地启动 dify 服务。</p><p>首先是克隆项目</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> clone</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> https://github.com/langgenius/dify.git</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> dify</span></span></code></pre></div><p>复制 env 文件</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">cp</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> middleware.env.example</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> middleware.env</span></span></code></pre></div><p>如果你本机部署过 Postgresql 等组件，要记得修改端口，避免重复，比如我就改了端口号：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">EXPOSE_POSTGRES_PORT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">5542</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">EXPOSE_REDIS_PORT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">6389</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">EXPOSE_SANDBOX_PORT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">8594</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">EXPOSE_SSRF_PROXY_PORT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">3528</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">EXPOSE_WEAVIATE_PORT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">8580</span></span></code></pre></div><p>用 Compose 启动容器，</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> compose</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> -f</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> docker-compose.middleware.yaml</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> up</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> -d</span></span></code></pre></div><p>我检查了 compose 文件，确实设置了 <code>middleware.env</code> ，但是在我的环境li并没有起作用， 我又重新指定了下 env 文件，有遇到过同样问题的可以参考下面命令：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">docker-compose</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> --env-file</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> middleware.env</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> -f</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> docker-compose.middleware.yaml</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> up</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> -d</span></span></code></pre></div><p>运行成功的输出大概如下：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> docker-compose --env-file middleware.env -f docker-compose.middleware.yaml up</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">[+] Building 0.0s (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">0/0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">[+] Running 6/6</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> ✔</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> Network</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> docker_default</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">             Created</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">                 0.1s</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> ✔</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> Network</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> docker_ssrf_proxy_network</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">  Created</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">                 0.0s</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> ✔</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> Container</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> docker-ssrf_proxy-1</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">      Created</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">                 0.3s</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> ✔</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> Container</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> docker-sandbox-1</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">         Created</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">                 0.2s</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> ✔</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> Container</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> docker-db-1</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">              Created</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">                 0.2s</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> ✔</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> Container</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> docker-redis-1</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">           Created</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">                 0.2s</span></span></code></pre></div><h2 id="源码启动应用" tabindex="-1">源码启动应用 <a class="header-anchor" href="#源码启动应用" aria-label="Permalink to &quot;源码启动应用&quot;">​</a></h2><p>Dify 应用代码 在 <code>api</code> 目录下，我们进入到 <code>api</code> 目录启动应用。</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> api</span></span></code></pre></div><p>修改 <code>.env</code> 文件，设置 SECURITY_KEY。</p><div class="admonition note"><p class="admonition-title">SECRET_KEY</p><p><code>SECRET_KEY</code> 用于对敏感数据进行加密和签名。 如果 <code>SECRET_KEY</code> 被泄露，攻击者就有可能伪造会话或发起 CSRF 攻击。因此，SECRET_KEY 的安全性至关重要。 当然，如果你本机 使用就无所谓了。</p></div><p>MacOS 系统的命令：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">openssl</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> rand</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> -base64</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 42</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">sed</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> -i</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &#39;&#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &#39;s/SECRET_KEY=.*/SECRET_KEY=&lt;your-key&gt;/g&#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> .env</span></span></code></pre></div><p>Linux 系统的命令：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">openssl</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> rand</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> -base64</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 42</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">sed</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> -i</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &#39;s/SECRET_KEY=.*/SECRET_KEY=&lt;your-key&gt;/&#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> .env</span></span></code></pre></div><p>大家不喜欢命令的话，可以直接打开文件直接编辑，比如我就是。</p><h3 id="初始化python环境" tabindex="-1">初始化Python环境 <a class="header-anchor" href="#初始化python环境" aria-label="Permalink to &quot;初始化Python环境&quot;">​</a></h3><p>我们仍然使用 Conda 初始化一个新的 Python 环境，并激活：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">conda</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> env</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> create</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> -n</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> dify</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> python=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">3.10</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">conda</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> activate</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> dify</span></span></code></pre></div><p>Dify 使用 Poetry 管理，我们安装 Poetry 和依赖：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">pip</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> poetry</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">poetry</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> install</span></span></code></pre></div><p>数据迁移和初始化：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"># poetry shell</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">flask</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> db</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> upgrade</span></span></code></pre></div><p>运行应用：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">flask</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> --host</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 0.0.0.0</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> --port=5001</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> --debug</span></span></code></pre></div><h2 id="运行前端" tabindex="-1">运行前端 <a class="header-anchor" href="#运行前端" aria-label="Permalink to &quot;运行前端&quot;">​</a></h2><p>前端运行，前端运行比较简单：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> web</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> install</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> start</span></span></code></pre></div><p>大概看到如下的输出：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> pnpm start</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> dify-web@0.6.16 start dify/web</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> cp -r .next/static .next/standalone/.next/static &amp;&amp; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">cp</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> -r</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> public</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> .next/standalone/public</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> &amp;&amp; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">cross-env</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> PORT=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">$npm_config_port </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">HOSTNAME=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">$npm_config_host </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">node</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> .next/standalone/server.js</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">  ▲</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> Next.js</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 14.2.4</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">  -</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> Local:</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">        http://localhost:3000</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">  -</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> Network:</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">      http://0.0.0.0:3000</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> ✓</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> Starting...</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> ✓</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> Ready</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> in</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> 144ms</span></span></code></pre></div><p>浏览器访问前端就可以看到我们的界面了（如果是新数据库需要设置用户名密码）：</p><ul><li><a href="http://localhost:3000" target="_blank" rel="noreferrer">http://localhost:3000</a></li></ul><p><img src="`+l+`" alt="Dify 界面"></p><h2 id="容器运行-dify" tabindex="-1">容器运行 Dify <a class="header-anchor" href="#容器运行-dify" aria-label="Permalink to &quot;容器运行 Dify&quot;">​</a></h2><p>自定义开发 Dify 组件一般都只需要新增文件，我们其实可以不适用源码运行，而是用文件挂载的方式增加代码。</p><p>比如在 Compose 文件里面增加一个 volume 可以达到一样的效果：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">    volumes:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">      # Mount the storage directory to the container, for storing user files.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">      -</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> ./volumes/app/storage:/app/api/storage</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">      -</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> ./external_data_tool/weather_search:/app/api/core/external_data_tool/weather_search</span></span></code></pre></div><h2 id="ide-运行" tabindex="-1">IDE 运行 <a class="header-anchor" href="#ide-运行" aria-label="Permalink to &quot;IDE 运行&quot;">​</a></h2><p>对 Dify 接口不熟悉的同学肯定希望在开发的过程中进行调试，大家可以在喜欢的 IDE 用 Flask 程序标准的方式进行调试。</p><p>比如我用的 PyCharm，从 IDE 启动调试配置如下：</p><p><img src="`+e+`" alt="PyCharm 调试 Dify"></p><h2 id="自定义工具" tabindex="-1">自定义工具 <a class="header-anchor" href="#自定义工具" aria-label="Permalink to &quot;自定义工具&quot;">​</a></h2><p>我们现在看一看如何自定义工具。</p><h3 id="fastapi-服务" tabindex="-1">FastAPI 服务 <a class="header-anchor" href="#fastapi-服务" aria-label="Permalink to &quot;FastAPI 服务&quot;">​</a></h3><p>我们现在实现一个 FastAPI 服务，让 Dify 程序调用。</p><p>程序比较简单，</p><ul><li>实现一个简单的认证，密码为 <code>123456</code></li><li>接收并打印收到的消息</li><li>返回一个简单的JSON</li></ul><p>程序如下，不做过多的解释了：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">rom fastapi </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> FastAPI, Body, HTTPException, Header</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> fastapi.responses </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> FileResponse</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> pydantic </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> BaseModel</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">app </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> FastAPI(</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">servers</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">[</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    {</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;url&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;http://localhost:8000&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">])</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> InputData</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6CB6FF;">BaseModel</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">):</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    prompt: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">str</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    params: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">dict</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">@app.post</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;/api/dify/receive&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">async</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> dify_receive</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(data: InputData </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> Body(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">), authorization: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">str</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> Header(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">None</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)):</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">    &quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">    Receive API query data from Dify.</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">    &quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    expected_api_key </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;123456&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    auth_scheme, _, api_key </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> authorization.partition(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39; &#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> auth_scheme.lower() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">!=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;bearer&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> or</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> api_key </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">!=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> expected_api_key:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">        raise</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> HTTPException(</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">status_code</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">401</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">detail</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;Unauthorized&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">        &quot;result&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;ok&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    }</span></span></code></pre></div><div class="admonition note"><p class="admonition-title">关于 Server</p><p><code>FastAPI</code> 传递 <code>servers</code> 参数是为了生成 OpenAPI 直接可以用，如果 Dify 是在 Docker 中运行， 我们的服务地址需要填写正确的主机，比如：<code>http://host.docker.internal:8000</code>。</p></div><p>启动应用程序，可以使用如下命令：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">uvicorn</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> main:app</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> --reload</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> --host</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 0.0.0.0</span></span></code></pre></div><p>然后访问：<code>http://127.0.0.1:8000/docs#/</code></p><p>可以看到文档 Swagger 文档：</p><p><img src="`+h+'" alt="FastAPI Docs"></p><p>访问 <code>http://127.0.0.1:8000/openapi.json</code> 可以看到 OpenAPI 格式的 Json 文件，基本把他<strong>拷贝</strong>下来。</p><h2 id="添加自定义工具" tabindex="-1">添加自定义工具 <a class="header-anchor" href="#添加自定义工具" aria-label="Permalink to &quot;添加自定义工具&quot;">​</a></h2><p>现在回到 Dify 界面，点击 <code>工具</code>-&gt;<code>自定义</code>-&gt;<code>创建自定义工具</code>。</p><p><img src="'+k+'" alt="Dify 工具页面"></p><p>在弹框中填写名称，并把刚才拷贝的 JSON 填写进去，</p><p><img src="'+d+'" alt="创建自定义工具"></p><p>鉴权方式选择 <code>API Key</code>-&gt;<code>Bearer</code>，保存。</p><p>然后创建一个空白应用，选择 <code>聊天助手</code> 和 <code>工作流编排</code> 类型：</p><p><img src="'+r+'" alt="应用类型选择"></p><p>右键添加添加节点的时候选择我们刚刚创建的自定义节点：</p><p><img src="'+o+'" alt="选择自定义工具"></p><p>节点配置如下：</p><p><img src="'+F+'" alt="自定义工具配置"></p><p>当然，<strong>认证信息可以在工具创建的时候配置</strong>。</p><p>然后我们重新连接节点，发个消息测试下，数据已经按照希望的数据返回了。</p><p><img src="'+g+'" alt="编排流程和测试"></p><p>可以看到返回信息是按照文本显示，返回信息也支持 Markdown 的显示（猜的然后换阵了下确实可以）， 这样我们就可以拿来做一些复杂数据的展示，比如超链接、问价下载、图片展示等：</p><p><img src="'+c+`" alt="返回图片"></p><blockquote><p>细心看上面截图，可以看到回复信息不是那么 <strong>干净</strong>，有引号等信息。</p></blockquote><div class="admonition note"><p class="admonition-title">复杂的UI展示格式</p><p>Dify 只支持<code>文本</code>，<code>链接</code>，<code>图片</code>，<code>文件</code>等几种消息格式，以及他们的组合。并不能支持复杂的文件类型和格式。 而参数也好像只有默认的 <code>text</code>和<code>file</code>几个固定的参数，不能实现很复杂的消息格式。 如果想要对消息格式进行定制，需要对 Dify 前端进行二开。</p></div><h2 id="json解析节点" tabindex="-1">JSON解析节点 <a class="header-anchor" href="#json解析节点" aria-label="Permalink to &quot;JSON解析节点&quot;">​</a></h2><p>刚才我们看到，虽然返回内容支持 「<strong>Markdown</strong>」展示，但是内容要么是JSON, 要么字符串都是引号开头的。如何能干净的显示文件内容呢，这就是用到<strong>JSON解析</strong>了。</p><p>我们现在把文件返回改成：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">return</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">    &#39;success&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">True</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">    &#39;text&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: data.prompt,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">    &#39;image&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;![image](https://xxx/images/size/w1200/2023/10/free-images.jpg)&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><p>添加一个 JSON 解析节点： <img src="`+y+'" alt="JSON 解析节点"></p><p>流程和节点如下配置：</p><p><img src="'+D+'" alt="JSON 解析节点编排"></p><p>再测试，可以看到聊天能干净的返回图片了：</p><p><img src="'+C+'" alt="聊天返回图片"></p><h2 id="条件判断" tabindex="-1">条件判断 <a class="header-anchor" href="#条件判断" aria-label="Permalink to &quot;条件判断&quot;">​</a></h2><p>下面我们再看看如何分支，实现如下场景：</p><ul><li>当请求 <code>success</code> 的时候，<strong>显示图片</strong></li><li>否则，显示<code>text</code>的内容</li></ul><p>增加一个条件分支如下：</p><p><img src="'+m+'" alt="条件分支配置"></p><p>那之前的<code>JSON 解析</code>节点配置在分支的 <code>IF</code> 后面， 再添加一个<code>JSON 解析</code>节点配置在分支的 <code>ELSE</code> 后面，</p><p><img src="'+u+'" alt=""></p><div class="admonition note"><p class="admonition-title">JSON PATH</p><p>Dify 的 JSON 解析节点使用 JSON PATH 提取数据，大家可以 <a href="https://jsonpath.com" target="_blank" rel="noreferrer">在线测试JSON Path</a> 的用法。</p></div><p>然后增加一个<code>变量聚合器</code>，不用配置，连线如下图：</p><p><img src="'+A+`" alt="使用变量聚合器"></p><p>调整代码返回如下：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">   return</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">        &#39;success&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: data.prompt</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">==</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;hello&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">        &#39;prompt&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: data.prompt,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">        &#39;xlsx&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;[Prompts.xlsx](http://localhost:3001/api/v1/openai/chat/completions)&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">    &#39;image&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;![image](https://xxx/images/size/w1200/2023/10/free-images.jpg)&#39;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">        &#39;text&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;&quot;&quot;## 生成式 AI 应用创新引擎...&quot;&quot;&quot;</span></span></code></pre></div><p>调试运行程序，聊天窗口输入 <code>world</code>，可以得到回复：</p><p><img src="`+b+'" alt="文本Markdown解析返回"></p><h2 id="结语" tabindex="-1">结语 <a class="header-anchor" href="#结语" aria-label="Permalink to &quot;结语&quot;">​</a></h2><p>通过<strong>自定义工具</strong>、配合<strong>流程编排</strong>以及<strong>JSON解析</strong>等节点，我们可以实现很多常用的逻辑处理。</p><p>唯一美中不足的就是，Dify 对于消息的入参、出参定义还是比较克制，我们需要使用 AI 时代的程序编排思维去使用 Dify， 还有就是<strong>不支持上传文件</strong>（可以上传图片），无法集成一些文件处理功能，比如之前实现的对 Excel 文件的问答填写。</p><p>!!! article 相关文章阅读</p><ul><li><a href="./2024-08-01-dify-sd-webui">Dify+谷歌翻译 使用中文提示词实现本地文生图</a></li><li><a href="./../07/2024-07-27-steamlit-rag-excel">Streamlit + AnythingLLM + LM Studio</a></li><li><a href="./../07/2024-07-27-steamlit-i18n">Streamlit 实现中文上传控件和国际化示例</a></li><li><a href="./../07/2024-07-28-graph-rag-intro">微软提出的 GraphRAG 解决了什么问题</a> !!!</li></ul>',118)]))}const O=i(v,[["render",E]]);export{S as __pageData,O as default};
