import{_ as a,a as i,af as n,o as l}from"./chunks/framework.C87LdZyP.js";const c=JSON.parse('{"title":"Scala: Evaluation of Function Applications","description":"","frontmatter":{"title":"Scala: Evaluation of Function Applications","date":"2017-12-06T00:00:00.000Z","tags":["scala","fp"]},"headers":[],"relativePath":"posts/2017/12/2017-12-06-1-scala-function-evalutian.md","filePath":"posts/2017/12/2017-12-06-1-scala-function-evalutian.md","lastUpdated":1718173059000}'),p={name:"posts/2017/12/2017-12-06-1-scala-function-evalutian.md"};function e(t,s,h,k,d,o){return l(),i("div",null,s[0]||(s[0]=[n(`<p>有参数的函数，和表达式的计算方法类似：</p><ol><li>从左至右计算所有的函数参数</li><li>从左手边替换函数程序</li><li>同时，把形参替换成实参</li></ol><h3 id="call-by-value" tabindex="-1">call-by-value <a class="header-anchor" href="#call-by-value" aria-label="Permalink to &quot;call-by-value&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span>sumOfSquares(3, 2+2)</span></span>
<span class="line"><span>sumOfSquares(3, 4)</span></span>
<span class="line"><span>squares(3) + squares(4)</span></span>
<span class="line"><span>3*3 + square(4)</span></span>
<span class="line"><span>9 + square(4)</span></span>
<span class="line"><span>9 + 16</span></span>
<span class="line"><span>25</span></span></code></pre></div><h3 id="call-by-name" tabindex="-1">call-by-name <a class="header-anchor" href="#call-by-name" aria-label="Permalink to &quot;call-by-name&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span>sumOfSquares(3, 2+2)</span></span>
<span class="line"><span>square(3) + square(2+2)</span></span>
<span class="line"><span>3*3 + square(2+2)</span></span>
<span class="line"><span>9 + sqare(2+2)</span></span>
<span class="line"><span>9 + (2+2) * (2+2)</span></span>
<span class="line"><span>9 + 4*4</span></span>
<span class="line"><span>25</span></span></code></pre></div><p>满足一下条件，则两种策略会计算出想通的值：</p><ul><li>reduced expression 由 pure function 组成 <ul><li>c++ 就有副作用</li></ul></li><li>both evaluation termitate <ul><li>val loop: Int = loop 就没有terminate</li></ul></li></ul><h3 id="各自的优势" tabindex="-1">各自的优势 <a class="header-anchor" href="#各自的优势" aria-label="Permalink to &quot;各自的优势&quot;">​</a></h3><p>Call-by-value 只会计算每个函数参数一次，</p><p>Call-by-name 相关的参数在没有使用的时候，参数根本不会被计算</p><h2 id="思考" tabindex="-1">思考 <a class="header-anchor" href="#思考" aria-label="Permalink to &quot;思考&quot;">​</a></h2><p>如下的函数定义</p><div class="language-scala vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">scala</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> test</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">x</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">y</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> x</span></span></code></pre></div><p>下面的程序，哪种策略更快(has the fewest reductino steps)</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span>test(2,3) // same</span></span>
<span class="line"><span>test(3+4,6) // CBV</span></span>
<span class="line"><span>test(2. 3+4) // CBN</span></span>
<span class="line"><span>test(3+4, 2*4) // same</span></span>
<span class="line"><span></span></span>
<span class="line"><span>test(2,3)</span></span>
<span class="line"><span>2*2</span></span>
<span class="line"><span>4</span></span>
<span class="line"><span></span></span>
<span class="line"><span>test(3+4, 8)</span></span>
<span class="line"><span>CBV          CBN</span></span>
<span class="line"><span>test(7,8)   （3+4）* （3+4）</span></span>
<span class="line"><span>7*7          7 * （3*4）</span></span>
<span class="line"><span>49           7 * 7</span></span>
<span class="line"><span>             49</span></span>
<span class="line"><span>            </span></span>
<span class="line"><span>test(3, 2*4)</span></span>
<span class="line"><span>CBV          CBN</span></span>
<span class="line"><span>test(3,8)    3*3</span></span>
<span class="line"><span>3*3          9</span></span>
<span class="line"><span>9</span></span></code></pre></div><h2 id="call-by-name-call-by-value-and-termination" tabindex="-1">Call-by-name, Call-by-value and termination <a class="header-anchor" href="#call-by-name-call-by-value-and-termination" aria-label="Permalink to &quot;Call-by-name, Call-by-value and termination&quot;">​</a></h2><ul><li>如果 CBV e terminate, CBN 同样 e termiante</li><li>反过来不成立</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span>def first(x: Int, y: Int) = x</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span>CBN                CBV</span></span>
<span class="line"><span>first(1, loop)     first(1, loop)</span></span>
<span class="line"><span>1                  ...</span></span></code></pre></div><p>Scala 通常使用 call-by-value, 但是如果函数参数使用 <code>=&gt;</code> 开始，那么使用 call-by-name.</p><p>Example:</p><div class="language-scala vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">scala</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> constOne</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">x</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">y</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> Int</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 1</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span>constOne(1+2, loop)      constOne(loop, 1+2)</span></span>
<span class="line"><span>constOne(3, loop)        ....</span></span>
<span class="line"><span>1</span></span></code></pre></div><h2 id="condional-expression" tabindex="-1">Condional Expression <a class="header-anchor" href="#condional-expression" aria-label="Permalink to &quot;Condional Expression&quot;">​</a></h2><p>def abs(x: Int) = if(x&gt;=0) x else -x</p><h2 id="value-definitions-and-termination" tabindex="-1">Value Definitions and Termination <a class="header-anchor" href="#value-definitions-and-termination" aria-label="Permalink to &quot;Value Definitions and Termination&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span>def loop: Boolean = loop</span></span>
<span class="line"><span>def x = loop // is ok</span></span>
<span class="line"><span>val x = loop // will lead to an infinite loop.</span></span></code></pre></div><ul><li>and(x, y) == x &amp;&amp; y</li></ul><div class="language-scala vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">scala</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> and</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">Boolean</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">y</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> Boolean</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(x) y </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">else</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> false</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> and</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">Boolean</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">y</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> Boolean</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">x) </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">false</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> else</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> y</span></span></code></pre></div><ul><li>or(x, y) == x || y</li></ul><div class="language-scala vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">scala</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> or</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">x</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">Boolean</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">y</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> Boolean</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(x) </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">true</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> else</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> y</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> or</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">x</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">Boolean</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">y</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> Boolean</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">x) y </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">else</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> true</span></span></code></pre></div><h2 id="value-definitions" tabindex="-1">Value Definitions <a class="header-anchor" href="#value-definitions" aria-label="Permalink to &quot;Value Definitions&quot;">​</a></h2><p>The <code>def</code> form is <strong>by-name</strong>, 右手边只有在使用的时候才进行计算</p><p><code>val</code> form is <strong>by-value</strong>， 右手边部分在定义的时候就进行计算</p><p>def loop: Boolean = loop val loop: Boolean = loop</p>`,36)]))}const g=a(p,[["render",e]]);export{c as __pageData,g as default};
