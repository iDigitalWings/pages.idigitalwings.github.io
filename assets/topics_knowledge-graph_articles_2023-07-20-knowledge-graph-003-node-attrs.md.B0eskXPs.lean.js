import{_ as a,a as n,af as t,o as l}from"./chunks/framework.C87LdZyP.js";const p="/assets/3281218552882875.DVegBSmS.png",h="/assets/3281330963804541.t8Bgc8OH.png",e="/assets/3285118516009791.DNO6bgHU.png",k="/assets/3288609759114583.DDCdQXXF.png",d="/assets/3288854703927625.D3YGBh3l.png",r="/assets/3289167011668875.AgGyUx-J.png",i="/assets/3289206581916125.BUEo5i6L.png",g="/assets/3285392356307125.PLTlfCPR.png",o="/assets/3289994961824625.4-Ni9tnH.png",c="/assets/3288011518819250.u0WKA36g.png",F="/assets/3288097262575750.IMKRkn2K.png",y="/assets/3279773825623833.DdFjtMcT.png",D="/assets/3298143111746625.Bwmn0Dlk.png",C="/assets/3298527869864125._4r8e2B-.png",A="/assets/3300676309014541.DMd-0hPe.png",u="/assets/3300856554370250.CM0HeDyP.png",B="/assets/3301418193161958.jXQfK3JW.png",m="/assets/3301181148795916.DZrYHjfW.png",P=JSON.parse('{"title":"《构建个人知识图谱》003：知识元数据设计和属性提取","description":"","frontmatter":{"title":"《构建个人知识图谱》003：知识元数据设计和属性提取","date":"2023-07-20T00:00:00.000Z","tags":["ai","ml"],"category":["AI"]},"headers":[],"relativePath":"topics/knowledge-graph/articles/2023-07-20-knowledge-graph-003-node-attrs.md","filePath":"topics/knowledge-graph/articles/2023-07-20-knowledge-graph-003-node-attrs.md","lastUpdated":1718173059000}'),b={name:"topics/knowledge-graph/articles/2023-07-20-knowledge-graph-003-node-attrs.md"};function E(v,s,q,f,_,w){return l(),n("div",null,s[0]||(s[0]=[t('<div class="admonition abstract"><p class="admonition-title">abstract</p><p>书接上文，今天在基本的节点和边的基础上，进行知识节点元数据设计， 也就是扩展节点属性，最后浅谈一下属性提取，并看下我的个人知识图谱设计。</p></div><h2 id="元数据-属性设计" tabindex="-1">元数据（属性设计） <a class="header-anchor" href="#元数据-属性设计" aria-label="Permalink to &quot;元数据（属性设计）&quot;">​</a></h2><blockquote><p>为什么要对知识节点进行属性设计？</p></blockquote><p>既然要进行知识管理，那么像我们之前只有一个名称肯定是不够的，这时候就要对知识进行多维度管理。</p><p>知识属性设计的简单示例：</p><ul><li>比如你知道一个新名词叫做『ChatGPT』，你把他加到了知识图谱里面；</li><li>随着你对这个名词了解的越来越多， 你知道 <ul><li>ChatGPT 是一个 AI 产品，</li><li>使用了 GPT3、GPT4 的模型、</li><li>是 OpenAI 公司的产品、</li><li>ChatGPT 是一个 SaaS 服务，</li><li>他是收费的，但是提供免费试用，</li><li>它有 API 和 SDK 开放，等等</li></ul></li></ul><p>越来越多的信息丰富了 ChatGPT 这个知识点，这些看似杂乱的信息到底应该怎么表示呢。</p><h4 id="主体识别" tabindex="-1">主体识别 <a class="header-anchor" href="#主体识别" aria-label="Permalink to &quot;主体识别&quot;">​</a></h4><p>第一步我们要做的不是今天的主题『属性提取』，而是<strong>主体识别</strong>。主体识别也是人工智能的一个重要研究领域。</p><p>对于知识图谱来说，识别出的主题就是「<strong>知识节点</strong>」。在上面的例子中，<code>ChatGPT</code>，<code>GPT4</code>，<code>OpenAI</code>，<code>GPT3</code> 都是可以作为一个主体的，也就是说他本身也是一个事物。</p><p><img src="'+p+'" alt="识别出的实体"></p><h4 id="属性提取" tabindex="-1">属性提取 <a class="header-anchor" href="#属性提取" aria-label="Permalink to &quot;属性提取&quot;">​</a></h4><p>而上面例子中的<code>AI产品</code>，<code>SaaS 服务</code>，<code>收费</code>，<code>免费试用</code>，<code>提供 API</code>，<code>提供 SDK</code>等就可以作为 ChatGPT 的属性。</p><p><img src="'+h+'" alt="识别出的属性"></p><div class="admonition note"><p class="admonition-title">「主体」和「属性」的区别</p><p>「主体」和「属性」的区别就是：主体能单独存在（自己就是一个事物），比如<code>OpenAI</code>公司，<code>GPT4</code> 模型； 而属性则不能单独存在，你说<code>收费</code>时，你要说谁收费了，<code>SaaS 服务</code>你要说谁是一个 SaaS 服务。</p></div><h3 id="知识图谱表示" tabindex="-1">知识图谱表示 <a class="header-anchor" href="#知识图谱表示" aria-label="Permalink to &quot;知识图谱表示&quot;">​</a></h3><p>梳理好实体和属性之后，我们就可以考虑如何展示图谱了。</p><h4 id="主体和属性展示" tabindex="-1">主体和属性展示 <a class="header-anchor" href="#主体和属性展示" aria-label="Permalink to &quot;主体和属性展示&quot;">​</a></h4><p>实体之间最常见的方式就是用线连接，属性最简单的方法肯定是放在旁边，下面给一个示意图：</p><p><img src="'+e+'" alt="知识图谱表示示意"></p><h4 id="更简洁的展示" tabindex="-1">更简洁的展示 <a class="header-anchor" href="#更简洁的展示" aria-label="Permalink to &quot;更简洁的展示&quot;">​</a></h4><p>上面的方案很严重的一个问题就是，当我们的节点显示很多的时候，几百上千甚至只需要几十个，界面就放不下了。</p><p><img src="'+k+'" alt="二十个节点的效果展示"></p><p>上面的图如果加上连线就更混乱了。</p><blockquote><p>当然我们可以通过 UI 优化来达到更好的显示效果，但是无论怎么优化当系统显示太多内容都避免不了显示不下，杂乱的问题。</p></blockquote><p>很简单的方案就是直接去掉属性，只保留名称，再看看示意效果：</p><p><img src="'+d+'" alt="去掉属性之后的展示"></p><p>这个时候大致就能看到我们的实体了（有些名字偷懒没加上，线也没连接）。</p><p>用我们上一篇的工具3d 展示之后就是下面这样：</p><p><img src="'+r+'" alt="3d 示意"></p><p>显示文字之后：</p><p><img src="'+i+'" alt="3d 和文字示意"></p><h4 id="主体区分颜色" tabindex="-1">主体区分颜色 <a class="header-anchor" href="#主体区分颜色" aria-label="Permalink to &quot;主体区分颜色&quot;">​</a></h4><p>不过看了一会儿，发现了一个问题：主体的归类可视化做的不好。</p><p>我们对这些实体的第一印象是什么：</p><ul><li><code>ChatGPT</code> 是一个产品，</li><li><code>GPT3</code> 和 <code>GPT4</code> 都是大语言模型，</li><li><code>OpenAI</code> 是一家公司</li></ul><p>这些我们在看图谱时第一反应的印象没有在图谱上很好体现出来。下面优化下展示方式，比如给实体增加颜色：</p><p><img src="'+g+'" alt="给实体增加颜色"></p><p>我们挑选了最主要的属性来增加颜色，当然这个颜色选择也可以根据你的使用场景挑选不同的属性。</p><p>用上篇介绍的工具可视化之后大概这样：</p><p><img src="'+o+'" alt="知识图谱给节点增加颜色"></p><div class="admonition note"><p class="admonition-title">如何给实体增加多维度可视化</p><p>如果有很多主体的时候，我既想一眼看到主体的主要属性（产品、公司、模型）， 又想看到这个主体是哪些是美国的，哪些是中国的。应该怎么办。</p><p>常见的两种该方案：一个是使用聚合，另外一个是使用节点的其他特性来表示（比如形状、色系、明度等）。</p><p><img src="'+c+'" alt="通过形状区分多维属性"></p><p><img src="'+F+'" alt="通过聚合进行归类和区分属性"></p><p>这个功能对现阶段构建个人知识库不太必要，就不做 Demo 了。</p></div><h2 id="我的知识图谱设计" tabindex="-1">我的知识图谱设计 <a class="header-anchor" href="#我的知识图谱设计" aria-label="Permalink to &quot;我的知识图谱设计&quot;">​</a></h2><p>下面看看我自己怎么设计的知识图谱。</p><p>之前讲过，我现在还是从事技术相关工作居多，个人的知识沉淀也是大多基于此的。那我设计的时候也主要针对此类知识。</p><p>比如拿大家都熟悉的 LangChain 来说，他在我的知识世界里面长什么样呢：</p><ul><li>姓名：LangChain</li><li>类型：Agent 框架</li><li>开源：是</li><li>免费：是</li><li>个人评价：三颗星</li><li>流行程度：五颗星</li><li>开发语言：Python</li><li>主页：<a href="https://www.langchain.com" target="_blank" rel="noreferrer">https://www.langchain.com</a></li></ul><p>好了，一下子能想到这么多，基于刚才的属性描述，我们设计下通用的知识属性：</p><p><img src="'+y+`" alt="知识图谱节点属性"></p><p>产品设计过程先讲这么多，下面看看如何实现。</p><h2 id="知识图谱实现" tabindex="-1">知识图谱实现 <a class="header-anchor" href="#知识图谱实现" aria-label="Permalink to &quot;知识图谱实现&quot;">​</a></h2><p>截止当前介绍的为止，这个个人知识图谱后端就是标准的增删改查，不涉及什么好玩儿的实现或者复杂的逻辑。</p><p>在这个看脸的时代，咱们还是从前端开始，首先祭出我们的 <strong>VV大法</strong>（Vue+Vite），建一个 Vite + TypeScript 项目（<a href="https://vitejs.dev/guide/" target="_blank" rel="noreferrer">Vite文档</a>）。</p><h3 id="创建一个-vite-vue-项目" tabindex="-1">创建一个 Vite Vue 项目 <a class="header-anchor" href="#创建一个-vite-vue-项目" aria-label="Permalink to &quot;创建一个 Vite Vue 项目&quot;">​</a></h3><p>新建一个项目：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> yarn create vite</span></span></code></pre></div><p>输入项目名称：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> yarn create vite</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">yarn</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> create</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> v1.22.19</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">[1/4] 🔍  Resolving packages...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">[2/4] 🚚  Fetching packages...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">[3/4] 🔗  Linking dependencies...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">[4/4] 🔨  Building fresh packages...</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">success</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> Installed</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;create-vite@4.4.1&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> with</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> binaries:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">      -</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> create-vite</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">      -</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> cva</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">?</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> Project name: › vite-project</span></span></code></pre></div><p>选择Vue：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> yarn create vite</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">...</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">✔</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> Project</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> name:</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> …</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> knowledge-web</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">?</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> Select a framework: › - Use arrow-keys. Return to submit.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">    Vanilla</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">❯</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">   Vue</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">    React</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">    Preact</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">    Lit</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">    Svelte</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">    Solid</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">    Qwik</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">    Others</span></span></code></pre></div><p>接着选择 TypeScript：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> yarn create vite</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">...</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">✔</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> Project</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> name:</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> …</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> knowledge-web</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">✔</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> Select</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> a</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> framework:</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> ›</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> Vue</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">?</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> Select a variant: › - Use arrow-keys. Return to submit.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">❯</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">   TypeScript</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">    JavaScript</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">    Customize</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> with</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> create-vue</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> ↗</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">    Nuxt</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> ↗</span></span></code></pre></div><p>完成：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> yarn create vite</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">...</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">Scaffolding</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> project</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> in</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> /knowledge-web...</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">Done.</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> Now</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> run:</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">  cd</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> knowledge-web</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">  yarn</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">  yarn</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> dev</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">✨</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">  Done</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> in</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> 167.44s.</span></span></code></pre></div><p>进入项目安装下依赖：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> knowledge-web</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">yarn</span></span></code></pre></div><h3 id="使用-tailwind-css" tabindex="-1">使用 Tailwind CSS <a class="header-anchor" href="#使用-tailwind-css" aria-label="Permalink to &quot;使用 Tailwind CSS&quot;">​</a></h3><p>然后安装下宇宙第二的 CSS 框架 <a href="https://tailwindcss.com/docs/installation" target="_blank" rel="noreferrer">Tailwind</a>。</p><p>根据 <a href="https://tailwindcss.com/docs/guides/vite" target="_blank" rel="noreferrer">Vite Tailwind CSS 文档</a> 操作：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> install</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> -D</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> tailwindcss</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> postcss</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> autoprefixer</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">npx</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> tailwindcss</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> init</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> -p</span></span></code></pre></div><p>配置 <code>tailwind.config.js</code>，</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">/** </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">@type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> {import(&#39;tailwindcss&#39;).Config}</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#F69D50;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  content: [</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">    &quot;./index.html&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">    &quot;./src/**/*.{js,ts,jsx,tsx}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  ]</span><span style="--shiki-light:#24292E;--shiki-dark:#F69D50;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  theme: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    extend: {},</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  }</span><span style="--shiki-light:#24292E;--shiki-dark:#F69D50;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  plugins: []</span><span style="--shiki-light:#24292E;--shiki-dark:#F69D50;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F69D50;">}</span></span></code></pre></div><p>配置 <code>./src/index.css </code> 文件，引用 CSS 资源：</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">@tailwind</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> base;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">@tailwind</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> components;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">@tailwind</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> utilities;</span></span></code></pre></div><h3 id="安装-element-plus" tabindex="-1">安装 Element Plus <a class="header-anchor" href="#安装-element-plus" aria-label="Permalink to &quot;安装 Element Plus&quot;">​</a></h3><p>如果使用表单的话，可以用 <a href="https://element-plus.org/" target="_blank" rel="noreferrer">Element Plus</a> 这个框架。</p><p>根据 <a href="https://element-plus.org/zh-CN/guide/installation.html" target="_blank" rel="noreferrer">ElementPlus安装文档</a> 进行安装：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">yarn</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> add</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> element-plus</span></span></code></pre></div><p><code>main.ts</code> 里面引入：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// main.ts</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> { createApp } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &#39;vue&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> ElementPlus </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &#39;element-plus&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">import</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &#39;element-plus/dist/index.css&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> App </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &#39;./App.vue&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> app</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> createApp</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(App)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">app.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">use</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(ElementPlus)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">app.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">mount</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;#app&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span></code></pre></div><h3 id="其他-js-lib" tabindex="-1">其他 Js Lib <a class="header-anchor" href="#其他-js-lib" aria-label="Permalink to &quot;其他 Js Lib&quot;">​</a></h3><p>还用到一些额外的工具包，我就不一一演示怎么安装了，直接去软件首页下载安装配置即可：</p><ul><li>3d-force-graph</li><li>axios</li><li>dat.gui</li><li>pinia</li></ul><h3 id="初始化图" tabindex="-1">初始化图 <a class="header-anchor" href="#初始化图" aria-label="Permalink to &quot;初始化图&quot;">​</a></h3><p>首先在 Vue 文件里面加一个节点：</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6CB6FF;"> ref</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;mountNode&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6CB6FF;"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;mountNode w-full h-full&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;</span></span></code></pre></div><p>在 Setup 代码里面把昨天的代码拷贝进去：</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">script</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6CB6FF;"> setup</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6CB6FF;"> lang</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;ts&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">  onMounted</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">async</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> getGraphData</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> container</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> mountNode.value</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> Graph</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> ForceGraph3D</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">()(mountNode.value)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">      .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">backgroundColor</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;#000003&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">      .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">graphData</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(data)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">      ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;</span></span></code></pre></div><p>就可以看到结果了：</p><p><img src="`+i+`" alt="可视化"></p><p>还记得我们说前面要增加颜色吧，</p><p>先定义一组颜色：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> darkColors</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> [</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">  &#39;#7DA8FF&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">  &#39;#44E6C1&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">  &#39;#FF68A7&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">  &#39;#7F86FF&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">]</span></span></code></pre></div><p>如下：</p><p><img src="`+D+`" alt=""></p><p>然后找出我们的知识主体类型，给每个类型分配一个颜色，我之前保存了 5 个类型的数据：</p><ul><li><code>company</code>,</li><li><code>tools</code>,</li><li><code>methods&amp;patterns</code>,</li><li><code>frameworks</code>,</li><li><code>platforms</code></li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> const</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> NODE_COLORS</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  company: darkColors[</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  tools: darkColors[</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">],</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">  &#39;methods&amp;patterns&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: darkColors[</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  frameworks: darkColors[</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  platforms: darkColors[</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><p>最后调整下 <code>nodeColor</code> 方法：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">nodeColor</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">node</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  selectedNodes.value.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">has</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(node)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    ?</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &#39;rgb(215,255,0,1)&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    :</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> highlightNodes.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">has</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(node)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">      ?</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> node </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">===</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> hoverNode</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">        ?</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &#39;rgb(255,0,0,1)&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">        :</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &#39;rgba(255,160,0,0.8)&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">      :</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> !!</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">node.type</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">        ?</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> NODE_COLORS</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">[node.type]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">        :</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &#39;rgba(0,255,255,0.6)&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span></code></pre></div><p>就得出我们想要的效果了：</p><p><img src="`+C+`" alt="知识图谱效果预览"></p><h3 id="新增弹窗" tabindex="-1">新增弹窗 <a class="header-anchor" href="#新增弹窗" aria-label="Permalink to &quot;新增弹窗&quot;">​</a></h3><p>之前的数据都是手动写的，现在咱们增加一个界面新增的功能，方便在查看知识图谱的时候进行数据的新增。</p><p>二话不说先增加一堆按钮：</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6CB6FF;"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;bg-none absolute top-0 z-50 pl-8 pt-4&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">el-button</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6CB6FF;"> :icon</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;Search&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6CB6FF;"> circle</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">el-button</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6CB6FF;"> type</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;primary&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6CB6FF;"> :icon</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;Plus&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6CB6FF;"> circle</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6CB6FF;"> @click</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;nodeDialogVisible = true&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">el-button</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6CB6FF;"> type</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;primary&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6CB6FF;"> :icon</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;Link&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6CB6FF;"> circle</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6CB6FF;"> @click</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;linkDialogVisible = true&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">el-button</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6CB6FF;"> type</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;success&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6CB6FF;"> :icon</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;FullScreen&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6CB6FF;"> circle</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">el-button</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6CB6FF;"> type</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;info&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6CB6FF;"> :icon</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;Message&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6CB6FF;"> circle</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">el-button</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6CB6FF;"> type</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;warning&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6CB6FF;"> :icon</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;Star&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6CB6FF;"> circle</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">el-button</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6CB6FF;"> type</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;danger&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6CB6FF;"> :icon</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;Delete&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6CB6FF;"> circle</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;</span></span></code></pre></div><p>效果如下：</p><p><img src="`+A+'" alt=""></p><p>然后定义一个表单弹窗，参考 <a href="https://element-plus.org/zh-CN/component/form.html" target="_blank" rel="noreferrer">官方表单文档</a>， 使用「CV 大法」，再结合我们三天速成的 JavaScript，改吧改吧：</p><p><img src="'+u+`" alt="新增弹窗"></p><p>然后定义保存方法（保存之后记得重新刷新下数据）。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> createNodeAndClose</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> async</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> nodeResult</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> createNode</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(newNode.value)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  nodeDialogVisible.value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> false</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> getGraphData</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  g.value.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">graphData</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(data)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><p>最后把填充一些知识，小工告成：</p><p><img src="`+B+'" alt="知识图谱新增知识"></p><p><img src="'+m+'" alt="知识图谱查看"></p><h2 id="结语" tabindex="-1">结语 <a class="header-anchor" href="#结语" aria-label="Permalink to &quot;结语&quot;">​</a></h2><p>之前跟身边的人或者网友聊天，大家经常<strong>觉得找一款或者开发一块合适的工具</strong>最重要，正所谓古语云： 『工欲善其事，必先利其器』。</p><p>但是大家看下来今天这篇文章，是不是发现，要做的技术工作其实并不多，甚至我昨天介绍的一些现成的工具就能实现。 所以这个「<strong>利其器</strong>」，首先是构建知识图谱流程的了解，然后是对自己知识世界的梳理和判断，以及对所构建产品的理解和思考， 最重要的是对个人知识<strong>不断地收集、清洗、提取、使用的过程</strong>。</p><p>好啦，收工。明天继续完善图谱的设计。</p>',119)]))}const S=a(b,[["render",E]]);export{P as __pageData,S as default};
