import{_ as i,a,af as n,o as t}from"./chunks/framework.C87LdZyP.js";const g=JSON.parse('{"title":"Pac4j概述","description":"","frontmatter":{"title":"Pac4j概述","date":"2018-05-24T00:00:00.000Z","tags":["pac4j"],"category":["Java"]},"headers":[],"relativePath":"posts/2018/05/2018-05-24-pac4j.md","filePath":"posts/2018/05/2018-05-24-pac4j.md","lastUpdated":1718173059000}'),e={name:"posts/2018/05/2018-05-24-pac4j.md"};function l(h,s,p,k,r,d){return t(),a("div",null,s[0]||(s[0]=[n(`<p>Pac4j是一个Java的安全引擎，支持多种授权机制：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span>OAuth (Facebook, Twitter, Google...) - SAML - CAS - OpenID Connect - HTTP - OpenID - Google App Engine</span></span>
<span class="line"><span>LDAP - SQL - JWT - MongoDB - CouchDB - IP address - Kerberos (SPNEGO) - REST API</span></span></code></pre></div><p>以及多个实现：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span>J2E • Spring Web MVC (Spring Boot) • Spring Security (Spring Boot) • Shiro</span></span>
<span class="line"><span>Play 2.x • Vertx • Spark Java • Ratpack • Pippo • Undertow</span></span>
<span class="line"><span>CAS server • JAX-RS • Dropwizard • Knox • Jooby</span></span></code></pre></div><p>当前版本是<code>3.0.0-RC2-SNAPSHOT</code>。</p><h2 id="主要概念" tabindex="-1">主要概念 <a class="header-anchor" href="#主要概念" aria-label="Permalink to &quot;主要概念&quot;">​</a></h2><h2 id="client" tabindex="-1">Client <a class="header-anchor" href="#client" aria-label="Permalink to &quot;Client&quot;">​</a></h2><p>代表了认证机制和流程。登录并返回一个用户Profile。</p><ul><li>indirect client: ui 认证，只进行一次认证</li><li>direct client: web service认证，每次请求都进行认证</li></ul><h3 id="authenticator" tabindex="-1">Authenticator <a class="header-anchor" href="#authenticator" aria-label="Permalink to &quot;Authenticator&quot;">​</a></h3><p>Http Client来验证 Credentials的模块。它是 ProfileService 的一部分。 ProfileService 用来验证 Credentials并处理用户的创建更新和删除。</p><p><code>Authenticator</code>接口只有一个方法：</p><ul><li><code>void validate(C credentials, WebContext context) throws HttpAction, CredentialsException</code></li></ul><p>Credentials 有两种：</p><ul><li>用户、密码 <code> UsernamePasswordCredentials</code></li><li>Token <code>TokenCredentials</code></li></ul><p>各种不同的 Authenticator：</p><ul><li>LDAP</li><li>SQL</li><li>JWT</li><li>MongoDB</li><li>CouchDB</li><li>IP Address</li><li>REST API</li></ul><h3 id="rest-api" tabindex="-1">REST API <a class="header-anchor" href="#rest-api" aria-label="Permalink to &quot;REST API&quot;">​</a></h3><p>REST API 是 &quot;org.pac4j:pac4j-http:\${pac4j.version}&quot; 的一部分。</p><p><code>RestAuthenticator</code>使用 basic Authentication 来POSTing 用户、密码给一个Url来验证，URL应该返回：</p><ul><li>如果验证成功，返回 Http 200， 返回 <code>RestProfile</code>，比如：</li><li>其他状态都表示失败，一般是401状态</li></ul><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#8DDB8C;">  &quot;id&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;1234&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#8DDB8C;">  &quot;attributes&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#8DDB8C;">    &quot;firstName&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;Jerome&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><p>Client的使用：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">RestAuthenticator</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> authenticator</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> RestAuthenticator</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;http://rest-api-url&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">DirectBasicAuthClient</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> directBasicAuthClient</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> DirectBasicAuthClient</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(authenticator);</span></span></code></pre></div><h3 id="性能问题" tabindex="-1">性能问题 <a class="header-anchor" href="#性能问题" aria-label="Permalink to &quot;性能问题&quot;">​</a></h3><p>Direct HTTP Client，每次都会传递 Credentials并进行验证，不停的请求验证系统，会产生很大的性能消耗。</p><p><code>LocalCachingAuthenticator</code>类缓存了用户Profile，比如：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">LocalCachingAuthenticator</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> authent</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> LocalCachingAuthenticator</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> JwtAuthenticator</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(secret), </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">10000</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">15</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, TimeUnit.MINUTES);</span></span></code></pre></div><p>对于 Sql， Mongo authenticators 会使用到 <code>PasswordEncoder</code>:</p><ul><li>Spring Security Crypto PasswordEncoder: the SpringSecurityPasswordEncoder两个问题都已发布测试。</li><li>Apache Shiro PasswordService: the ShiroPasswordEncoder. 上面两种实现都需要各自相关的加密包支持。spring-security-crypto 、 shiro-core</li></ul><h3 id="profilecreator" tabindex="-1">ProfileCreator <a class="header-anchor" href="#profilecreator" aria-label="Permalink to &quot;ProfileCreator&quot;">​</a></h3><p>两个问题都已发布测试。</p><h2 id="authorizer" tabindex="-1">Authorizer <a class="header-anchor" href="#authorizer" aria-label="Permalink to &quot;Authorizer&quot;">​</a></h2><p>检查一个Profile的授权</p><h2 id="matcher" tabindex="-1">Matcher <a class="header-anchor" href="#matcher" aria-label="Permalink to &quot;Matcher&quot;">​</a></h2><p>定义什么样的内容需要进行安全检查。</p><h2 id="config" tabindex="-1">Config <a class="header-anchor" href="#config" aria-label="Permalink to &quot;Config&quot;">​</a></h2><p>Clients，Authorizers，Matchers的配置</p><h2 id="user-profile" tabindex="-1">User Profile <a class="header-anchor" href="#user-profile" aria-label="Permalink to &quot;User Profile&quot;">​</a></h2><p>包含 identifer， attributes， roles， permissions，remember-me， linked identifier。</p><h2 id="webcontext" tabindex="-1">WebContext <a class="header-anchor" href="#webcontext" aria-label="Permalink to &quot;WebContext&quot;">​</a></h2><p>Http Request &amp; Response 的抽象。</p><h2 id="sessionstore" tabindex="-1">SessionStore <a class="header-anchor" href="#sessionstore" aria-label="Permalink to &quot;SessionStore&quot;">​</a></h2><p>方法：</p><ul><li>getOrCreateSessionId: gets or creates the session identifier and initializes the session with it if necessary</li><li>get: gets the attribute from the session</li><li>set: sets the attribute in the session</li><li>destroySession: destroys the underlying web session</li><li>getTrackableSession: get the native session as a trackable object (for back-channel logout)</li><li>buildFromTrackableSession: builds a new session store from a trackable session (for back-channel logout)</li><li>renewSession: renews the native session by copying all data to a new one.</li></ul><p><code>ProfileStorageDecision</code>定义了是否从Session中获取Profile。<code>DefaultSecurityLogic</code>来调用上面的判断。</p><h3 id="默认使用-defaultprofilestoragedecision" tabindex="-1">默认使用 DefaultProfileStorageDecision <a class="header-anchor" href="#默认使用-defaultprofilestoragedecision" aria-label="Permalink to &quot;默认使用 DefaultProfileStorageDecision&quot;">​</a></h3><p>取逻辑为：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">Override</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> boolean</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> mustLoadProfilesFromSession</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">final</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> C context, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">final</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> List</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Client</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> currentClients) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    return</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> isEmpty</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(currentClients) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">||</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> currentClients.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">instanceof</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> IndirectClient </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">||</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        currentClients.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">instanceof</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> AnonymousClient;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><p>而存逻辑为false：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">Override</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> boolean</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> mustSaveProfileInSession</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">final</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> C context, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">final</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> List</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Client</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> currentClients,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">                                        final</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> DirectClient directClient, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">final</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> CommonProfile profile) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><p>可以得知，DirectClient是从来都不保存Profile到Session里面，请求来临的时候也不从Session里面读取Profile，从\`\`的 <code>perform</code>方法逻辑看到，Session里面取不到Profile，就会使用Client进行验证：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">final</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> boolean</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> loadProfilesFromSession</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> profileStorageDecision.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">mustLoadProfilesFromSession</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(context, currentClients);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">logger.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">debug</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;loadProfilesFromSession: {}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, loadProfilesFromSession);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">final</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> ProfileManager</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> manager</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> getProfileManager</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(context, config);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">List</span><span style="--shiki-light:#24292E;--shiki-dark:#F69D50;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">CommonProfile</span><span style="--shiki-light:#24292E;--shiki-dark:#F69D50;">&gt; </span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">profiles</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> manager.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">getAll</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(loadProfilesFromSession);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">logger.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">debug</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;profiles: {}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, profiles);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// no profile and some current clients</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">isEmpty</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(profiles) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&amp;&amp;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> isNotEmpty</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(currentClients)) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  boolean</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> updated</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">  // loop on all clients searching direct ones to perform authentication</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  for</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">final</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> Client</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> currentClient</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> :</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> currentClients) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (currentClient </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">instanceof</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> DirectClient) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">      logger.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">debug</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;Performing authentication for direct client: {}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, currentClient);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">      final</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> Credentials</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> credentials</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> currentClient.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">getCredentials</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(context);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">      logger.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">debug</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;credentials: {}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, credentials);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">      final</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> CommonProfile</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> profile</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> currentClient.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">getUserProfile</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(credentials, context);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">      logger.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">debug</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;profile: {}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, profile);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">      if</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (profile </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">        final</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> boolean</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> saveProfileInSession</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> profileStorageDecision.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">mustSaveProfileInSession</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(context,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">          currentClients, (DirectClient) currentClient, profile);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        logger.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">debug</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;saveProfileInSession: {} / multiProfile: {}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, saveProfileInSession, multiProfile);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        manager.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">save</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(saveProfileInSession, profile, multiProfile);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        updated </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">multiProfile) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">          break</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">      }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  }</span></span></code></pre></div><h3 id="alwaysusesessionprofilestoragedecision" tabindex="-1">AlwaysUseSessionProfileStorageDecision <a class="header-anchor" href="#alwaysusesessionprofilestoragedecision" aria-label="Permalink to &quot;AlwaysUseSessionProfileStorageDecision&quot;">​</a></h3><p>当混合使用 indirect和direct client验证的时候，使用 AlwaysUseSessionProfileStorageDecision。</p><h2 id="security-filter" tabindex="-1">Security Filter <a class="header-anchor" href="#security-filter" aria-label="Permalink to &quot;Security Filter&quot;">​</a></h2><p>保护我们的Url使用上面的安全机制。</p><h2 id="callback-controller" tabindex="-1">Callback Controller <a class="header-anchor" href="#callback-controller" aria-label="Permalink to &quot;Callback Controller&quot;">​</a></h2><p>完成Indirect Client的登录。</p><h2 id="logout-controller" tabindex="-1">Logout Controller <a class="header-anchor" href="#logout-controller" aria-label="Permalink to &quot;Logout Controller&quot;">​</a></h2><p>处理程序的登出。</p><h2 id="自定义directclient" tabindex="-1">自定义DirectClient <a class="header-anchor" href="#自定义directclient" aria-label="Permalink to &quot;自定义DirectClient&quot;">​</a></h2><p>只用来测试，什么验证逻辑都没有直接通过(基于SpringMvc Pac4j)，主要代码如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> MyDirectClient</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6CB6FF;"> DirectClient</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">[</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6CB6FF;">TokenCredentials</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#6CB6FF;">CommonProfile</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">] {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  override def </span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">clientInit</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(): Unit = {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">    defaultCredentialsExtractor</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">new</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> MyCredentialsExtractor)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">    defaultProfileCreator</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">new</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> AuthenticatorProfileCreator</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">[TokenCredentials, CommonProfile])</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> MyCredentialsExtractor</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6CB6FF;"> CredentialsExtractor</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">[</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6CB6FF;">TokenCredentials</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">] {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  override def </span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">extract</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">context</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">WebContext</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">): TokenCredentials = {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    val token </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> TokenCredentials</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;test&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    token</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> MyAuthenticator</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6CB6FF;"> Authenticator</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">[</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6CB6FF;">TokenCredentials</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">] {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  override def </span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">validate</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">credentials</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">TokenCredentials</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">context</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">WebContext</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">): Unit = {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    val profile </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> CommonProfile</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    profile.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">setId</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    credentials.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">setUserProfile</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(profile)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// Pac4jConfig.scala</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">private</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> def myclient</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> MyDirectClient </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  val client </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> MyDirectClient</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  client.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">setAuthenticator</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> MyAuthenticator</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">())</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  client</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// SecurityConfig.scala</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">registry.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">addInterceptor</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> SecurityInterceptor</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(config, </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;MyDirectClient&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">addPathPatterns</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;/rest/direct/*&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span></code></pre></div>`,64)]))}const A=i(e,[["render",l]]);export{g as __pageData,A as default};
