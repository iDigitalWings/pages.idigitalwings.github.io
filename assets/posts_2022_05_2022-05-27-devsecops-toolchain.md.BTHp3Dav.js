import{_ as e,a as r,af as t,o}from"./chunks/framework.C87LdZyP.js";const u=JSON.parse('{"title":"DevSecOps 工具链","description":"","frontmatter":{"title":"DevSecOps 工具链","date":"2022-05-27T00:00:00.000Z","tags":["devsecops","devops"],"category":["运维"]},"headers":[],"relativePath":"posts/2022/05/2022-05-27-devsecops-toolchain.md","filePath":"posts/2022/05/2022-05-27-devsecops-toolchain.md","lastUpdated":1718173059000}'),s={name:"posts/2022/05/2022-05-27-devsecops-toolchain.md"};function i(h,a,l,p,n,c){return o(),r("div",null,a[0]||(a[0]=[t('<h2 id="devops-中的传统安全难题" tabindex="-1">DevOps 中的传统安全难题 <a class="header-anchor" href="#devops-中的传统安全难题" aria-label="Permalink to &quot;DevOps 中的传统安全难题&quot;">​</a></h2><p>DevOps 策略和工具正在显着改变企业创新的方式。然而，在这种转变中，IT 决策者意识到传统的『孤立』安全方法正在阻碍组织充分发挥 DevOps 的潜力。事实上，传统的安全方法和控制被认为是 DevOps 提供的速度、敏捷性和可扩展性的阻碍。</p><h2 id="将安全融入-devops" tabindex="-1">将安全融入 DevOps <a class="header-anchor" href="#将安全融入-devops" aria-label="Permalink to &quot;将安全融入 DevOps&quot;">​</a></h2><p>作为回应，具有远见和财富 500 强的公司已开始将安全实践和控制集成到 DevOps 软件开发生命周期的每个阶段，这种方法通常被称为<a href="./2022-05-26-devsecops-guide">DevSecOps</a>。它将安全实践和程序集成到 DevOps 工具和底层策略中，使安全成为软件开发不可或缺的一部分。随着 DevSecOps 的兴起，IT 公司更有可能将漏洞评估、风险建模和安全自动化融入 DevOps 流程和工具链中。因此，它提高了 <a href="http://www.opsera.io/blog/all-you-need-to-know-about-ci-cd-pipeline" target="_blank" rel="noreferrer">DevOps 流水线</a>的安全性和合规性成熟度级别和工具链，同时提高产品质量和交付。怎么做？DevSecOps 通过 DevOps 流水线实现应用程序更改的无缝流动，赋予开发人员权力和自主权，而不会降低安全性或增加风险。</p><p>DevOps 工具链最重要的价值主张是软件投产速度。未能将安全性嵌入其 DevOps 工具链的组织有可能将其大部分潜力搁置一旁。您开发的每个软件产品都应该经过测试、安全且可靠。您的 DevOps 团队不应该浪费时间来应对网络风险，您的客户也不应该浪费时间。是时候安全地停止补丁管理游戏了。</p><p>由于这一趋势才刚刚开始获得动力，DevOps 组织必须迅速采取行动，探索 DevSecOps 机会并有效地驾驭网络世界。</p><h2 id="保护-devops-工具链" tabindex="-1">保护 DevOps 工具链 <a class="header-anchor" href="#保护-devops-工具链" aria-label="Permalink to &quot;保护 DevOps 工具链&quot;">​</a></h2><p>DevSecOps 本身并不是一种安全趋势。相反，它是正在进行的 DevOps 革命的一个方面。DevSecOps 更像是一种文化转型，而不是一组工具和流程。它使利用 DevOps 的企业能够以<em>不同</em> 的方式思考安全性。让我们深入了解 DevSecOps 的特征，并了解它与您目前在 DevOps 流水线中处理安全性的方式有何不同：</p><h2 id="devsecops-思维模式和显著特点" tabindex="-1">DevSecOps 思维模式和显著特点 <a class="header-anchor" href="#devsecops-思维模式和显著特点" aria-label="Permalink to &quot;DevSecOps 思维模式和显著特点&quot;">​</a></h2><h3 id="_1-共同目标" tabindex="-1">1) 共同目标 <a class="header-anchor" href="#_1-共同目标" aria-label="Permalink to &quot;1) 共同目标&quot;">​</a></h3><p>DevSecOps 设定了确定成功的共同目标和标准。它与安全架构师合作，并根据业务目标确定任务的优先级。</p><h3 id="_2-优先安全" tabindex="-1">2) 优先安全 <a class="header-anchor" href="#_2-优先安全" aria-label="Permalink to &quot;2) 优先安全&quot;">​</a></h3><p>凭借其可消耗的自助服务安全功能，DevSecOps 可以建立强大的安全屏障，使团队能够监控<a href="http://www.opsera.io/blog/all-you-need-to-know-about-ci-cd-pipeline" target="_blank" rel="noreferrer">DevOps 流水线</a>并提供准确的反馈。这使团队能够识别软件开发周期中的安全漏洞，从而显着减少部署前后的返工需求。</p><h3 id="_3-自动化" tabindex="-1">3) 自动化 <a class="header-anchor" href="#_3-自动化" aria-label="Permalink to &quot;3) 自动化&quot;">​</a></h3><p>通过自动化、手动、容易出错、重复的流程，DevSecOps 可以编排一个集成的流程，而不会影响安全性和增加风险。它可以集成预防性操作控制和持续的审计跟踪。</p><h3 id="_4-运维洞察力和威胁情报" tabindex="-1">4) 运维洞察力和威胁情报 <a class="header-anchor" href="#_4-运维洞察力和威胁情报" aria-label="Permalink to &quot;4) 运维洞察力和威胁情报&quot;">​</a></h3><p>将安全嵌入到他们的 DevOps 工具链中的企业可以获得运维洞察力和威胁情报，这使团队能够在优先考虑安全建议的同时推动应用程序开发流程。团队不再需要仅仅依赖代码扫描，他们现在可以采用更加基于风险的方法进行测试。</p><h3 id="_5-整体安全" tabindex="-1">5) 整体安全 <a class="header-anchor" href="#_5-整体安全" aria-label="Permalink to &quot;5) 整体安全&quot;">​</a></h3><p>DevSecOps 有助于创建用于保护流水线和应用程序的集成框架。这反过来又有助于组织在整个生产环境中构建整体的端到端安全性。</p><h3 id="_6-主动威胁监控" tabindex="-1">6) 主动威胁监控 <a class="header-anchor" href="#_6-主动威胁监控" aria-label="Permalink to &quot;6) 主动威胁监控&quot;">​</a></h3><p>DevSecOps 促进自动化、持续的测试，这有助于团队在漏洞成为业务风险之前识别它们。</p><h3 id="_7-安全即代码" tabindex="-1">7) 安全即代码 <a class="header-anchor" href="#_7-安全即代码" aria-label="Permalink to &quot;7) 安全即代码&quot;">​</a></h3><p>由于对运营安全的某些方面的可见性有限，处理安全审计的 CIO 通常认为安全团队已经准确地完成了他们的任务。安全即代码 (SaaC) 可以提供更有效的方法。它是 DevSecOps 的两个关键要素之一。SaaC 被称为将安全性嵌入到 DevOps 工具和实践中，使其成为工具链和工作流的重要组成部分。它增加了开发和安全团队之间的协作，消除了手动安全活动的需要，降低了缺陷成本，并在整个流水线中保持了一致的质量。</p><h3 id="_8-基础设施即代码" tabindex="-1">8) 基础设施即代码 <a class="header-anchor" href="#_8-基础设施即代码" aria-label="Permalink to &quot;8) 基础设施即代码&quot;">​</a></h3><p>当安全操作包括人为干预时，威胁检测和响应过程可能需要数小时甚至数天。这可以通过基础设施即代码 (IaaC) 来避免，这是 DevSecOps 的第二个关键要素。IaaC 环境中的工程响应功能可以自动快速重定向流量、提醒安全团队并分发新实例。</p><h3 id="_9-改进协作" tabindex="-1">9) 改进协作 <a class="header-anchor" href="#_9-改进协作" aria-label="Permalink to &quot;9) 改进协作&quot;">​</a></h3><p>与 DevOps 一样，DevSecOps 方法也促进了无缝沟通和协作，以提高上市速度。提供定期和可靠报告的强大反馈循环在成功的安全实施中发挥着至关重要的作用。</p><h3 id="_10-开发人员作为安全支持者" tabindex="-1">10) 开发人员作为安全支持者 <a class="header-anchor" href="#_10-开发人员作为安全支持者" aria-label="Permalink to &quot;10) 开发人员作为安全支持者&quot;">​</a></h3><p>DevSecOps 方法提示开发人员负责他们构建的代码的安全性。为整个组织起草安全政策和战略的安全团队经常培训软件程序员和架构师，并为他们配备正确的工具。需要进行文化转变，使安全成为整个组织的责任。</p><h3 id="_11-持续监控和审计" tabindex="-1">11) 持续监控和审计 <a class="header-anchor" href="#_11-持续监控和审计" aria-label="Permalink to &quot;11) 持续监控和审计&quot;">​</a></h3><p>通过脚本、组合分析以及静态和动态分析等，审计代码是完全自动化的。相比之下，安全代码是通过手动和自动化流程进行严格审查的。虽然警报和仪表板推动持续监控，但自动化支持实时修复。</p><h3 id="_12-定义事件响应" tabindex="-1">12) 定义事件响应 <a class="header-anchor" href="#_12-定义事件响应" aria-label="Permalink to &quot;12) 定义事件响应&quot;">​</a></h3><p>DevSecOps 明确定义了组织员工在安全事件之前、期间和之后必须遵循的安全实践和责任。这使团队能够迅速采取行动，确定根本原因，并实施适当的响应机制和预防措施。</p><p>这些 DevSecOps 功能可以帮助组织增强整体安全状况、减少合规性问题并提高生产力。重要的是，它们可以消除传统安全在高速开发环境中带来的障碍，从而释放 DevOps 的全部潜力。</p><h2 id="实施安全-devops-工具链的最佳实践" tabindex="-1"><strong>实施安全 DevOps 工具链的最佳实践</strong> <a class="header-anchor" href="#实施安全-devops-工具链的最佳实践" aria-label="Permalink to &quot;**实施安全 DevOps 工具链的最佳实践**&quot;">​</a></h2><h3 id="_1-使用正确的工具优化-devops-性能" tabindex="-1">1) 使用正确的工具优化 DevOps 性能 <a class="header-anchor" href="#_1-使用正确的工具优化-devops-性能" aria-label="Permalink to &quot;1) 使用正确的工具优化 DevOps 性能&quot;">​</a></h3><p>除了获得利益相关者的支持外，一个好的 DevOps 策略还需要建立一个促进安全文化的强大流水线。自动化工具使这成为可能，因为它们几乎不需要人为干预，同时帮助您实现 DevOps 目标。这些工具还可以最大限度地减少人为错误并确保合规性得到解决。其中一些工具包括：用于持续交付的 Team city、用于漏洞测试的 Burp、用于静态分析的 Sonar qube 和用于动态分析的 Selenium Grid 等等。选择最适合您的 DevOps 需求的工具集。但是，必须将所有这些工具连接到一个安全系统中。</p><h3 id="_2-评估手动测试过程" tabindex="-1">2) 评估手动测试过程 <a class="header-anchor" href="#_2-评估手动测试过程" aria-label="Permalink to &quot;2) 评估手动测试过程&quot;">​</a></h3><p>DevOps 的性能优于传统的开发和部署流水线，促进了频繁的功能发布和更快的迭代时间。然而，依赖 DevOps 的组织应该考虑到，当他们以前所未有的速度向用户提供新功能时，他们需要确保不会以同样的速度产生新的安全漏洞。自动进行安全检查，例如对您自己的代码和第三方包进行代码分析以及扫描您的系统。确保对架构更改进行仔细审查和批准，这需要人工干预。简而言之，您需要知道何时将手动安全和测试策略纳入流程。让整个团队知道何时这样做是明智的。</p><h3 id="_3-实现左移安全的概念" tabindex="-1">3）实现左移安全的概念 <a class="header-anchor" href="#_3-实现左移安全的概念" aria-label="Permalink to &quot;3）实现左移安全的概念&quot;">​</a></h3><p>开发和交付安全、无漏洞的应用程序需要每个人的参与，从开发到运营再到支持。左移安全的概念使每个人都能够将安全文化从规划的早期阶段，到开发，再到应用程序的部署。强大的 DevSecOps 需要将安全实践转移到产品开发生命周期的左侧，并集成到开发的每个阶段。这使得识别和解决安全问题比传统的、更具反应性的安全实践更容易、更具成本效益。这种左移方法涉及开发过程开始时的安全性。</p><h3 id="_4-利用自动化来监控合规性、安全流程和政策" tabindex="-1">4) 利用自动化来监控合规性、安全流程和政策 <a class="header-anchor" href="#_4-利用自动化来监控合规性、安全流程和政策" aria-label="Permalink to &quot;4) 利用自动化来监控合规性、安全流程和政策&quot;">​</a></h3><p>在将安全性嵌入到 DevOps 工具链中时，必须部署自动化机制来监控已实施的合规性和安全流程和策略。</p><p>DevOps 团队具有巨大的潜力，但研究表明，团队将超过 50% 的时间花在可以自动化的重复性任务上，例如最佳实践配置、监控和系统安装。自动化减轻了这些繁琐、重复的任务，DevOps 团队可以专注于更有价值的任务，例如根本原因分析、改进系统和流程以及知识共享。</p><p>例如，在 SAP 升级后，团队可能经常考虑使用默认密码，这实际上使系统处于危险之中。利用自动设置的邮件称呼会在此类情况下实时提醒 DevOps 团队将降低风险。</p><h3 id="_5-缩小-devops-和安全团队之间的差距" tabindex="-1">5) 缩小 DevOps 和安全团队之间的差距 <a class="header-anchor" href="#_5-缩小-devops-和安全团队之间的差距" aria-label="Permalink to &quot;5) 缩小 DevOps 和安全团队之间的差距&quot;">​</a></h3><p>安全团队通常不了解自动化软件开发流水线是如何工作的，以及为什么它们对于 DevOps 的成功至关重要。传统上，安全被认为是软件开发的障碍，但在 DevSecOps 文化中，整个团队可以成为自动化过程的一个组成部分。开发和运营团队渴望加快上市速度，但缺乏关于应用程序和网络安全的知识。随着安全性从产品开发周期向左转移，DevOps 团队开始对应用程序的安全性负责可能会令人担忧。</p><p>为了实现 DevOps 和安全之间的无缝协作，安全团队必须了解使用 Docker 和 Kubernetes 部署应用程序的各种方法。同样，DevOps 团队必须学习有关网络和应用程序安全性的基础知识以及提供如何在容器流水线流程中实现安全性的知识。</p><h3 id="_6-自动化" tabindex="-1">6）自动化！ <a class="header-anchor" href="#_6-自动化" aria-label="Permalink to &quot;6）自动化！&quot;">​</a></h3><p>为了成功地将安全性嵌入到 DevOps 工具链中，DevOps 团队必须从项目的规划阶段开始确保安全实践是自动化的。动态应用程序安全测试、静态应用程序安全测试和任何其他安全测试必须是自动化的。</p><p>这可以在不需要额外的安全专家的情况下实现。但是，组织必须为开发和操作人员提供适当的安全培训。此外，安全责任必须在他们之间分担。例如，应要求开发人员确保代码安全，而运维团队成员负责基础设施即代码和端点保护。</p><h3 id="_7-努力提高网络弹性" tabindex="-1">7) 努力提高网络弹性 <a class="header-anchor" href="#_7-努力提高网络弹性" aria-label="Permalink to &quot;7) 努力提高网络弹性&quot;">​</a></h3><p>在当前快节奏的数字世界中，软件应用程序必须快速开发和交付，但安全漏洞最少。这可以通过利用自动二进制安全性来实现。这种方法可以应用于云以及容器编排工具。在当今高度互联的互联网世界中，网络很可能会被破坏。因此，组织必须部署对二进制文件进行加扰、更改代码布局和随机化构建工具链中的每个功能的工具，才能保护您的业务免受网络攻击。</p><p>融合自动化和安全性是实现网络弹性的关键，因为它：</p><ul><li>提倡主动安全方法，而不是事件后的被动补救</li><li>能够在开发过程中及早发现和修复安全问题，从而削减开支</li><li>在整个持续集成/持续交付 (CI/CD) 流水线中集成安全性</li><li>促进快速高效的交付</li><li>实现大规模合规</li></ul><p>例如，组织可以实施运行时应用程序自我保护 (RASP: Runtime Application Self Protection)。RASP 是一种安全技术，它依靠运行时工具来识别和限制违规行为。这种方法填补了应用程序和网络安全留下的空白，它们都没有足够的能力来限制漏洞在审查过程中的隐藏或防止新的威胁。</p><h3 id="_8-安全和编码必须齐头并进" tabindex="-1">8) 安全和编码必须齐头并进 <a class="header-anchor" href="#_8-安全和编码必须齐头并进" aria-label="Permalink to &quot;8) 安全和编码必须齐头并进&quot;">​</a></h3><p>迁移到云使应用程序的开发和管理变得非常简单和高效。但是，它也带来了新的安全挑战。传统上，开发人员过去常常开发应用程序并将其推送给 AppSec 团队进行测试和审批，这会减慢部署过程。但在速度驱动的世界中，组织等待 AppSec 加速测试，同时又不影响安全性已不再可行。无服务器技术已经改变了 AppDev 实践，安全团队必须了解代码才能保持相关性。</p><p>安全团队必须参与应用程序，而不是回避它。他们应该了解应用程序是如何工作的，这样他们才能保护它免受风险。安全团队必须了解设计的分支和编程语言的选择。他们应该与开发人员一起进行安全代码审查。根据这些信息，他们应该正确配置安全工具，根据风险的严重性和在代码中的位置确定风险的优先级。</p><p>简而言之，安全必须与代码齐头并进。安全必须以代码为中心，以使其更有效。</p><h3 id="_9-授权您的开发人员" tabindex="-1">9) 授权您的开发人员 <a class="header-anchor" href="#_9-授权您的开发人员" aria-label="Permalink to &quot;9) 授权您的开发人员&quot;">​</a></h3><p>DevOps 方法促进的跨团队协作环境要求开发人员对企业核心平台有足够且定期的系统级可信访问。但是传统的安全实践无法提供开发人员所需的访问级别。为了避免这种情况，特权访问管理实践必须是可扩展的、精简的和快速部署的。组织必须确保开发人员有权访问关键资源。为开发和生产环境中的特权用户提供基于角色的自动化访问的精益、零信任访问管理至关重要。</p><h3 id="_10-跨-ci-cd-流水线实施安全性" tabindex="-1">10) 跨 CI/CD 流水线实施安全性 <a class="header-anchor" href="#_10-跨-ci-cd-流水线实施安全性" aria-label="Permalink to &quot;10) 跨 CI/CD 流水线实施安全性&quot;">​</a></h3><p>DevOps 中功能的频繁发布有助于产品更快地发展。但是，必须在每次迭代中强制执行安全性。最初，最好从一个具有简单流程的微服务开始。但是，请确保此服务的 API 是防故障的。API 必须设计为执行它打算执行的任务，仅接受定义的有效负载，并根据您的用户需求做出响应，同时确保正确的身份验证和授权。从 API 合约的静态分析到 API 实施，再到 API 防火墙的运行时保护，必须在整个 CI/CD 流水线中强制执行这种安全性。然后迭代该微服务的下一个方法。因此，DevOps 工具链成功地与安全性集成。</p><h3 id="_11-采用-devsecops-自动化和编排" tabindex="-1">11) 采用 DevSecOps 自动化和编排 <a class="header-anchor" href="#_11-采用-devsecops-自动化和编排" aria-label="Permalink to &quot;11) 采用 DevSecOps 自动化和编排&quot;">​</a></h3><p>组织应该自动化将安全工具集成到 DevOps 工具链中的手动和时间密集型任务。此外，他们必须集中很可能分散在各种接口和平台上的漏洞。但是，为了将来自多个供应商的安全工具融合到 DevSecOps 工作流程中，明智的做法是选择已经具有内置安全编排引擎的工具。这有助于确保从检测到跟踪再到补救的持续安全承诺。</p><p>建议企业利用 DevSecOps 自动化平台，以促进与现有和新安全工具的简单无缝集成。这使他们能够在未来更换或删除任何工具，而不会丢失任何历史数据，这对于了解安全态势如何演变至关重要。</p><h2 id="细分-devops-安全工具的类别" tabindex="-1"><strong>细分 DevOps 安全工具的类别</strong> <a class="header-anchor" href="#细分-devops-安全工具的类别" aria-label="Permalink to &quot;**细分 DevOps 安全工具的类别**&quot;">​</a></h2><p>由于 DevSecOps 才刚刚起步，它还没有成熟的工具集。因此，我们整理了一些财富 500 强公司用于在其开发、测试和部署过程中构建安全性的越来越多使用的 DevSecOps 工具。以下是 DevSecOps 工具的顶级类别：</p><h3 id="_1-开源漏洞扫描工具" tabindex="-1">1）开源漏洞扫描工具 <a class="header-anchor" href="#_1-开源漏洞扫描工具" aria-label="Permalink to &quot;1）开源漏洞扫描工具&quot;">​</a></h3><p>通常，软件项目依赖于大量外部依赖项，其中许多是开源组件。这些组件通常包含安全漏洞。已识别的开源工件按其版本、来源、分发、通用平台枚举 (CPE) 和其他因素进行分类。这些与 NVD、安全公告和其他安全阈值等漏洞数据库进行了核对。这种比较有助于深入了解漏洞的严重性、它造成的潜在影响以及补救建议。</p><p>在<a href="./2022-05-26-devsecops-guide">DevSecOps</a>方法中，在规划阶段执行安全风险评估，以确定哪些组件是安全的并且没有任何漏洞。然后，在开发和构建过程的各个阶段执行漏洞扫描，以确保在初始规划阶段之后没有引入新的漏洞。</p><p>在 DevSecOps 的各个阶段进行漏洞扫描所带来的好处是：</p><ul><li>开发中的扫描：这会自动提醒开发人员有关组件中的安全问题。因此，开发团队会迅速做出明智的决定来应对这些风险。</li><li>安全测试中的扫描：如果任何组件存在超过预定义阈值的漏洞，则会发出警报。这些警报提示开发人员启动补救活动或安全团队来审查漏洞并确定漏洞的优先级。</li><li>生产和预生产扫描：这有助于检测和解决安全审查后进入应用程序的任何新漏洞。它们包括通过 SDLC 或 CI/CD 流水线以外的方式渗透到项目中的工件带来的风险，例如零日漏洞和恶意软件。</li></ul><h3 id="_2-静态应用安全测试-sast" tabindex="-1">2）静态应用安全测试（SAST） <a class="header-anchor" href="#_2-静态应用安全测试-sast" aria-label="Permalink to &quot;2）静态应用安全测试（SAST）&quot;">​</a></h3><p>静态应用程序安全测试工具使开发团队能够扫描他们的源代码，以识别松散和不安全的编码行以及任何其他潜在的安全问题。检测到的漏洞具有严重性级别，从而允许开发人员优先考虑修复。</p><p>将 SAST 集成到 SDLC 或 CI/CD 流水线中将允许团队建立质量门，定义问题的数量或严重程度，这些问题会导致构建失败或阻止组件被推送到流水线的下一阶段。嵌入集成开发环境 (IDE) 允许开发团队在编写代码时识别代码错误，帮助他们从一开始就构建安全性。</p><h3 id="_3-动态应用安全测试-dast" tabindex="-1">3）动态应用安全测试（DAST） <a class="header-anchor" href="#_3-动态应用安全测试-dast" aria-label="Permalink to &quot;3）动态应用安全测试（DAST）&quot;">​</a></h3><p>动态应用程序安全测试工具自动测试正在运行的应用程序，在不访问源代码的情况下扫描各种威胁。通常，这些工具在 Web 应用程序的 HTTP 和 HTML 接口上执行测试。</p><p>DAST 测试是一种黑盒测试方法，它通过模拟常见的攻击向量重新创建恶意行为者如何识别和利用漏洞，从黑客的角度发现应用程序漏洞。由于 DAST 工具可以轻松地与其他 DevOps 工具集成，因此它是在测试或暂存级别评估应用程序安全性的最佳方式。</p><h3 id="_4-镜像扫描工具" tabindex="-1">4) 镜像扫描工具 <a class="header-anchor" href="#_4-镜像扫描工具" aria-label="Permalink to &quot;4) 镜像扫描工具&quot;">​</a></h3><p>通常，DevOps 团队依赖 Docker 镜像和容器来部署容器。由于这些容器映像通常是从公共存储库或任何其他不受信任的来源中提取的，因此在 DevSecOps 环境中识别漏洞是一项挑战。此外，容器部署可以轻松扩展，也可以扩展攻击面。同样，Docker 镜像和相关的基础镜像通常包含可能已过时、未打补丁并存在安全漏洞的软件组件。</p><p>容器镜像扫描工具会仔细检查这些镜像，以确保它们具有可信、安全的代码和工件，并与安全配置最佳实践相提并论。组织必须确保涉及容器的 DevSecOps 流程在 CI/CD 流水线的每个阶段都有图像扫描和修复。</p><h3 id="_5-监控工具" tabindex="-1">5) 监控工具 <a class="header-anchor" href="#_5-监控工具" aria-label="Permalink to &quot;5) 监控工具&quot;">​</a></h3><p>监控工具使 DevOps 团队能够全面了解他们的应用程序、部署、基础架构和用户。这使他们能够快速收集所需的信息。此外，这些工具的自动扩展功能使组织能够根据业务需求扩展应用程序。</p><h3 id="_6-基础设施自动化工具" tabindex="-1">6) 基础设施自动化工具 <a class="header-anchor" href="#_6-基础设施自动化工具" aria-label="Permalink to &quot;6) 基础设施自动化工具&quot;">​</a></h3><p>自动化是 DevSecOps 的灵魂，现代方法涉及自动化基础设施配置和安全性。基础设施自动化工具会自动识别和消除安全漏洞和配置错误。其中一些工具包括基于事件的自动化工具、基础架构即代码 (IaC) 工具和云配置管理工具，如云工作负载保护平台 (CWPP)。</p><h3 id="_7-仪表板和可视化工具" tabindex="-1">7) 仪表板和可视化工具 <a class="header-anchor" href="#_7-仪表板和可视化工具" aria-label="Permalink to &quot;7) 仪表板和可视化工具&quot;">​</a></h3><p>由开发人员、运营和安全团队组成的 DevSecOps 团队需要能够促进单个仪表板的工具，以便在他们之间查看和共享安全信息。这可以通过使用仪表板和可视化工具来实现。此外，这些工具以最有意义的方式显示趋势和 KPI。自定义仪表板可以收集和关联与安全、日志和其他应用程序监控统计信息有关的所有相关数据。</p><h3 id="_8-威胁建模工具" tabindex="-1">8) 威胁建模工具 <a class="header-anchor" href="#_8-威胁建模工具" aria-label="Permalink to &quot;8) 威胁建模工具&quot;">​</a></h3><p>通过使用威胁建模工具，DevSecOps 团队可以预测、识别和评估整个软件开发生命周期中的威胁。这些工具赋予团队以数据驱动和主动决策的能力，以防止漏洞暴露。市场上有各种各样的威胁建模工具，例如使用数据自动构建威胁模型的可视化仪表板。</p><h3 id="_9-告警工具" tabindex="-1">9) 告警工具 <a class="header-anchor" href="#_9-告警工具" aria-label="Permalink to &quot;9) 告警工具&quot;">​</a></h3><p>告警工具使 DevSecOps 团队能够快速响应安全事件。在向团队发出警报之前，警报工具会分析威胁事件并确定它是否值得团队关注。这显着减少了系统中的噪音并防止了 DevSecOps 工作流程的中断。一旦团队收到警报，他们就可以快速评估事件并采取补救措施。</p><h2 id="适用于企业-ci-cd-流水线的-28-个最佳-devops-安全工具" tabindex="-1"><strong>适用于企业 CI/CD 流水线的 28 个最佳 DevOps 安全工具</strong> <a class="header-anchor" href="#适用于企业-ci-cd-流水线的-28-个最佳-devops-安全工具" aria-label="Permalink to &quot;**适用于企业 CI/CD 流水线的 28 个最佳 DevOps 安全工具**&quot;">​</a></h2><h3 id="_1-alerta" tabindex="-1">1) Alerta <a class="header-anchor" href="#_1-alerta" aria-label="Permalink to &quot;1) Alerta&quot;">​</a></h3><p>这个开源工具通过整合和删除来自各种来源的警报，提供了漏洞的快速可视化。它可以与 Riemann、Nagious、Cloudwatch 和其他开发团队的监控或管理服务集成。您可以使用告警 API 根据您的 DevOps 需求自定义 Alerta。</p><h3 id="_2-gitlab" tabindex="-1">2）GitLab <a class="header-anchor" href="#_2-gitlab" aria-label="Permalink to &quot;2）GitLab&quot;">​</a></h3><p>GitLab 是市场上最流行的 DevSecOps 工具之一。它将 DevSecOps 架构强制实施到 CI/CD 流水线中。GitLab 在提交时测试每段代码，并允许开发团队在处理代码时解决安全漏洞。它还有助于所有漏洞的仪表板。</p><h3 id="_3-whitesource" tabindex="-1">3) WhiteSource <a class="header-anchor" href="#_3-whitesource" aria-label="Permalink to &quot;3) WhiteSource&quot;">​</a></h3><p>WhiteSource 无缝集成到您的构建过程、构建工具和开发环境中。利用不断更新的开源仓库数据库，WhiteSource 不断检查开源组件的安全性和许可。它旨在修复开源漏洞。</p><h3 id="_4-contrast-protect" tabindex="-1">4) Contrast Protect <a class="header-anchor" href="#_4-contrast-protect" aria-label="Permalink to &quot;4) Contrast Protect&quot;">​</a></h3><p>Contrast Protect 是一个运行时应用程序自我保护 (RASP) 工具。它使用与对比度评估相同的嵌入式代理。该工具对生产环境进行范围划分，以识别其中的任何漏洞利用和未知威胁。然后它将问题报告给安全信息和事件管理 (SIEM) 控制台、防火墙或其他安全工具。</p><h3 id="_5-elastalert" tabindex="-1">5) ElastAlert <a class="header-anchor" href="#_5-elastalert" aria-label="Permalink to &quot;5) ElastAlert&quot;">​</a></h3><p>ElastAlert 是一个开源工具，它提供了一个框架，用于从 Elasticsearch 数据中接收有关安全漏洞和其他模式的实时警报。它将弹性搜索数据与一组预定义的规则进行比较。当发生任何匹配时，该工具会发出带有建议操作的警报。</p><h3 id="_6-codeai" tabindex="-1">6) CodeAI <a class="header-anchor" href="#_6-codeai" aria-label="Permalink to &quot;6) CodeAI&quot;">​</a></h3><p>CodeAI 利用深度学习技术自动识别和修复源代码中的安全漏洞。除了提供安全问题列表之外，该工具还为开发人员提供了解决方案列表。</p><h3 id="_7-aqua-security" tabindex="-1">7) Aqua Security <a class="header-anchor" href="#_7-aqua-security" aria-label="Permalink to &quot;7) Aqua Security&quot;">​</a></h3><p>Aqua Security 管理整个 CI/CD 流水线和运行时环境的安全性，以实现端到端安全性。它适用于跨所有平台和云部署的云原生应用程序和容器。</p><h3 id="_8-parasoft" tabindex="-1">8) Parasoft <a class="header-anchor" href="#_8-parasoft" aria-label="Permalink to &quot;8) Parasoft&quot;">​</a></h3><p>Parasoft 为软件测试和静态分析提供了多种自动化工具。工具扫描执行功能测试、安全测试、端到端测试以及负载和性能测试。例如，Parasoft C/C++test 用于在开发早期发现缺陷，Parasoft Insure++ 用于识别不稳定的编程和内存访问错误，Parasoft Jtest 用于 Java 软件开发测试，Parasoft dotTEST 用于补充 Visual Studio 工具。</p><h3 id="_9-contract-assess" tabindex="-1">9) Contract Assess <a class="header-anchor" href="#_9-contract-assess" aria-label="Permalink to &quot;9) Contract Assess&quot;">​</a></h3><p>Contract Assess 是一种交互式应用程序安全测试 (IAST) 工具，可以与您的应用程序无缝集成。它监控代码并在发现任何安全问题时通知您。该工具还使非安全开发人员能够自行查找和修复漏洞。</p><h3 id="_10-red-hat-ansible-automation" tabindex="-1">10) Red Hat Ansible Automation <a class="header-anchor" href="#_10-red-hat-ansible-automation" aria-label="Permalink to &quot;10) Red Hat Ansible Automation&quot;">​</a></h3><p>该工具包含三个模块，包括 Ansible Engine、Ansible Tower 和 Red Hat Ansible Network Automation。DevOps 团队可以单独或一起使用这些模块作为无代理 IT 自动化技术。RedHat Ansible Automation使您能够定义一组安全规则来保护您的软件开发项目。</p><h3 id="_11-stackstrom" tabindex="-1">11) StackStrom <a class="header-anchor" href="#_11-stackstrom" aria-label="Permalink to &quot;11) StackStrom&quot;">​</a></h3><p>StackStrom 是一个开源工具，它提供事件驱动的自动化，在发现安全漏洞时提供脚本化补救和响应。它还提供持续部署和聊天操作优化。</p><h3 id="_12-veracode" tabindex="-1">12) Veracode <a class="header-anchor" href="#_12-veracode" aria-label="Permalink to &quot;12) Veracode&quot;">​</a></h3><p>Veracode 在 DevSecOps 生态系统中提供了大量流行的一套自动化安全工具，Veracode 工具有 开发人员沙箱、软件组合分析 (SCA)、Greenlight 和静态分析。开发人员沙箱会自动扫描沙箱中的代码以查找漏洞；而 Greenlight 会在编写代码时自动扫描您的代码；SCA 工具检测易受攻击的组件；静态分析工具发现应用程序缺陷。</p><h3 id="_13-grafana" tabindex="-1">13) Grafana <a class="header-anchor" href="#_13-grafana" aria-label="Permalink to &quot;13) Grafana&quot;">​</a></h3><p>Grafana 是一个分析平台。它使 DevSecOps 团队能够构建自定义仪表板，收集和关联所有相关数据，以可视化和查询安全数据。这也是一个开源工具。</p><h3 id="_14-iriusrisk" tabindex="-1">14) IriusRisk <a class="header-anchor" href="#_14-iriusrisk" aria-label="Permalink to &quot;14) IriusRisk&quot;">​</a></h3><p>IriusRisk 为云和本地环境自动进行风险和需求分析。它使用基于问卷的界面来设计威胁模型和技术安全要求。IriusRisk 使 DevSecOps 团队能够管理代码构建和安全测试阶段。</p><h3 id="_15-threat-modeler" tabindex="-1">15) THreat Modeler <a class="header-anchor" href="#_15-threat-modeler" aria-label="Permalink to &quot;15) THreat Modeler&quot;">​</a></h3><p>Threat Modeler 是一种自动化威胁建模工具，可分析应用程序数据并使用威胁情报识别潜在威胁。AppSec 和云版本均提供此工具。</p><h3 id="_16-kibana" tabindex="-1">16) Kibana <a class="header-anchor" href="#_16-kibana" aria-label="Permalink to &quot;16) Kibana&quot;">​</a></h3><p>如果您使用 Elasticsearch，Kibana 会派上用场。它将大量日志条目聚合到操作数据和应用程序监控等的统一图形视图中。Kibana 是一个开源工具。</p><h3 id="_17-bdd-security" tabindex="-1">17) BDD-Security <a class="header-anchor" href="#_17-bdd-security" aria-label="Permalink to &quot;17) BDD-Security&quot;">​</a></h3><p>BDD-Security 是 Continuum Security 提供的开源框架。该框架允许开发团队测试以行为驱动开发 (BDD) 语言编写的功能性和非功能性安全环境，以实现敏捷开发过程。它的设计使得安全功能不依赖于特定于应用程序的导航逻辑。因此，相同的安全要求可以更容易地应用于各种应用程序。</p><h3 id="_18-checkmarx-cxsast" tabindex="-1">18) Checkmarx CxSAST <a class="header-anchor" href="#_18-checkmarx-cxsast" aria-label="Permalink to &quot;18) Checkmarx CxSAST&quot;">​</a></h3><p>这是来自 Check marx Software Exposure Platform 的 SAST 工具。它能够跨 25 种编码和脚本语言扫描未构建/未编译的源代码。该工具可以与所有集成开发环境 (IDE) 无缝集成，并在 SDLC 早期识别数百个安全漏洞。此 SAST 工具将安全性嵌入到所有 DevOps 阶段以及用于识别运行应用程序中的安全问题的交互式应用程序安全测试 (IAST) 工具。</p><h3 id="_19-owasp-threat-dragon" tabindex="-1">19) OWASP Threat Dragon <a class="header-anchor" href="#_19-owasp-threat-dragon" aria-label="Permalink to &quot;19) OWASP Threat Dragon&quot;">​</a></h3><p>Threat Dragon 是一个基于 Web 的开源工具。它为自动威胁建模及其缓解提供系统图表和规则引擎。该工具具有易于使用的界面，可与其他软件开发生命周期工具无缝集成。</p><h3 id="_20-fortify" tabindex="-1">20) Fortify <a class="header-anchor" href="#_20-fortify" aria-label="Permalink to &quot;20) Fortify&quot;">​</a></h3><p>Fortify 提供涵盖整个软件开发生命周期的端到端应用程序安全性。Fortify on Demand 是 Micro Focus 提供的一种应用程序安全即服务产品，它将静态、动态和移动应用程序安全测试与生产中的 Web 应用程序的持续监控集成在一起。</p><h3 id="_21-chef-inspec" tabindex="-1">21) Chef InSpec <a class="header-anchor" href="#_21-chef-inspec" aria-label="Permalink to &quot;21) Chef InSpec&quot;">​</a></h3><p>Chef InSpec 是一个开源工具，可在每个开发阶段自动进行安全测试。这有助于确保传统服务器、容器和云 API 的合规性和安全策略要求。</p><h3 id="_22-synopsys-suite" tabindex="-1">22) Synopsys suite <a class="header-anchor" href="#_22-synopsys-suite" aria-label="Permalink to &quot;22) Synopsys suite&quot;">​</a></h3><p>Synopsys 提供了大量应用程序安全测试工具，包括 Black Duck、Coverity 和 Seeker IAST。Black Duck 是一种 SCA 工具，用于检测和管理应用程序和容器中使用的开源和第三方代码的安全性；Coverity 是一个 SAST 工具，可以无缝集成到 CI/CD 流水线并自动化测试；Seeker IAST 检测运行时安全风险并为应用程序安全测试提供各种托管服务。</p><h3 id="_23-gauntlt" tabindex="-1">23) Gauntlt <a class="header-anchor" href="#_23-gauntlt" aria-label="Permalink to &quot;23) Gauntlt&quot;">​</a></h3><p>Gauntlt 是一种流行的开源测试框架，可在开发、运营和安全团队之间提供简单的安全测试和通信。该工具可以轻松集成到您现有的工具和流程中。</p><h3 id="_24-dome9-arc" tabindex="-1">24）Dome9 Arc <a class="header-anchor" href="#_24-dome9-arc" aria-label="Permalink to &quot;24）Dome9 Arc&quot;">​</a></h3><p>该工具使 DevSecOps 团队能够将安全性融合到公共云应用程序的构建、部署和运行阶段。Dome9 Arc 提供自动化测试和安全实施。</p><h3 id="_25-red-had-open-shift" tabindex="-1">25) Red Had Open Shift <a class="header-anchor" href="#_25-red-had-open-shift" aria-label="Permalink to &quot;25) Red Had Open Shift&quot;">​</a></h3><p>此 DevSecOps 工具为基于容器的应用程序提供内置安全性。该工具的安全产品包括基于角色的访问控制、整个容器构建过程的安全检查以及启用安全增强的 Linux (SE Linux) 的隔离。</p><h3 id="_26-redlock" tabindex="-1">26) RedLock <a class="header-anchor" href="#_26-redlock" aria-label="Permalink to &quot;26) RedLock&quot;">​</a></h3><p>RedLock，以前称为 Evident.io，使开发人员能够在开发阶段快速识别和解决安全威胁。它用于检测跨网络架构、资源配置和用户活动的威胁，尤其是在 Amazon S3 和 EBS 卷上。</p><h3 id="_27-sd-elements" tabindex="-1">27) SD Elements <a class="header-anchor" href="#_27-sd-elements" aria-label="Permalink to &quot;27) SD Elements&quot;">​</a></h3><p>SD Elements 是一个自动化平台。它收集与您的软件有关的信息，检测其中的威胁并提供补救措施。该工具还强调相关的安全控制，以帮助您实现安全和合规性需求。</p><h3 id="_28-white-hat-sentinel-application-security-platform" tabindex="-1">28) White Hat Sentinel Application Security Platform <a class="header-anchor" href="#_28-white-hat-sentinel-application-security-platform" aria-label="Permalink to &quot;28) White Hat Sentinel Application Security Platform&quot;">​</a></h3><p>该平台在整个 SDLC 阶段提供应用程序安全性。它使开发人员能够将安全性集成到他们的工具和安全团队中，以执行持续测试以确保应用程序在生产中的安全。</p><h2 id="为您的企业选择-devops-安全工具的简单方法" tabindex="-1">为您的企业选择 DevOps 安全工具的简单方法 <a class="header-anchor" href="#为您的企业选择-devops-安全工具的简单方法" aria-label="Permalink to &quot;为您的企业选择 DevOps 安全工具的简单方法&quot;">​</a></h2><p>尽管在整个 SDLC中采用<a href="./2022-05-26-devsecops-guide">DevSecOps</a>方法的过程看起来很简单，但它可能是令人生畏和具有挑战性的。选择正确的 DevSecOps 工具集可能是一个良好的开端。坚定地引出有关您组织的系统、网络、流程和团队的见解。然后，利用最能帮助您并且非常适合的工具。</p><hr><ul><li><a href="https://www.opsera.io/learn/integrate-security-to-devops-toolchain" target="_blank" rel="noreferrer">https://www.opsera.io/learn/integrate-security-to-devops-toolchain</a></li></ul>',154)]))}const b=e(s,[["render",i]]);export{u as __pageData,b as default};
