import{_ as i,a,af as t,o as n}from"./chunks/framework.C87LdZyP.js";const g=JSON.parse('{"title":"使用自动分类加载预训练实例","description":"","frontmatter":{"title":"使用自动分类加载预训练实例","date":"2023-03-01T00:00:00.000Z","tags":["ai","ml","transformer"],"category":["AI"]},"headers":[],"relativePath":"posts/2023/03/2023-03-01-transformer-autoclass-toturial.md","filePath":"posts/2023/03/2023-03-01-transformer-autoclass-toturial.md","lastUpdated":1718173059000}'),h={name:"posts/2023/03/2023-03-01-transformer-autoclass-toturial.md"};function e(p,s,l,k,r,d){return n(),a("div",null,s[0]||(s[0]=[t(`<p>有这么多不同的变压器架构，为您的检查点创建一个可能具有挑战性。作为 Transformers 核心理念的一部分🤗，使库易于使用、简单和灵活，从给定的检查点自动推断和加载正确的架构。该方法允许您为任何体系结构快速加载预训练模型，这样您就不必投入时间和资源从头开始训练模型。生成这种类型的与检查点无关的代码意味着，如果您的代码适用于一个检查点，它将与另一个检查点一起使用 - 只要它被训练用于类似的任务 - 即使体系结构不同。<code>AutoClass\`\`from_pretrained()</code></p><p>请记住，体系结构是指模型的框架，检查点是给定体系结构的权重。例如，BERT是一个架构，而是一个检查点。模型是一个通用术语，可以表示体系结构或检查点。<code>bert-base-uncased</code></p><p>在本教程中，了解如何：</p><ul><li>加载预训练的分词器。</li><li>加载预训练的图像处理器</li><li>加载预训练的特征提取器。</li><li>加载预训练的处理器。</li><li>加载预训练模型。</li></ul><h2 id="自动标记器" tabindex="-1">自动标记器 <a class="header-anchor" href="#自动标记器" aria-label="Permalink to &quot;自动标记器&quot;">​</a></h2><p>几乎每个 NLP 任务都以分词器开始。分词器将您的输入转换为可由模型处理的格式。</p><p>使用 <a href="https://huggingface.co/docs/transformers/v4.28.1/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained" target="_blank" rel="noreferrer">AutoTokenizer.from_pretrained（）</a> 加载分词器：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;&gt;&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> from</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> transformers </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> AutoTokenizer</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;&gt;&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> tokenizer </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> AutoTokenizer.from_pretrained(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;bert-base-uncased&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span></code></pre></div><p>然后标记您的输入，如下所示：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;&gt;&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> sequence </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;In a hole in the ground there lived a hobbit.&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;&gt;&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> print</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(tokenizer(sequence))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">{</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;input_ids&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: [</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">101</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1999</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1037</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">4920</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1999</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1996</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">2598</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">2045</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">2973</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1037</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">7570</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">10322</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">4183</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1012</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">102</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">], </span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &#39;token_type_ids&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: [</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">], </span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &#39;attention_mask&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: [</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">]}</span></span></code></pre></div><h2 id="自动图像处理器" tabindex="-1">自动图像处理器 <a class="header-anchor" href="#自动图像处理器" aria-label="Permalink to &quot;自动图像处理器&quot;">​</a></h2><p>对于视觉任务，图像处理器将图像处理成正确的输入格式。</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;&gt;&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> from</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> transformers </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> AutoImageProcessor</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;&gt;&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> image_processor </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> AutoImageProcessor.from_pretrained(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;google/vit-base-patch16-224&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span></code></pre></div><h2 id="自动功能提取器" tabindex="-1">自动功能提取器 <a class="header-anchor" href="#自动功能提取器" aria-label="Permalink to &quot;自动功能提取器&quot;">​</a></h2><p>对于音频任务，特征提取器以正确的输入格式处理音频信号。</p><p>使用 <a href="https://huggingface.co/docs/transformers/v4.28.1/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained" target="_blank" rel="noreferrer">AutoFeatureExtractor.from_pretrained（）</a> 加载特征提取器：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;&gt;&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> from</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> transformers </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> AutoFeatureExtractor</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;&gt;&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> feature_extractor </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> AutoFeatureExtractor.from_pretrained(</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">...</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">     &quot;ehcalabres/wav2vec2-lg-xlsr-en-speech-emotion-recognition&quot;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> )</span></span></code></pre></div><h2 id="自动处理器" tabindex="-1">自动处理器 <a class="header-anchor" href="#自动处理器" aria-label="Permalink to &quot;自动处理器&quot;">​</a></h2><p>多模式任务需要结合两种类型的预处理工具的处理器。例如，<a href="https://huggingface.co/docs/transformers/model_doc/layoutlmv2" target="_blank" rel="noreferrer">LayoutLMV2</a> 模型需要图像处理器来处理图像，需要标记器来处理文本;处理器将两者结合在一起。</p><p>使用 <a href="https://huggingface.co/docs/transformers/v4.28.1/en/model_doc/auto#transformers.AutoProcessor.from_pretrained" target="_blank" rel="noreferrer">AutoProcessor.from_pretrained（）</a> 加载处理器：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;&gt;&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> from</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> transformers </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> AutoProcessor</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;&gt;&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> processor </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> AutoProcessor.from_pretrained(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;microsoft/layoutlmv2-base-uncased&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span></code></pre></div><h2 id="自动建模" tabindex="-1">自动建模 <a class="header-anchor" href="#自动建模" aria-label="Permalink to &quot;自动建模&quot;">​</a></h2><p>皮托奇</p><p>隐藏 Pytorch 内容</p><p>最后，这些类允许您为给定任务加载预训练模型（有关可用任务的完整列表，请参阅此处）。例如，使用 AutoModelForSequenceClassification.from_pretrained（） 加载用于序列分类的模型：<code>AutoModelFor</code></p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;&gt;&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> from</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> transformers </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> AutoModelForSequenceClassification</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;&gt;&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> model </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> AutoModelForSequenceClassification.from_pretrained(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;distilbert-base-uncased&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span></code></pre></div><p>轻松重用同一检查点，为不同的任务加载架构：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;&gt;&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> from</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> transformers </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> AutoModelForTokenClassification</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;&gt;&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> model </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> AutoModelForTokenClassification.from_pretrained(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;distilbert-base-uncased&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span></code></pre></div><p>对于 PyTorch 模型，该方法使用内部使用并且已知不安全。通常，切勿加载可能来自不受信任的来源或可能已被篡改的模型。对于托管在拥抱面部中心上的公共模型，此安全风险已部分缓解，每次提交时都会扫描恶意软件。请参阅 Hub 文档，了解最佳实践，例如使用 GPG 进行签名提交验证。<code>from_pretrained()\`\`torch.load()\`\`pickle</code></p><p>TensorFlow 和 Flax 检查点不受影响，可以使用 and kwargs 在 PyTorch 架构中加载，以规避此问题。<code>from_tf\`\`from_flax\`\`from_pretrained</code></p><p>通常，我们建议使用类和类来加载模型的预训练实例。这将确保您每次都加载正确的体系结构。在下一教程中，了解如何使用新加载的分词器、图像处理器、特征提取器和处理器来预处理数据集以进行微调。<code>AutoTokenizer\`\`AutoModelFor</code></p><p>张量流</p><p>隐藏 TensorFlow 内容</p><p>最后，这些类允许您为给定任务加载预训练模型（有关可用任务的完整列表，请参阅此处）。例如，使用 TFAutoModelForSequenceClassification.from_pretrained（） 加载用于序列分类的模型：<code>TFAutoModelFor</code></p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;&gt;&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> from</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> transformers </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> TFAutoModelForSequenceClassification</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;&gt;&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> model </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> TFAutoModelForSequenceClassification.from_pretrained(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;distilbert-base-uncased&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span></code></pre></div><p>轻松重用同一检查点，为不同的任务加载架构：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;&gt;&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> from</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> transformers </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> TFAutoModelForTokenClassification</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;&gt;&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> model </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> TFAutoModelForTokenClassification.from_pretrained(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;distilbert-base-uncased&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span></code></pre></div><p>通常，我们建议使用类和类来加载模型的预训练实例。这将确保您每次都加载正确的体系结构。在下一教程中，了解如何使用新加载的分词器、图像处理器、特征提取器和处理器来预处理数据集以进行微调。<code>AutoTokenizer\`\`TFAutoModelFor</code></p><hr><ul><li><a href="https://huggingface.co/docs/transformers/autoclass_tutorial" target="_blank" rel="noreferrer">https://huggingface.co/docs/transformers/autoclass_tutorial</a></li></ul>`,40)]))}const C=i(h,[["render",e]]);export{g as __pageData,C as default};
