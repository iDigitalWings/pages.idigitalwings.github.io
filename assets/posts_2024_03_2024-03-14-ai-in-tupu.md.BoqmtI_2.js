import{_ as a,a as i,af as t,o as n}from"./chunks/framework.C87LdZyP.js";const p="/assets/415983256711791.CLLREilg.png",e="/assets/416935527996166.CARo8oLM.png",l="/assets/417386458342208.CFR5UdBa.png",h="/assets/417749921775250.DUM3rRSL.png",r="/assets/414331411882000.D6CoFLIA.png",o="/assets/414331411882000.D6CoFLIA.png",k="/assets/414705650242708.6SBdWSR-.png",d="/assets/414748612782083.NIzdQwXq.png",c="/assets/415133373256041.B4YcXqbF.png",g="/assets/415476637688791.zhtOziry.png",F="/assets/415567083564250.Bvtm1yWc.png",q=JSON.parse('{"title":"todo ai 获取图谱节点图片","description":"","frontmatter":{"title":"todo ai 获取图谱节点图片","date":"2024-03-14T00:00:00.000Z","tags":["ai","llm"],"category":["ai"]},"headers":[],"relativePath":"posts/2024/03/2024-03-14-ai-in-tupu.md","filePath":"posts/2024/03/2024-03-14-ai-in-tupu.md","lastUpdated":1718173059000}'),m={name:"posts/2024/03/2024-03-14-ai-in-tupu.md"};function u(y,s,b,D,C,_){return n(),i("div",null,s[0]||(s[0]=[t('<div class="admonition abstract"><p class="admonition-title">abstract</p></div><h2 id="ai生成节点描述" tabindex="-1">AI生成节点描述 <a class="header-anchor" href="#ai生成节点描述" aria-label="Permalink to &quot;AI生成节点描述&quot;">​</a></h2><p>知识图谱中记录了很多我特别熟悉的工具和实体，还有一部分我不是那么常用的，可能过一个月在看，我就忘记了他是啥。 以及我导入的数据，也有不少看名字不知道是啥的东西。此时节点的<strong>描述</strong>就很重要了。</p><p>手动维护描述当然是效果最好的，但是也是最费费力的。我们下面看一下能不能做一些自动化。</p><h3 id="使用-ai-完善介绍" tabindex="-1">使用 AI 完善介绍 <a class="header-anchor" href="#使用-ai-完善介绍" aria-label="Permalink to &quot;使用 AI 完善介绍&quot;">​</a></h3><p>第一种方案就是使用AI完善介绍。节点介绍不用太长，一句话即可，我们可以使用多伦对话来教他怎么写描述。 我直接贴出来我代码：</p><p><img src="'+p+'" alt=""></p><p>效果还不错，上篇文章的导航里面数据库的介绍就是用这个方法来让 AI 生成的：</p><p><img src="'+e+'" alt=""></p><h2 id="获取-logo" tabindex="-1">获取 Logo <a class="header-anchor" href="#获取-logo" aria-label="Permalink to &quot;获取 Logo&quot;">​</a></h2><p>手动搜集节点图像和 Logo 也是一件很麻烦的事情，最简单的自动化方案是使用搜索引擎的API。</p><h3 id="谷歌-serpapi" tabindex="-1">谷歌/SerpAPI <a class="header-anchor" href="#谷歌-serpapi" aria-label="Permalink to &quot;谷歌/SerpAPI&quot;">​</a></h3><p>比如 <a href="https://serpapi.com/images-results" target="_blank" rel="noreferrer">SerpAPI</a> 调用谷歌的图像搜索：</p><p><img src="'+l+'" alt=""></p><h3 id="必应" tabindex="-1">必应 <a class="header-anchor" href="#必应" aria-label="Permalink to &quot;必应&quot;">​</a></h3><p>或者<a href="https://www.microsoft.com/en-us/bing/apis/bing-image-search-api" target="_blank" rel="noreferrer">必应图像搜索API</a>： <img src="'+h+'" alt=""></p><blockquote><p>上面集成好的接口需要注册，或者有一定使用限制。大家也可以使用其他的自动化工具或服务来获取Logo。</p></blockquote><h3 id="ai-获取-logo" tabindex="-1">AI 获取 Logo？ <a class="header-anchor" href="#ai-获取-logo" aria-label="Permalink to &quot;AI 获取 Logo？&quot;">​</a></h3><p>经过我的测试，所有的AI来获取这些准确信息，都不是分别的完美。 包含不限于节点Logo、主页域名等等。</p><h2 id="自动节点颜色" tabindex="-1">自动节点颜色 <a class="header-anchor" href="#自动节点颜色" aria-label="Permalink to &quot;自动节点颜色&quot;">​</a></h2><p>最早的版本中，节点的颜色是使用根据类型确定了。为此还单独做了好几种色板，可以切换色板和透明度。 这个对固定类型的节点还是很有用。</p><p>后来允许每个节点都可以设置颜色，但是实际过程中，我都懒得给节点设置颜色。</p><p>每个节点都有自己的 Logo 之后，我有整活了，提取每个节点的Logo主色调（过滤掉黑白），作为他的颜色， 因为黑色或者白的的节点在黑色背景中显示不太好，如果Logo只有黑白色，那么用红色作为Logo色。</p><p>效果如下：</p><p><img src="'+r+'" alt=""></p><div class="admonition note"><p class="admonition-title">HSL</p><p>HSL即色相、饱和度、亮度（英语：Hue, Saturation, Lightness）。 HSL是一种将RGB色彩模型中的点在圆柱坐标系中的表示法。 这两种表示法试图做到比基于笛卡尔坐标系的几何结构RGB更加直观。 是运用最广的颜色系统之一。</p></div><h3 id="实现方法" tabindex="-1">实现方法 <a class="header-anchor" href="#实现方法" aria-label="Permalink to &quot;实现方法&quot;">​</a></h3><p>由于 OpenCV 等库安装太麻烦，我用了一个比较简单的方案来实现。</p><p><img src="'+o+'" alt=""></p><p>先把图片的颜色（每个像素）RGB 转换成 HSL， 去掉太亮、太暗的颜色，留下彩色像素：</p><p><img src="'+k+'" alt=""></p><p>这里不关心 S 和 B 两个参数，只用去色相，然后把色相等分12分，</p><p><img src="'+d+'" alt=""></p><p>最终只采用12个颜色，看所有像素中这12个颜色那个颜色比较多，哪个颜色就作为主色。</p><p><img src="'+c+'" alt=""></p><p>可以让AI帮你写代码，自己稍微做个调整：</p><p><img src="'+g+'" alt=""></p><p>可以看一下最终效果还是不错：</p><p><img src="'+F+`" alt=""></p><h2 id="opencv" tabindex="-1">opencv <a class="header-anchor" href="#opencv" aria-label="Permalink to &quot;opencv&quot;">​</a></h2><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">/bin/bash</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> -c</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;$(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">curl</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> -fsSL</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">brew</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> cmake</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> pkg-config</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">brew</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> jpeg</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> libpng</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> libtiff</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> openexr</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">brew</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> eigen</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> tbb</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">brew</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> opencv</span></span></code></pre></div><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">We</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">&#39;ve installed your MySQL database without a root password. To secure it run:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">    mysql_secure_installation</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">MySQL is configured to only allow connections from localhost by default</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">To connect run:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">    mysql -u root</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">To start mysql now and restart at login:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">  brew services start mysql</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">Or, if you don&#39;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">t</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> want/need</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> a</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> background</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> service</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> you</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> can</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> just</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> run:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">  /opt/homebrew/opt/mysql/bin/mysqld_safe</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> --datadir</span><span style="--shiki-light:#005CC5;--shiki-dark:#F47067;">\\=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">/opt/homebrew/var/mysql</span></span></code></pre></div>`,42)]))}const v=a(m,[["render",u]]);export{q as __pageData,v as default};
