import{_ as a,a as r,af as e,o as s}from"./chunks/framework.C87LdZyP.js";const p="/assets/2928631752207916.DfhIyTKK.png",o="/assets/2924863062792791.DzRD3n8A.png",n="/assets/2924891761471416.8x1eVckN.png",i="/assets/2929255906293541.BxP4yPpd.png",l="/assets/2929243491894125.CIWVFyyh.png",c="/assets/2928240848963375.C3pbGfZ2.png",g="/assets/2928272026949166.DpmF-7yx.png",m="/assets/2928323705212041.B6LnZ8EP.png",h="/assets/2928377923646166.BMkygLRF.png",P="/assets/2928789195019625.B8QwdDlo.png",d="/assets/2929077858577083.CVvGp4Mi.png",_="/assets/2929004017725375.nd5rgLzO.png",E="/assets/2929055878767250.BSiu8gr-.png",b="/assets/2929024998924125.BWS7itQA.png",v=JSON.parse('{"title":"PromptEngineering：自动提示工程师(APE)比人类写的提示词更强 ？","description":"","frontmatter":{"title":"PromptEngineering：自动提示工程师(APE)比人类写的提示词更强 ？","date":"2023-07-15T00:00:00.000Z","tags":["ai","ml"],"category":["AI"]},"headers":[],"relativePath":"topics/prompt-engineering/articles/2023-07-15-Prompt-Engineering-APE.md","filePath":"topics/prompt-engineering/articles/2023-07-15-Prompt-Engineering-APE.md","lastUpdated":1718173059000}'),A={name:"topics/prompt-engineering/articles/2023-07-15-Prompt-Engineering-APE.md"};function f(u,t,L,k,q,x){return s(),r("div",null,t[0]||(t[0]=[e('<div class="admonition abstract"><p class="admonition-title">abstract</p><p><strong>自动提示工程师（APE）</strong> 技术可以实现比人类手动编写更好的提示词生成， 在多个数据集上测试均取得很好的效果。APE 受经典程序合成和提示工程的人类方法的启发，自动生成和选择指令， 指令视为「程序」，通过搜索 LLM 提出的候选指令池进行优化，以最大化所选的分数函数，提升指令指令， 最终让 LLM 获得更好的推理预测结果。</p></div><p>APE 技术也是伴随论文发表的，并同时发布了测试结果、源码以及 Colab 程序，我先画一下 APE 的原理。</p><p><img src="'+p+'" alt="APE 原理"></p><h2 id="论文" tabindex="-1">论文 <a class="header-anchor" href="#论文" aria-label="Permalink to &quot;论文&quot;">​</a></h2><p>去年年底（2022）周永超等人，提出 APE(Automatic Prompt Engineer) 这个方法，并发表了论文<a href="https://arxiv.org/abs/2211.01910" target="_blank" rel="noreferrer">《大型语言模型是人类水平的提示工程师》</a>。</p><p>论文指出，大型语言模型 (LLM) 显示了作为通用计算机已经广为人知并让人印象深刻， 然而，任务表现在很大程度上取决于用于引导模型的提示的质量，并且大多数<strong>有效的提示</strong>都是由<strong>人类手工制作</strong>的。</p><p>作者受到经典程序合成和提示工程的人类方法的启发，提出了自动提示工程师（APE）用于自动指令生成和选择，APE 将指令视为「程序」， 通过搜索 LLM 提出的候选指令池进行优化，以最大化所选的分数函数。</p><h2 id="性能" tabindex="-1">性能 <a class="header-anchor" href="#性能" aria-label="Permalink to &quot;性能&quot;">​</a></h2><p>经过大量的示例，APE 在 全部 24 个指令归纳任务和21个策划任务中的17个，都实现了比人类注释者生成的指令更好或相当的性能。</p><p><img src="'+o+'" alt="APE在 24 项任务中的 24 项上达到了人类水平的表现"></p><p><img src="'+n+'" alt="APE 能够在17/21 任务上的零样本性能中提高或匹配人类提示"></p><p>APE 感觉最牛的地方就是，他可以比人类设计的提示词更加好，和<a href="https://arxiv.org/abs/2109.07958" target="_blank" rel="noreferrer">这篇论文</a>人工设计的提示词相比，APE 在多方面获胜。</p><p><img src="'+i+'" alt="APE指令在所有三个指标上都优于人工设计的提示"></p><p>按不同指标排名的前10 个候选者调查了真实性和信息性之间的权衡。APE指令倾向于针对此 %true-%info 权衡边界边界的两端。</p><p><img src="'+l+'" alt="APE指令倾向于针对此 %true-%info 权衡边界边界的两端"></p><h2 id="ape-原理" tabindex="-1">APE 原理 <a class="header-anchor" href="#ape-原理" aria-label="Permalink to &quot;APE 原理&quot;">​</a></h2><p>我下面简单画图展示一下 APE 的过程</p><h3 id="指令生成" tabindex="-1">指令生成 <a class="header-anchor" href="#指令生成" aria-label="Permalink to &quot;指令生成&quot;">​</a></h3><p>首先 LLM 生成指令</p><p><img src="'+c+'" alt="LLM 生成指令"></p><h3 id="打分" tabindex="-1">打分 <a class="header-anchor" href="#打分" aria-label="Permalink to &quot;打分&quot;">​</a></h3><p>然后让 LLM 对指令进行打分</p><p><img src="'+g+'" alt="LLM 进行打分"></p><p>打分之后的结果就能区分出指令的好坏。</p><p><img src="'+m+'" alt="LLM 打分"></p><h3 id="输出" tabindex="-1">输出 <a class="header-anchor" href="#输出" aria-label="Permalink to &quot;输出&quot;">​</a></h3><p>结合前面的过程，最终 LLM 就可以输出比较理想的结果了：</p><p><img src="'+h+'" alt="LLM 最终输出"></p><h2 id="程序" tabindex="-1">程序 <a class="header-anchor" href="#程序" aria-label="Permalink to &quot;程序&quot;">​</a></h2><p>作者在其<a href="https://sites.google.com/view/automatic-prompt-engineer" target="_blank" rel="noreferrer">网站</a>上， 给出了<a href="https://colab.research.google.com/drive/1oL1CcvzRybAbmeqs--2csaIvSOpjH072?usp=sharing" target="_blank" rel="noreferrer">示例程序</a>，大家可以直接在 Colab 上执行。 或者下载 <a href="https://github.com/keirp/automatic_prompt_engineer" target="_blank" rel="noreferrer">Github 仓库</a> 本地运行。</p><p>界面如下：</p><p><img src="'+P+'" alt="APE 界面"></p><p>用户可以选择数据集：</p><p><img src="'+d+'" alt=""></p><p>选择对应的模型进行生成和评估：</p><p><img src="'+_+'" alt=""></p><p>估算费用，并执行：</p><p><img src="'+E+'" alt=""></p><p>查看运行结果及得分：</p><p><img src="'+b+'" alt=""></p><h2 id="结语" tabindex="-1">结语 <a class="header-anchor" href="#结语" aria-label="Permalink to &quot;结语&quot;">​</a></h2><p>APE 着实又给我打开了一个思路，不过 APE 不像 CoT 那样最简单的改改提示词就能 让现在的 LLM 提升一定效果，它更适合企业级的应用，需要程序配合人工去完成，但这个正式企业应用投入所不可或缺的。</p>',42)]))}const y=a(A,[["render",f]]);export{v as __pageData,y as default};
