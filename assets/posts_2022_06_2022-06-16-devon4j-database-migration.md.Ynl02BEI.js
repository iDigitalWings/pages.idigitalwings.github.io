import{_ as e,a as s,af as t,o as i}from"./chunks/framework.C87LdZyP.js";const g=JSON.parse('{"title":"Devon4j: Database Migration 数据库迁移","description":"","frontmatter":{"title":"Devon4j: Database Migration 数据库迁移","date":"2022-06-16T00:00:00.000Z","tags":["devon4j"],"category":["架构"]},"headers":[],"relativePath":"posts/2022/06/2022-06-16-devon4j-database-migration.md","filePath":"posts/2022/06/2022-06-16-devon4j-database-migration.md","lastUpdated":1718173059000}'),r={name:"posts/2022/06/2022-06-16-devon4j-database-migration.md"};function o(n,a,l,p,d,c){return i(),s("div",null,a[0]||(a[0]=[t(`<p>当您拥有基于模式的数据库时，您需要一个用于数据库的模式版本控制和迁移的解决方案。 您的应用程序的特定版本需要数据库中相应版本的架构才能运行。 由于您想要简单且持续的部署，您应该自动化架构版本和数据库迁移。</p><p>一般的想法是您的软件产品包含「脚本」以将数据库从版本<code>X</code>迁移到版本<code>X+1</code>。 当你开始你的项目时，你从版本从<code>1</code>开始， 并且随着您的应用程序的每个增量需要更改数据库架构（例如，新表、现有表的新列、新索引等）， 您添加另一个从当前迁移到下一个版本的「脚本」。 为简单起见，这些版本只是序列号或时间戳。 现在，您选择的解决方案将自动管理数据库中存储当前架构版本的单独元数据表中的架构版本。 当您的应用程序启动时，它将从该元数据表中检查数据库中的当前版本。 只要有从那里迁移到更高版本的「脚本」，它们就会自动应用于数据库，直到更新到当前的最高版本。 使用这种方法，您可以从一个空数据库开始，这将导致按顺序应用所有脚本。 此外，您的数据库架构的任何版本都可以存在，并且您将始终以受控迁移到最新的架构版本。</p><h2 id="数据库迁移选项" tabindex="-1">数据库迁移选项 <a class="header-anchor" href="#数据库迁移选项" aria-label="Permalink to &quot;数据库迁移选项&quot;">​</a></h2><p>对于数据库迁移，您可以选择以下选项：</p><ul><li><strong>flyway</strong>（基于 KISS 的方法，迁移为 SQL）</li><li><strong>liquibase</strong>（更复杂的数据库抽象方法）</li></ul><h2 id="flyway" tabindex="-1">Flyway <a class="header-anchor" href="#flyway" aria-label="Permalink to &quot;Flyway&quot;">​</a></h2><p><a href="http://flywaydb.org/" target="_blank" rel="noreferrer">Flyway</a>是一个用于<strong>数据库迁移和模式版本控制</strong>的工具。 了解<a href="https://flywaydb.org/getstarted/why" target="_blank" rel="noreferrer">为什么</a>使用 flyway 的动机。</p><p>Flyway 可以独立使用，例如通过<a href="https://flywaydb.org/documentation/getstarted/firststeps/maven" target="_blank" rel="noreferrer">flyway-maven-plugin</a>可以直接集成到您的应用程序中，以确保数据库迁移发生在启动时。 为简单起见，我们建议将 flyway 集成到您的应用程序中。但是，您需要注意，您的应用程序需要具有完整架构所有者权限的数据库访问权限。</p><h3 id="组织建议" tabindex="-1">组织建议 <a class="header-anchor" href="#组织建议" aria-label="Permalink to &quot;组织建议&quot;">​</a></h3><p>关于项目组织的一些考虑将有助于实现可维护的 Flyway 迁移。</p><p>首先，测试和生产环境必须清晰一致地区分开来。使用以下目录结构来实现这种区别：</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span>  src/main/resources/db</span></span>
<span class="line"><span>  src/test/resources/db</span></span></code></pre></div><p>虽然这种结构引入了冗余，但好处超过了这个缺点。应该实现一个更细粒度的生产目录结构，每个版本包含一个子文件夹：</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span>  src/main/resources/db/migration/releases/X.Y/x.sql</span></span></code></pre></div><p>强调不能更改当前版本以下的迁移脚本将有助于迁移的第二个优势：它始终可以清楚地重现数据库当前的状态。 这里需要提一下，如果需要测试数据，必须与迁移数据分开管理，在以下目录：</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span>  src/test/resources/db/migration/</span></span></code></pre></div><p>添加该<code>migration</code>目录以帮助轻松使用 Flyway 默认值。当然，测试数据也应该像生产数据一样在每个版本中进行管理。</p><p>关于内容，关注点分离（SoC）是一个重要目标。 SoC 可以通过区分和编写关于业务组件/用例（或存在大量主数据情况下的数据库表）的多个脚本来实现。可理解的文件名有助于这种分离。</p><p>对数据库、持久层 (JPA) 和迁移有明确的职责很重要。 因此，应由专门的数据库专家负责执行的任何迁移，或者至少应在对上述任何部分进行任何更改之前通知他们。</p><h3 id="技术配置" tabindex="-1">技术配置 <a class="header-anchor" href="#技术配置" aria-label="Permalink to &quot;技术配置&quot;">​</a></h3><p>数据库迁移可以基于<a href="https://flywaydb.org/documentation/concepts/migrations%23sql-based-migrations" target="_blank" rel="noreferrer">SQL</a>或基于<a href="https://flywaydb.org/documentation/concepts/migrations%23java-based-migrations" target="_blank" rel="noreferrer">Java</a>。</p><p><code>application.properties</code>要在启动时启用自动迁移（不建议用于生产环境），请在文件中为环境设置以下属性。</p><div class="language-properties vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">properties</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">flyway.enabled</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">=true</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">flyway.clean-on-validation-error</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">=false</span></span></code></pre></div><p>对于开发环境，将这两个属性都设置为有助于<code>true</code>简化开发。对于常规环境<code>flyway.clean-on-validation-error</code>应该是<code>false</code>.</p><p>如果您想使用 Flyway，请在任何情况下设置以下属性以防止 Hibernate 对数据库进行更改（默认情况下在 devonfw 中预先配置）：</p><div class="language-properties vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">properties</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">spring.jpa.hibernate.ddl-auto</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">=validate</span></span></code></pre></div><p>该设置必须与客户及其需求进行沟通和协调。在验收测试中，应启用与生产环境相同的配置。</p><p>由于迁移脚本也将被版本化，因此必须根据<a href="https://github.com/flyway/flyway/issues/253" target="_blank" rel="noreferrer">此问题</a>修复行尾 (EOL) 样式。 然而，这在 flyway 4.0+ 和最新的 devonfw 版本中得到了解决。 此外，迁移脚本的版本号不应由简单的升序整数组成，如 V0001…、V0002…、… 这样命名可能会导致合并分支时出现问题。 相反，使用时间戳作为版本号将有助于避免此类问题。</p><h3 id="命名约定" tabindex="-1">命名约定 <a class="header-anchor" href="#命名约定" aria-label="Permalink to &quot;命名约定&quot;">​</a></h3><p>数据库迁移应遵循以下命名约定：<code>V&lt;version&gt;__&lt;description&gt;</code>（例如：<code>V12345__Add_new_table.sql</code>）。</p><p>也可以将 Flyway 用于测试数据。为此，请将您的测试数据迁移放在 <code>src/main/resources/db/testdata/</code>，并设置属性</p><div class="language-properties vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">properties</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">flyway.locations</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">=classpath:db/migration/releases,classpath:db/migration/testdata</span></span></code></pre></div><p>然后 Flyway 扫描配置目录以进行迁移，并按照其版本指定的顺序应用所有迁移。 如果迁移 <code>V0001__...</code> 和 <code>V0002__...</code> 存在并且应该在两者之间应用测试数据迁移，您可以将其命名为 <code>V0001_1__...</code>。</p><h2 id="liquibase" tabindex="-1">Liquibase <a class="header-anchor" href="#liquibase" aria-label="Permalink to &quot;Liquibase&quot;">​</a></h2><p><a href="https://www.liquibase.org/" target="_blank" rel="noreferrer">Liquibase</a>是一种用于<strong>数据库迁移和模式版本控制</strong>的工具。</p><p>有关详细信息和状态，请参阅<a href="https://github.com/devonfw/devon4j/issues/303" target="_blank" rel="noreferrer">devon4j#303</a>。</p><h3 id="spring-boot-用法" tabindex="-1">Spring-boot 用法 <a class="header-anchor" href="#spring-boot-用法" aria-label="Permalink to &quot;Spring-boot 用法&quot;">​</a></h3><p>有关在 Spring 中使用 liquibase，请参阅<a href="https://docs.liquibase.com/tools-integrations/springboot/springboot.html" target="_blank" rel="noreferrer">将 Liquibase 与 Spring Boot 一起使用</a>。</p><h3 id="quarkus-使用" tabindex="-1">Quarkus 使用 <a class="header-anchor" href="#quarkus-使用" aria-label="Permalink to &quot;Quarkus 使用&quot;">​</a></h3><p>有关在 quarkus 中使用 liquibase，请参阅<a href="https://quarkus.io/guides/liquibase" target="_blank" rel="noreferrer">使用 Liquibase</a>。</p>`,40)]))}const b=e(r,[["render",o]]);export{g as __pageData,b as default};
