import{_ as h}from"./chunks/ArticleMetadata.BIgknxGB.js";import{_ as e,m as k,a as r,u as d,B as A,e as n,x as c,aj as g,o as t,p as o,q as y}from"./chunks/framework.Ba_Ek9Jm.js";import"./chunks/theme.CTeeA9eH.js";const S=JSON.parse('{"title":"Devon4j: 依赖注入","description":"","frontmatter":{"title":"Devon4j: 依赖注入","date":"2022-06-12T00:00:00.000Z","tags":["devon4j"],"category":["架构"]},"headers":[],"relativePath":"posts/2022/06/2022-06-12-devon4j-dependency-injection.md","filePath":"posts/2022/06/2022-06-12-devon4j-dependency-injection.md","lastUpdated":1718173059000}'),D={name:"posts/2022/06/2022-06-12-devon4j-dependency-injection.md"},C=n("h1",{id:"依赖注入",tabindex:"-1"},[c("依赖注入 "),n("a",{class:"header-anchor",href:"#依赖注入","aria-label":'Permalink to "依赖注入"'},"​")],-1),B=g(`<p>依赖注入是最重要的设计模式之一，也是模块化和基于组件架构的关键原则。 依赖注入的 Java 标准是<a href="http://docs.oracle.com/javaee/6/api/javax/inject/package-summary.html" target="_blank" rel="noreferrer">javax.inject (JSR330)</a>， 我们将它与<a href="http://docs.oracle.com/javaee/5/api/javax/annotation/package-summary.html" target="_blank" rel="noreferrer">JSR250</a>结合使用。 此外，对于范围界定，您可以使用<a href="https://jcp.org/en/jsr/detail?id%3D365" target="_blank" rel="noreferrer">JSR365</a>中的 CDI（上下文和依赖注入） 。</p><p>有许多框架支持这个标准，包括所有最近的 Java EE 应用服务器。因此，在 devonfw 中，我们依赖这些开放标准，并且可以传播独立于底层框架工作的模式和代码示例。</p><h2 id="主要原则" tabindex="-1">主要原则 <a class="header-anchor" href="#主要原则" aria-label="Permalink to &quot;主要原则&quot;">​</a></h2><p>在依赖注入中，<em>bean</em>通常是应用程序的可重用单元，提供封装的功能。该<em>bean</em>可以注入到其他 bean 中，并且通常应该是可替换的。 作为示例，我们可以考虑逻辑层的[用例]、[存储库]等。作为最佳实践，我们使用以下原则：</p><ul><li><strong>无状态实现</strong> 默认情况下，此类 bean 应实现[无状态]。如果您将状态信息存储在成员变量中，将会很容易遇到并发问题和错误。这很容易通过使用局部变量和单独的状态类来处理复杂的状态信息来避免。尽可能避免使用有状态的 bean。仅当您完全了解自己在做什么并在 JavaDoc 中将其正确记录为警告时才添加状态。</li><li><strong>Java 标准的</strong> 使用 我们使用使我们的代码可移植的通用标准（见上文）。因此，我们使用标准化的注解，如<code>@Inject</code>(<code>javax.inject.Inject</code>)，而不是专有的注解，如<code>@Autowired</code>.通常我们避免在业务代码（[逻辑层]）中使用专有注释。</li><li><strong>简单的注入式</strong> 一般来说，您可以在构造函数、setter 或字段注入之间进行选择。为简单起见，我们建议进行私有字段注入，因为它非常紧凑且易于维护。我们认为构造函数注入不利于维护，尤其是在继承的情况下（如果您更改依赖项，则需要重构所有子类）。私有字段注入和公共 setter 注入非常相似，但 setter 注入更加冗长（通常您甚至被迫为所有公共方法使用 javadoc）。如果您正在编写可重用的库代码 setter 注入将是有意义的，因为它更灵活。在业务应用程序中，您通常不需要它，如果您改用私有字段注入，则可以节省大量样板代码。现在，您也在使用容器基础设施进行测试（请参阅[testing]），因此无需手动注入（需要公共设置器）。</li><li><strong>KISS</strong> 为了遵循 KISS（保持小而简单）的原则，我们避免使用高级功能（例如自定义[AOP]、非单例 bean），并且只在必要时使用它们。</li><li><strong>API 和实现的分离</strong> 对于重要的组件，我们应该将用 JavaDoc 记录的自包含 API 与其实现分开。想要使用该实现的其他组件的代码只能依赖 API。但是，对于永远不会交换的东西，不需要 API 作为接口，您可以跳过这种分离。</li></ul><h2 id="bean-示例" tabindex="-1">Bean 示例 <a class="header-anchor" href="#bean-示例" aria-label="Permalink to &quot;Bean 示例&quot;">​</a></h2><p>在这里，您可以看到使用依赖注入的示例 bean 的实现：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">ApplicationScoped</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">Named</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;MyComponent&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> MyComponentImpl</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> implements</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6CB6FF;"> MyComponent</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">Inject</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  private</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> MyOtherComponent</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> myOtherComponent;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">PostConstruct</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> init</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    // initialization if required (otherwise omit this method)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">PreDestroy</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> dispose</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    // shutdown bean, free resources if required (otherwise omit this method)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><p>这里<code>MyComponentImpl</code>依赖<code>MyOtherComponent</code>，使用<code>@Inject</code>注解注入到<code>myOtherComponent</code>字段中。 要完成这项工作，容器（例如spring或quarkus）中必须恰好只有一个 <code>MyOtherComponent</code> 的 bean 实例。 为了将 bean 放入容器中，我们可以使用 <code>@ApplicationScoped</code> 实现在 CDI（quarkus 需要）的情况下使用无状态 bean。 在 Spring 中，因为在 Spring 中默认情况下 bean 是无状态的，我们可以省略 CDI 注释，<code>@Named</code>注释已经足够。 如果我们总是使用<code>@ApplicationScoped</code>来声明，可以使它在不同的框架中显得更明确、更便携。 因此，在我们的示例中，我们将<code>MyComponentImpl</code>放入容器中。该 bean 被称之为<code>myOtherComponent</code>，由<code>Named</code>注解声明。 这个 <code>Named</code> 注解可以省略，那么容器就会默认使用类名。</p><p>我们可以通过<code>@Inject</code>注解注入<code>MyComponent</code>接口， 或者直接使用<code>MyComponteImpl</code>。</p><h2 id="多个-bean-实现" tabindex="-1">多个 bean 实现 <a class="header-anchor" href="#多个-bean-实现" aria-label="Permalink to &quot;多个 bean 实现&quot;">​</a></h2><p>在某些情况下，您可能有多个实现作为同一接口的 bean。以下小节处理不同的场景，为您提供指导。</p><h3 id="容器中只有一个实现" tabindex="-1">容器中只有一个实现 <a class="header-anchor" href="#容器中只有一个实现" aria-label="Permalink to &quot;容器中只有一个实现&quot;">​</a></h3><p>在某些情况下，您仍然只有一个实现在运行时作为容器中的 bean 处于活动状态。 一个典型的例子是您有不同的测试和主要用途实现。 这种情况很容易，因为它<code>@Inject</code>总是独一无二的。您唯一需要关心的是如何配置您的框架（spring、quarkus 等）以根据具体配置知道将哪个实现放入容器中。 在 Spring，这可以通过专有的注释存档<code>@Profile</code>。</p><h3 id="注入所有多个实现" tabindex="-1">注入所有多个实现 <a class="header-anchor" href="#注入所有多个实现" aria-label="Permalink to &quot;注入所有多个实现&quot;">​</a></h3><p>在某些情况下，您可能有一个定义一种“插件”的接口。 您的容器中可以有多个实现，并希望将它们全部注入。 然后，您可以通过接口请求包含所有 bean 实现的列表，如下例所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">Inject</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  private</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> List</span><span style="--shiki-light:#24292E;--shiki-dark:#F69D50;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">MyConverter</span><span style="--shiki-light:#24292E;--shiki-dark:#F69D50;">&gt; </span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">converters;</span></span></code></pre></div><p>您的代码可能会遍历所有插件（转换器）并按顺序应用它们。请注意，当没有可注入的 bean 时，注入将失败（至少在 Spring）。所以你不会得到一个空列表注入，但会在启动时得到一个异常。</p><h3 id="注入多个实现之一" tabindex="-1">注入多个实现之一 <a class="header-anchor" href="#注入多个实现之一" aria-label="Permalink to &quot;注入多个实现之一&quot;">​</a></h3><p>另一种情况是您的容器中有多个实现共存，但对于注入，您可能希望选择一个特定的实现。在这里，您可以使用<code>@Named</code>注解为每个实现指定一个唯一标识符，即所谓的命名注入：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">ApplicationScoped</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">Named</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;UserAuthenticator&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> UserAuthenticator</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> implements</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6CB6FF;"> Authenticator</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">ApplicationScoped</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">Named</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;ServiceAuthenticator&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> ServiceAuthenticator</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> implements</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6CB6FF;"> Authenticator</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> MyUserComponent</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">Inject</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">Named</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;UserAuthenticator&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  private</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> Authenticator</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> authenticator;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> MyServiceComponent</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">Inject</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">Named</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;ServiceAuthenticator&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  private</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> Authenticator</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> authenticator;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><p>但是，我们发现这种模式并不是很好：<code>@Named</code>注解中的标识符只是很容易破坏的字符串。您可以改用常量，但这仍然不是最佳解决方案。</p><p>最后，您可以通过直接注入实现来大大简化这一点：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">ApplicationScoped</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> UserAuthenticator</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> implements</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6CB6FF;"> Authenticator</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">ApplicationScoped</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> ServiceAuthenticator</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> implements</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6CB6FF;"> Authenticator</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> MyUserComponent</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">Inject</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  private</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> UserAuthenticator</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> authenticator;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> MyServiceComponent</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">Inject</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  private</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> ServiceAuthenticator</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> authenticator;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><p>如果您想与实现严格解耦，您仍然可以创建专用接口：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> UserAuthenticator</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6CB6FF;"> Authenticator</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">ApplicationScoped</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> UserAuthenticatorImpl</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> implements</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6CB6FF;"> UserAuthenticator</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> ServiceAuthenticator</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6CB6FF;"> Authenticator</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">ApplicationScoped</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> ServiceAuthenticatorImpl</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> implements</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6CB6FF;"> ServiceAuthenticator</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> MyUserComponent</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">Inject</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  private</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> UserAuthenticator</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> authenticator;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> MyServiceComponent</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">Inject</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  private</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> ServiceAuthenticator</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> authenticator;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><p>但是，正如您所看到的，这再次引入了额外的样板代码。虽然将 API 和实现分离并与实现严格解耦的原则总体上很有价值，但您应该始终考虑 KISS、精益和敏捷的对比，并权衡利弊，而不是盲目地遵循教条。</p><h2 id="进口" tabindex="-1">进口 <a class="header-anchor" href="#进口" aria-label="Permalink to &quot;进口&quot;">​</a></h2><p>以下是依赖注入最重要注解的 import 语句</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> javax.inject.Inject;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> javax.inject.Named;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> javax.enterprise.context.ApplicationScoped;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// import javax.enterprise.context.RequestScoped;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// import javax.enterprise.context.SessionScoped;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> javax.annotation.PostConstruct;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> javax.annotation.PreDestroy;</span></span></code></pre></div><h2 id="依赖" tabindex="-1">依赖 <a class="header-anchor" href="#依赖" aria-label="Permalink to &quot;依赖&quot;">​</a></h2><p>请注意，在<a href="https://jakarta.ee/" target="_blank" rel="noreferrer">Jakarta EE</a>中，依赖项已更改。当您想从 Jakarta EE 开始时，您应该使用这些依赖项来获取依赖注入的注解：</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">&lt;!-- Basic injection annotations (JSR-330) --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">dependency</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">groupId</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;jakarta.inject&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">groupId</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">artifactId</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;jakarta.inject-api&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">artifactId</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">dependency</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">&lt;!-- Basic lifecycle and security annotations (JSR-250)--&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">dependency</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">groupId</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;jakarta.annotation&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">groupId</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">artifactId</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;jakarta.annotation-api&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">artifactId</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">dependency</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">&lt;!-- Context and dependency injection API (JSR-365) --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">dependency</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">groupId</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;jakarta.enterprise&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">groupId</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">artifactId</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;jakarta.enterprise.cdi-api&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">artifactId</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">dependency</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;</span></span></code></pre></div><p>请注意，使用[quarkus]</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">&lt;!-- Basic injection annotations (JSR-330) --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">dependency</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">groupId</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;javax.inject&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">groupId</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">artifactId</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;javax.inject&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">artifactId</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">dependency</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">&lt;!-- Basic lifecycle and security annotations (JSR-250)--&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">dependency</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">groupId</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;javax.annotation&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">groupId</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">artifactId</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;javax.annotation-api&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">artifactId</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">dependency</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">&lt;!-- Context and dependency injection API (JSR-365) --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">dependency</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">groupId</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;jakarta.enterprise&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">groupId</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">artifactId</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;jakarta.enterprise.cdi-api&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">artifactId</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">dependency</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;</span></span></code></pre></div>`,35);function E(s,u,F,m,v,b){const p=h,l=k("ClientOnly");return t(),r("div",null,[C,d(l,null,{default:A(()=>{var i,a;return[(((i=s.$frontmatter)==null?void 0:i.aside)??!0)&&(((a=s.$frontmatter)==null?void 0:a.showArticleMetadata)??!0)?(t(),o(p,{key:0,article:s.$frontmatter},null,8,["article"])):y("",!0)]}),_:1}),B])}const x=e(D,[["render",E]]);export{S as __pageData,x as default};
