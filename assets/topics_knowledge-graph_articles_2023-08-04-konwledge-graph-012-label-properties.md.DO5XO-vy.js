import{_ as r,a as s,af as o,o as e}from"./chunks/framework.C87LdZyP.js";const n="/assets/185605762707666.DmmlK2Dd.png",i="/assets/187073602554666.C2DK_7lS.png",l="/assets/187021177142708.p1Gitee3.png",p="/assets/189210225955000.zrQ2JOU5.png",g="/assets/189388917834666.BjR2QU4-.png",c="/assets/195056822420333.97LH6vfW.png",h="/assets/195282801199666.ClFMZ5PM.png",d="/assets/189651957286916.ChCdG_bt.png",m="/assets/189549620997166.BHiQ2C4-.png",b="/assets/190240755584166.CSiEbR1r.png",_="/assets/190342407731750.CzjAcI13.png",a="/assets/190450844066583.DiPmrGch.png",S=JSON.parse('{"title":"《构建个人知识图谱》012：节点的自定义属性","description":"","frontmatter":{"title":"《构建个人知识图谱》012：节点的自定义属性","shortTitle":"012：节点的自定义属性","date":"2023-08-04T00:00:00.000Z","tags":["ai","ml"],"category":["AI"]},"headers":[],"relativePath":"topics/knowledge-graph/articles/2023-08-04-konwledge-graph-012-label-properties.md","filePath":"topics/knowledge-graph/articles/2023-08-04-konwledge-graph-012-label-properties.md","lastUpdated":1724039922000}'),u={name:"topics/knowledge-graph/articles/2023-08-04-konwledge-graph-012-label-properties.md"};function q(f,t,k,P,x,w){return e(),s("div",null,t[0]||(t[0]=[o('<div class="admonition abstract"><p class="admonition-title">abstract</p><p>就像我们之前的图谱一样，如果节点只有一个名称的话，未免内容过于单调， <strong>知识密度</strong>太低，当然也不能像我之前一样自用自取把节点<strong>属性固定</strong>下来。 这篇文章就和大家一起探索<strong>自定义节点属性</strong>的设计和取舍。</p></div><div class="admonition note"><p class="admonition-title">关于系列文章</p><p>文章合集地址：<a href="https://mp.weixin.qq.com/mp/appmsgalbum?__biz=MzA3MDAzNTgzMQ==&amp;action=getalbum&amp;album_id=3140493264064872449#wechat_redirect" target="_blank" rel="noreferrer">《构建 个人知识图谱》</a></p><p><br><br><strong>011</strong> 之前文章都是基于个人需求知识图谱实现的探索，011 及之后的文章和大家聊一聊图谱产品的构建，欢迎大家查阅。</p></div><h2 id="回顾" tabindex="-1">回顾 <a class="header-anchor" href="#回顾" aria-label="Permalink to &quot;回顾&quot;">​</a></h2><p>还记得之前知识图谱<strong>节点的新增</strong>么，由于我是做技术相关的知识管理，所以我把相关的常用属性都给列了出来，比如：</p><ul><li>节点常用的<strong>类型</strong>：我把用到的都写了进去，现在可以直接自定义标签了</li><li>节点的<strong>层级</strong>：最初是为了更好可视化，结果发现并不容易维护，而且对于复杂图很难确定这个层级</li><li>技术或者工具的<strong>流行度</strong>：流行的不一定是好的，但是很大程度反应了社区大小以及活跃度</li><li>我对这个技术的<strong>打分</strong>：一般我用过的才打分，这个后续如果过滤或者进行技术选型很有用</li><li><strong>开源</strong>和<strong>免费/收费</strong>：这两个是所有技术一个很明显的标签；</li><li>是否是<strong>SaaS产品</strong>：国内经过这三五年的发展，我也越来越喜欢 SaaS 这种服务方式了</li><li>是否<strong>支持本地部署</strong>：本地部署仍然是很多企业的硬性要求，也是衡量软件使用方式的重要指标</li><li>各种<strong>网址</strong>：主页、源码页、文档页、演示页、这些页面能收集到最好，这样我就能直接点进去了</li><li><strong>描述</strong>：描述看似必不可少，但是我一直其实一个也没有维护</li></ul><p><img src="'+n+'" alt="技术相关知识点的节点属性"></p><p>其实还有一些隐藏的属性没有开放，比如：</p><ul><li>首页的<strong>截图</strong>：让我能一眼看到这个长什么样子</li><li>节点的<strong>Logo</strong>：控制面板里面还专门增加了节点名称的显示方式：<strong>3D文本</strong>、<strong>HTML</strong>、<strong>图片</strong>。这个图片就是用的节点 Logo。</li></ul><p><img src="'+i+'" alt="图谱浏览使用节点的 Logo 展示"></p><p><img src="'+l+'" alt="节点详情截图的展示"></p><h2 id="自定义属性" tabindex="-1">自定义属性 <a class="header-anchor" href="#自定义属性" aria-label="Permalink to &quot;自定义属性&quot;">​</a></h2><p>既然<strong>节点属性不可或缺</strong>，那么怎么让用户自定义呢，简单来说：有三中方式：</p><h3 id="完全节点自定义" tabindex="-1">完全节点自定义 <a class="header-anchor" href="#完全节点自定义" aria-label="Permalink to &quot;完全节点自定义&quot;">​</a></h3><p>完全在节点上自定义，用户可以设置标签的名称和标签的值。比如很多云原生基础设置编排工具，直接面向用户的就是这种。</p><h3 id="预设全局属性" tabindex="-1">预设全局属性 <a class="header-anchor" href="#预设全局属性" aria-label="Permalink to &quot;预设全局属性&quot;">​</a></h3><p>预设全局属性是指全局我定义一批属性，让每个节点填写（选填），这个和我们之前的方式类似。</p><h3 id="按节点类型-标签设置属性" tabindex="-1">按节点类型/标签设置属性 <a class="header-anchor" href="#按节点类型-标签设置属性" aria-label="Permalink to &quot;按节点类型/标签设置属性&quot;">​</a></h3><p>这个稍微复杂点，就是先把节点归类，可以对每个类型设置属性，然后应用在节点上。</p><p>思来想去，我选择了第三种方案，原因无他，这个方案对用户更友好一些。而类型正好对应到我们上一篇文章介绍的节点标签上。</p><h2 id="多标签和属性的冲突" tabindex="-1">多标签和属性的冲突 <a class="header-anchor" href="#多标签和属性的冲突" aria-label="Permalink to &quot;多标签和属性的冲突&quot;">​</a></h2><p>我们一个节点是可以设置多个标签的，这样的话如果每个标签都有一份属性集的话，同一个节点应用不同标签的时候属性是可能<strong>重复和冲突</strong>的。</p><p>重复就是指商品作为 A标签和 B 标签的属性可能重复，比如 <strong>演员和作家</strong> 两个标签，他们可能都有 <code>作品</code> 这个属性，这样对一个有双重身份量变就重复了。</p><p>冲突是指两个标签可能有相同的属性名，但是含义确不一样，两想维护的时候，同一个名称就会有不同含义。</p><p>比较好的方案可能是，分别维护同一个节点不同标签下的属性或者切换属性展示和维护，但是我把这个功能带入我的使用场景，有感觉太复杂了。对于<strong>个人</strong> 知识图谱来说，大部分懒人还是希望越简单越好。</p><p>所以我加上了「<strong>主标签</strong>」的概念，节点属性跟着主标签走，其他属性只做一个分类。这样有全局管理的便利性，又有不同类型节点定义的能力。</p><p>那么我们新增标签的时候就是这样：</p><p><img src="'+p+'" alt="节点标签"></p><h3 id="属性类型" tabindex="-1">属性类型 <a class="header-anchor" href="#属性类型" aria-label="Permalink to &quot;属性类型&quot;">​</a></h3><p>为了更好的编辑（至少不能比我之前的定制图谱差），我又为每个属性增加了属性类型，比如：</p><ul><li>复选框、</li><li>打分、</li><li>数字\\整数、</li><li>网址</li><li>单行输入、</li><li>多行输入。</li></ul><p><img src="'+g+'" alt="每个属性都可以选择自己的类型"></p><p>这样虽然没有自定义布局的能力，但至少支持了我之前的数据和编辑格式。</p><h3 id="关系维护" tabindex="-1">关系维护 <a class="header-anchor" href="#关系维护" aria-label="Permalink to &quot;关系维护&quot;">​</a></h3><p>关系维护的操作我们依然简单处理，用两个多选框来维护当前节点的<strong>来源节点</strong>和<strong>目标节点</strong>。</p><p><img src="'+c+'" alt="关系维护"></p><h3 id="新增节点预览" tabindex="-1">新增节点预览 <a class="header-anchor" href="#新增节点预览" aria-label="Permalink to &quot;新增节点预览&quot;">​</a></h3><p>看下最终的预览效果，我们刚刚提到的几个元素依然简单粗暴的放在了应该在的地方：</p><p><img src="'+h+'" alt="新增节点预览"></p><blockquote><p>关系维护之间是计划用<strong>二维可视化图谱</strong>来表示，做了 Demo 之后发现操作效率实在是低，截图时候没来得及去掉。</p></blockquote><h3 id="标签颜色" tabindex="-1">标签颜色 <a class="header-anchor" href="#标签颜色" aria-label="Permalink to &quot;标签颜色&quot;">​</a></h3><p>我们之前定制版的图谱对颜色做了不少支持，首先内置了两个单色色板，以及一个阶梯<strong>深度色板</strong>，来满足我没事就想换换颜色的需求：</p><p><img src="'+d+'" alt="阶梯色板"></p><p>同时在控制面板上还加了<strong>颜色深度</strong>和<strong>透明度</strong>的滑动条，以及一个随机颜色的开关：</p><p><img src="'+m+'" alt="节点显示控制面板"></p><p>我本来也想弄一个内置色板给大家用的，但是想到这个随机性太强，万一给自己的喜欢的股票整一个绿色也挺不吉利的。所以标签颜色也开放了自定义：</p><p><img src="'+b+'" alt="标签增加设置"></p><p>你可以<strong>随机</strong>切换一个颜色，或者手动选一个颜色：</p><p><img src="'+_+'" alt="颜色选择"></p><h3 id="列表预览" tabindex="-1">列表预览 <a class="header-anchor" href="#列表预览" aria-label="Permalink to &quot;列表预览&quot;">​</a></h3><p>列表我们也粗暴点儿，显示一下颜色，这样方便我们调整和理解：</p><p><img src="'+a+'" alt="列表上的颜色展示"></p><h2 id="预览" tabindex="-1">预览 <a class="header-anchor" href="#预览" aria-label="Permalink to &quot;预览&quot;">​</a></h2><p>最后，还是放一个视频操作：</p><p><img src="'+a+'" alt="视频"></p>',54)]))}const v=r(u,[["render",q]]);export{S as __pageData,v as default};
