import{_ as a,a as i,af as n,o as t}from"./chunks/framework.C87LdZyP.js";const p="/assets/272982247449666.CcssZp5k.png",l="/assets/273227324041916.Fzscc5iH.png",e="/assets/276648008363416.DnJco5UG.png",h="/assets/275969416302041.BFoqhneE.png",r="/assets/275732028718208.BaFA1Etw.png",d="/assets/275805121671458.CswEi5s5.png",o="/assets/276104784111875.Zat66HYJ.png",k="/assets/276162162214583.DOzgVpTT.png",E=JSON.parse('{"title":"训练 Vanna RAG-to-SQL 模型来适配企业级数据库","description":"","frontmatter":{"title":"训练 Vanna RAG-to-SQL 模型来适配企业级数据库","date":"2024-06-14 11:00:00","tags":["llm-tools","vanna.ai"],"category":["AI"]},"headers":[],"relativePath":"posts/2024/06/2024-06-14-vanna-ai-training.md","filePath":"posts/2024/06/2024-06-14-vanna-ai-training.md","lastUpdated":1721617651000}'),g={name:"posts/2024/06/2024-06-14-vanna-ai-training.md"};function c(A,s,u,y,m,D){return t(),i("div",null,s[0]||(s[0]=[n('<div class="admonition abstract"><p class="admonition-title">abstract</p><p>是不是还在困扰于大模型生成<strong>SQL不确定</strong>，<strong>相近语义的提问</strong>大模型理解很随机，<strong>复杂业务的理解</strong>不让人满意， 分明调整一个条件就能正确的SQL屡试不好... 上面所有的问题，很大程度上都可以用训练来解决。</p></div><h2 id="vannaai" tabindex="-1">VannaAI <a class="header-anchor" href="#vannaai" aria-label="Permalink to &quot;VannaAI&quot;">​</a></h2><p>先从下图回顾下 VannaAI 能力：</p><ul><li>适配任意数据库，生成和执行SQL语句，</li><li>可用任意向量库存储<strong>训练数据</strong>，</li><li>支持任意大模型执行推理，</li><li>多种前端适配，供用户使用。</li></ul><p><img src="'+p+'" alt=""></p><h2 id="训练" tabindex="-1">训练 <a class="header-anchor" href="#训练" aria-label="Permalink to &quot;训练&quot;">​</a></h2><p>上篇文章讲了怎么用 VannaAI 的能力和局限，有一部分最重要的内容没讲，就是<strong>训练</strong>。</p><p>VannaAI 支持自己训练模型来优化、强化，和适配自己业务的SQL生成能力，是区别与其他 Chat2SQL 框架的最重要特性。</p><p>我们先看个架构图，了解下 VannaAI 的这个训练问答过程，再进行深入。</p><p><img src="'+l+`" alt="Vanna.AI训练问答过程"></p><h2 id="训练数据" tabindex="-1">训练数据 <a class="header-anchor" href="#训练数据" aria-label="Permalink to &quot;训练数据&quot;">​</a></h2><p>训练数据的示例可以是 <strong>DDL 建表语句</strong>、<strong>SQL 查询</strong>或有关数据库、业务或行业的任何其他基于文本的<strong>文档</strong>。</p><p>这也基本上涵盖了我们SQL生成场景的方方面面。</p><h3 id="训练函数" tabindex="-1">训练函数 <a class="header-anchor" href="#训练函数" aria-label="Permalink to &quot;训练函数&quot;">​</a></h3><p>我们可以通过 <code>vn.train</code> 这个包装函数来进行训练。</p><p><strong>训练</strong>系统，也就是位于 LLM 之上的检索增强层（RAG），是针对大型数据库和复杂业务场景生成的保证。下面展示如何使用。</p><h3 id="ddl" tabindex="-1">DDL <a class="header-anchor" href="#ddl" aria-label="Permalink to &quot;DDL&quot;">​</a></h3><p>首先是 DDL 建表语句，这些语句让系统了解有哪些表、列和数据类型可用。</p><p>比如最简单的：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">vn.train(</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">ddl</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;CREATE TABLE my_table (id INT, name TEXT)&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span></code></pre></div><h3 id="文档" tabindex="-1">文档 <a class="header-anchor" href="#文档" aria-label="Permalink to &quot;文档&quot;">​</a></h3><p><strong>文档</strong>可以是关于您的数据库、业务或行业的<strong>任何重要文档</strong>，这些文档可能是 LLM 了解用户问题的背景所必需的，比如：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">vn.train(</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">documentation</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;Our business defines XYZ as ABC&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span></code></pre></div><h3 id="sql-语句" tabindex="-1">SQL 语句 <a class="header-anchor" href="#sql-语句" aria-label="Permalink to &quot;SQL 语句&quot;">​</a></h3><p>对系统最有帮助的事情之一当然是让系统了解组织中<strong>常用的 SQL 查询</strong>。这将帮助系统了解所提问题的背景。</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">vn.train(</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">sql</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;SELECT col1, col2, col3 FROM my_table&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span></code></pre></div><h3 id="问题-sql-对" tabindex="-1">问题-SQL 对 <a class="header-anchor" href="#问题-sql-对" aria-label="Permalink to &quot;问题-SQL 对&quot;">​</a></h3><p>我们还可以使用<strong>问题-SQL</strong> 对来训练系统。这是训练系统的最直接方法，并且最有助于系统理解所提问题的上下文。</p><p>这个类似于传统的大模型训练，是很有效的方法，能快速有效帮助Vanna组织出合适的提示语给大模型。</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">vn.train(</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">    question</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;What is the average age of our customers?&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">    sql</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;SELECT AVG(age) FROM customers&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span></code></pre></div><p><strong>问题-SQL</strong> 对包含大量嵌入信息，系统可以使用这些信息来理解问题的上下文。当用户倾向于提出具有很多<strong>歧义的问题</strong>时，尤其有效， 也就是说优秀的<strong>问题-SQL</strong>训练，能让系统处理复杂、有歧义的问答更加准确。。</p><h2 id="查看训练数据" tabindex="-1">查看训练数据 <a class="header-anchor" href="#查看训练数据" aria-label="Permalink to &quot;查看训练数据&quot;">​</a></h2><p>当然，Vanna.AI 也提供了探索训练数据的功能，使用<code>get_training_data</code>即可查看训练数据。</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">vn.get_training_data()</span></span></code></pre></div><h2 id="删除无用的训练数据" tabindex="-1">删除无用的训练数据 <a class="header-anchor" href="#删除无用的训练数据" aria-label="Permalink to &quot;删除无用的训练数据&quot;">​</a></h2><p>训练数据的质量对于模型的训练效果至关重要，因此需要确保数据都是有效、有用的。</p><p>当我们不小心训练了一些无效和重复数据时，可以使用删除功能删除掉无用的数据点。</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">vn.remove_training_data( </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">id</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &#39;my-training-data-id&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> )</span></span></code></pre></div><p>此外，不要在这些步骤中放入<strong>敏感或过时</strong>的信息，因为它可能会在某种程度上影响模型的表现。</p><h2 id="高级功能" tabindex="-1">高级功能 <a class="header-anchor" href="#高级功能" aria-label="Permalink to &quot;高级功能&quot;">​</a></h2><p>Vanna.AI 还支持 <strong>训练计划</strong>和<strong>自动训练</strong>。</p><h3 id="自动训练" tabindex="-1">自动训练 <a class="header-anchor" href="#自动训练" aria-label="Permalink to &quot;自动训练&quot;">​</a></h3><p>最简单的方案就是用笔记本运行程序，然后你的问题都可以作为训练数据进行训练，还可以对结果进行判断是否正确，或者手动修正。</p><p><img src="`+e+`" alt=""></p><p>除了用户问题之外，连接数据库之后，Vanna.AI 会自动查询所有表结构，进行训练；如果你使用<strong>大数据</strong>工具或服务， 自动训练这个流程会更具生产力。</p><h3 id="训练计划" tabindex="-1">训练计划 <a class="header-anchor" href="#训练计划" aria-label="Permalink to &quot;训练计划&quot;">​</a></h3><p>训练计划基本上就是将数据库信息架构分解成可供 LLM 参考的小块。 这是一种<strong>快速使用大量数据</strong>训练系统的好方法。</p><p>使用训练计划也非常简单：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">df_information_schema </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> vn.run_sql(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;SELECT * FROM INFORMATION_SCHEMA.COLUMNS&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">plan </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> vn.get_training_plan_generic(df_information_schema)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">vn.train(</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">plan</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">plan)</span></span></code></pre></div><h2 id="演示" tabindex="-1">演示 <a class="header-anchor" href="#演示" aria-label="Permalink to &quot;演示&quot;">​</a></h2><h3 id="ddl-训练" tabindex="-1">DDL 训练 <a class="header-anchor" href="#ddl-训练" aria-label="Permalink to &quot;DDL 训练&quot;">​</a></h3><p>我这里还用上次的数据库，执行：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">df_ddl </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> vn.run_sql(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;SELECT type, sql FROM sqlite_master WHERE sql is not null&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> ddl </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> df_ddl[</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;sql&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">].to_list():</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  vn.train(</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">ddl</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">ddl)</span></span></code></pre></div><div class="admonition note"><p class="admonition-title">note</p><p>上面代码执行一次就够了，不然会添加更多的训练数据。</p></div><p>上面代码会执行 DDL 训练，比如如下的建表语句：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span>Adding ddl: CREATE TABLE [Album]</span></span>
<span class="line"><span>(</span></span>
<span class="line"><span>    [AlbumId] INTEGER  NOT NULL,</span></span>
<span class="line"><span>    [Title] NVARCHAR(160)  NOT NULL,</span></span>
<span class="line"><span>    [ArtistId] INTEGER  NOT NULL,</span></span>
<span class="line"><span>    CONSTRAINT [PK_Album] PRIMARY KEY  ([AlbumId]),</span></span>
<span class="line"><span>    FOREIGN KEY ([ArtistId]) REFERENCES [Artist] ([ArtistId]) </span></span>
<span class="line"><span>		ON DELETE NO ACTION ON UPDATE NO ACTION</span></span>
<span class="line"><span>)</span></span>
<span class="line"><span>Adding ddl: CREATE TABLE [Artist]</span></span>
<span class="line"><span>(</span></span>
<span class="line"><span>    [ArtistId] INTEGER  NOT NULL,</span></span>
<span class="line"><span>    [Name] NVARCHAR(120),</span></span>
<span class="line"><span>    CONSTRAINT [PK_Artist] PRIMARY KEY  ([ArtistId])</span></span>
<span class="line"><span>)</span></span></code></pre></div><h3 id="查看训练数据-1" tabindex="-1">查看训练数据 <a class="header-anchor" href="#查看训练数据-1" aria-label="Permalink to &quot;查看训练数据&quot;">​</a></h3><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">training_data </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> vn.get_training_data()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">training_data</span></span></code></pre></div><p>可以看到训练数据的<strong>id</strong>，<strong>类型</strong>，<strong>内容</strong>：</p><p><img src="`+h+`" alt=""></p><h3 id="启动ui" tabindex="-1">启动UI <a class="header-anchor" href="#启动ui" aria-label="Permalink to &quot;启动UI&quot;">​</a></h3><p>我们来启动 Vanna 自带的 FlaskApp（注意替换自己的Key，也可以完全本地搭建哈）:</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> vanna</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> vanna.remote </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> VannaDefault</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">vn </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> VannaDefault(</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">model</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;chinook&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">api_key</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">vanna.get_api_key(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;my-email@example.com&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">vn.connect_to_sqlite(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;https://vanna.ai/Chinook.sqlite&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> vanna.flask </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> VannaFlaskApp</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">app </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> VannaFlaskApp(vn)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">app.run()</span></span></code></pre></div><p>可以看到如下界面：</p><p><img src="`+r+'" alt=""></p><p>可以直接提问，比如我问「有哪些艺术家受欢迎」，他给出了我专辑最多的艺术家：</p><p><img src="'+d+'" alt=""></p><p>我们也可以在界面上点击查看训练数据，</p><p><img src="'+o+'" alt=""></p><p>可以直接点击删除训练数据，或者手动添加训练数据：</p><p><img src="'+k+'" alt=""></p><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p>前面已经提到，支持 <strong>RAG</strong> 和<strong>训练</strong>是 Vanna.AI 在 SQL 生成领域的两个亮点， 有了这两个能力之后，可以帮助<strong>普通用户</strong>快速的构建以下能力：</p><ul><li>大型数据库的支持， <ul><li>受限于上下文大小等因素，传统的 SQL 生成很难满足大型数据库的需求；</li></ul></li><li>使用业务来训练SQL生成， <ul><li>传统的大模型训练，数据结构复杂、调优复杂、成本高，一般企业做起来比较困难，</li><li>基于SQL、文档、问答的训练可以让企业快速应用，而没有很高的门槛。</li></ul></li></ul><hr><p>END</p><p>!!! article 阅读更多</p><ul><li><a href="./2024-06-13-vanna-ai">VannaAI：RAG+AI 生成 SQL 使用和Prompt解析</a></li><li><a href="./../../../topics/learn-deepleaning/building-evaluating-advanced-rag/2024-06-09-x3-sentence-window-retrieval">《构建和评估高级RAG》003：语句窗口检索(SWR)</a></li><li><a href="./../../../topics/learn-deepleaning/building-evaluating-advanced-rag/2024-06-08-advanced-rag-pipeline">《构建和评估高级RAG》001：实现高级RAG管道</a></li><li><a href="./../../../topics/knowledge-graph/articles/2023-08-05-konwledge-graph-013-data-import">《构建个人知识图谱》013：多模态识别并进行知识图谱的导入</a></li><li><a href="./../../../topics/llm-everything/articles/2023-06-25-practise-009-openai-sql-chart">《万物皆可LLM》009：大语言模型下的数据问答 BI 实现</a> !!!</li></ul>',78)]))}const v=a(g,[["render",c]]);export{E as __pageData,v as default};
