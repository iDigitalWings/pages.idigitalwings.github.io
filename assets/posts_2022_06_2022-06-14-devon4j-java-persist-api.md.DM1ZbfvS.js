import{_ as i,a,af as n,o as t}from"./chunks/framework.C87LdZyP.js";const o=JSON.parse('{"title":"Devon4j: Java 持久化 API","description":"","frontmatter":{"title":"Devon4j: Java 持久化 API","date":"2022-06-14T00:00:00.000Z","tags":["devon4j"],"category":["架构"]},"headers":[],"relativePath":"posts/2022/06/2022-06-14-devon4j-java-persist-api.md","filePath":"posts/2022/06/2022-06-14-devon4j-java-persist-api.md","lastUpdated":1718173059000}'),e={name:"posts/2022/06/2022-06-14-devon4j-java-persist-api.md"};function h(l,s,p,k,r,d){return t(),a("div",null,s[0]||(s[0]=[n(`<p>为了将 java 对象映射到关系数据库，我们使用<a href="http://www.oracle.com/technetwork/java/javaee/tech/persistence-jsp-140049.html" target="_blank" rel="noreferrer">Java Persistence API (JPA)</a>。作为 JPA 实现，我们建议使用<a href="http://hibernate.org/orm/" target="_blank" rel="noreferrer">Hibernate</a>。有关 JPA 和 Hibernate 的一般文档，请点击上面的链接。在这里，您会找到我们建议如何正确使用它的指南和示例。以下示例显示如何将数据库的数据映射到实体。当我们使用 JPA 时，我们在这里从[SQL](<a href="https://devonfw.com/website/pages/docs/devonfw-guide_devon4j.wiki_guide-sql.asciidoc.html" target="_blank" rel="noreferrer">devonfw guide</a>)中抽象出来。但是，您仍然需要为您的模式提供<a href="https://en.wikipedia.org/wiki/Data_definition_language" target="_blank" rel="noreferrer">DDL</a>脚本，并且在维护期间还需要<a href="https://devonfw.com/website/pages/docs/devonfw-guide_devon4j.wiki_guide-database-migration.asciidoc.html" target="_blank" rel="noreferrer">数据库迁移</a>。请按照我们的<a href="https://devonfw.com/website/pages/docs/devonfw-guide_devon4j.wiki_guide-sql.asciidoc.html" target="_blank" rel="noreferrer">SQL 指南</a>了解此类工件。</p><h2 id="实体" tabindex="-1">实体 <a class="header-anchor" href="#实体" aria-label="Permalink to &quot;实体&quot;">​</a></h2><p>实体是持久层的一部分，包含实际数据。它们是 POJO（Plain Old Java Object），数据库的关系数据在其上映射，反之亦然。映射是通过 JPA 注解 (<code>javax.persistence</code>) 配置的。通常，一个实体类对应于数据库的一个表，而一个属性对应于该表的一列。然后，持久实体实例代表数据库表的一行。</p><h3 id="一个简单的实体" tabindex="-1">一个简单的实体 <a class="header-anchor" href="#一个简单的实体" aria-label="Permalink to &quot;一个简单的实体&quot;">​</a></h3><p>以下清单显示了一个简单的示例：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">Entity</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">Table</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;TEXTMESSAGE&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> MessageEntity</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6CB6FF;"> ApplicationPersistenceEntity</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> implements</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6CB6FF;"> Message</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  private</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> String</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> text;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  public</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> String </span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">getText</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.text;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> setText</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(String </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">text</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.text </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> text;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> }</span></span></code></pre></div><p>注解定义此类的<code>@Entity</code>实例将是可以存储在数据库中的实体。注解是可选的<code>@Table</code>，可以用来定义数据库中对应表的名称。如果未指定，则使用实体类的简单名称。</p><p>为了指定如何将属性映射到列，我们注解了相应的 getter 方法（技术上也可以使用私有字段注解，但方法不能混合使用）。<code>@Id</code>注解指定应将属性用作主键。在<code>@Column</code>注解的帮助下，可以定义属性映射到的列的名称以及其他方面，例如<code>nullable</code>或<code>unique</code>。如果未指定列名，则默认使用属性名称。</p><p>请注意，每个实体类都需要一个没有任何参数的具有 public 或 protected 可见性的构造函数。此外，类及其 getter 和 setter 都不是 final 的。</p><p>实体应该是简单的 POJO，不包含业务逻辑。</p><h3 id="实体和数据类型" tabindex="-1">实体和数据类型 <a class="header-anchor" href="#实体和数据类型" aria-label="Permalink to &quot;实体和数据类型&quot;">​</a></h3><p>JPA 自动映射标准数据类型，如<code>Integer</code>、<code>BigDecimal</code>、<code>String</code>等。默认情况下，自定义<a href="https://devonfw.com/website/pages/docs/asciidoc_devonfw-guide_devon4j.wiki_devon4j.asciidoc_guides.html#devonfw-guide_devon4j.wiki_guide-datatype.asciidoc" target="_blank" rel="noreferrer">数据类型</a>映射为序列化的 BLOB，但这通常不是我们希望的。为了映射原子自定义数据类型（<code>+SimpleDatatype</code> 的实现），我们实现了一个<code>AttributeConverter</code>. 这是一个简单的例子：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">Converter</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">autoApply</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> MoneyAttributeConverter</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> implements</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6CB6FF;"> AttributeConverter</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">Money</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">BigDecimal</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt; {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  public</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> BigDecimal </span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">convertToDatabaseColumn</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(Money </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">attribute</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> attribute.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">getValue</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  public</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> Money </span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">convertToEntityAttribute</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(BigDecimal </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">dbData</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> Money</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(dbData);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><p><code>@Converter</code>如果带注解的类在要扫描的包中，则 JPA 供应商会检测到该注解。此外，<code>autoApply = true</code>意味着转换器自动用于处理数据类型的所有属性。因此，所有具有该数据类型属性的实体都将自动正确映射（在我们的示例<code>Money</code>中映射为<code>BigDecimal</code>）。</p><p>如果您有需要映射到多个列的复合数据类型，JPA 不提供真正的解决方案。作为一种解决方法，您可以使用 bean 而不是真正的数据类型并将其声明为<code>@Embeddable</code>. 如果您使用的是 Hibernate，则可以实现<code>CompositeUserType</code>. 通过<code>@TypeDef</code>注解，它可以注册到 Hibernate。如果您想通过注解<code>CompositeUserType</code>来实现它自己，您还需要另一个注解（例如<code>MappedSuperclass</code>，在技术上不正确），以便通过扫描找到它。</p><h4 id="枚举-enum" tabindex="-1">枚举 Enum <a class="header-anchor" href="#枚举-enum" aria-label="Permalink to &quot;枚举 Enum&quot;">​</a></h4><p>默认情况下，JPA 通过它们的序号映射枚举。因此，数据库将只包含序数 (0, 1, 2, 等) 。因此，在数据库里面你不能轻易理解它们的含义。使用<code>@Enumerated</code> 和 <code>EnumType.STRING</code>允许将枚举值映射到它们的名称 ( <code>Enum.name()</code>)。在将应用程序部署到生产环境后，当涉及到代码更改和重构（如果您更改枚举值的顺序或重命名它们）时，这两种方法都很脆弱。如果您想避免这种情况并获得更好的映射，您可以在每个枚举值中为您保持不变的数据库表示来定义一个专用字符串。然后你像对待任何其他自定义数据类型一样对待枚举。</p><h4 id="blob" tabindex="-1">Blob <a class="header-anchor" href="#blob" aria-label="Permalink to &quot;Blob&quot;">​</a></h4><p>如果使用二进制或大字符对象 (BLOB/CLOB) 来存储属性的值，例如存储图标，则应使用注解<code>@Lob</code>，如下面的清单所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">Lob</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> byte</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">[] </span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">getIcon</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  return</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.icon;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>如果 BLOB 变大，使用字节数组将导致问题。因为整个 BLOB 都加载到服务器的 RAM 中并且必须由垃圾收集器处理。对于较大的 BLOB，应使用<a href="http://docs.oracle.com/javase/7/docs/api/java/sql/Blob.html" target="_blank" rel="noreferrer">Blob</a>类型和流式传输。</p></div><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">public</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> Blob </span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">getAttachment</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  return</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.attachment;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><h4 id="日期和时间" tabindex="-1">日期和时间 <a class="header-anchor" href="#日期和时间" aria-label="Permalink to &quot;日期和时间&quot;">​</a></h4><p>要存储与日期和时间相关的值，可以使用时间注解，如下面的清单所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">Temporal</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(TemporalType.TIMESTAMP)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">public</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> java.util.Date </span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">getStart</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> start;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><p>在 Java8 之前，必须使用 java 数据类型<code>java.util.Date</code>（或 Jodatime）。<code>TemporalType</code>定义粒度。在这种情况下，使用纳秒的精度。如果不需要这个粒度，<code>TemporalType.DATE</code>可以用它来代替，它只有毫秒的粒度。在将一个值与另一个值进行比较时，混合这两种粒度可能会导致问题。这就是为什么我们<strong>只</strong>使用<code>TemporalType.TIMESTAMP</code>.</p><h4 id="querydsl-和自定义类型" tabindex="-1">QueryDSL 和自定义类型 <a class="header-anchor" href="#querydsl-和自定义类型" aria-label="Permalink to &quot;QueryDSL 和自定义类型&quot;">​</a></h4><p>在实体属性中使用自定义数据类型时，使用QueryDSL 的别名 API 可能会导致 <code>InvalidDataAccessApiUsageException</code> 错误。这可以通过两个步骤来规避：</p><ol><li>确保您的项目（<code>core</code>模块）中具有以下 maven 依赖项，以通过 Aliases API 支持自定义类型：<div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">dependency</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">groupId</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;org.ow2.asm&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">groupId</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">artifactId</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;asm&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">artifactId</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">dependency</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">dependency</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">groupId</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;cglib&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">groupId</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">artifactId</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;cglib&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">artifactId</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">dependency</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;</span></span></code></pre></div></li><li>确保您在实体中使用的所有自定义类型都提供了一个至少具有可见性级别的无参构造函数<code>protected</code>。</li></ol><h3 id="主键-primay-keys" tabindex="-1">主键 Primay Keys <a class="header-anchor" href="#主键-primay-keys" aria-label="Permalink to &quot;主键 Primay Keys&quot;">​</a></h3><p>我们只使用简单的 Long 值作为主键 (ID)。默认情况下，它是自动生成的 ( <code>@GeneratedValue(strategy=GenerationType.AUTO)</code>)。这已经由经典项目结构中的类<code>com.devonfw.&lt;projectName&gt;.general.dataaccess.api.AbstractPersistenceEntity</code>和现代项目结构中的类<code>com.devonfw.projectname.general.domain.model.AbstractPersistenceEntity</code>提供，您可以对其进行扩展。</p><p>此建议的原因很简单，因为使用数字 (<code>Long</code>) 是数据库最有效的表示。您还可以考虑使用其他类型，例如<code>String</code>和<code>UUID</code>甚至复合自定义数据类型，这在技术上是可行的。但是，请考虑主键是用于从数据库表中查找行，也用在外键中，以及 JOIN 中。您的项目迟早可能会达到一定的复杂性，而导致性能变得真正重要。在使用诸如<code>String</code>(<code>VARCHAR[2]</code>) 作为主键和外键会破坏你的性能。您仍然可以自由地做出不同的选择，而 devonfw 只提供建议，但不想指示您做什么。但是，您已被警告过后果。如果您很清楚自己在做什么，您仍然可以使用不同类型的主键。在这种情况下，创建您自己的实体而不是扩展自<code>AbstractPersistenceEntity</code>，或者创建您自己的<code>AbstractPersistenceEntity</code>副本，使用不同的名称和不同类型的主键。</p><p>如果您有面向业务的键（通常为<code>String</code>），您可以为其定义一个附加属性并将其声明为唯一的（<code>@Column(unique=true)</code>）。确保在您的 sql 表字段 ID 中包含 <code>AUTO_INCREMENT</code>，以便能够持久化数据。</p><h2 id="关系-relationships" tabindex="-1">关系 Relationships <a class="header-anchor" href="#关系-relationships" aria-label="Permalink to &quot;关系 Relationships&quot;">​</a></h2><h3 id="n-1-和-1-1-关系" tabindex="-1">n:1 和 1:1 关系 <a class="header-anchor" href="#n-1-和-1-1-关系" aria-label="Permalink to &quot;n:1 和 1:1 关系&quot;">​</a></h3><p>实体通常不是独立存在的，而是相互关联的。例如，对于餐厅示例的其中一个 StaffMember 工作的每个时间段，由 class 表示，<code>WorkingTime</code>与此 <code>StaffMember</code> 存在关系。</p><p>以下清单显示了如何使用 JPA 对其进行建模：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">...</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">Entity</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> WorkingTimeEntity</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">   ...</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">   private</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> StaffMemberEntity</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> staffMember;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">   @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">ManyToOne</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">   @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">JoinColumn</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;STAFFMEMBER&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">   public</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> StaffMemberEntity </span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">getStaffMember</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">      return</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.staffMember;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">   }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">   public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> setStaffMember</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(StaffMemberEntity </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">staffMember</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">      this</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.staffMember </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> staffMember;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">   }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><p>为了表示关系，引入了被引用相应实体类类型的属性。该关系是一个<code>n:1</code> 关系，因为每个<code>WorkingTime</code> 恰好属于一个 <code>StaffMember</code>，但一个 <code>StaffMember</code>通常工作不止一次。 这就是<code>@ManyToOne</code>这里使用注解的原因。对于 1:1 关系，可以使用<code>@OneToOne</code>注解，其工作方式基本相同。为了能够在数据库中保存有关关系的信息，需要在对应的 WorkingTime 表中添加一个包含引用的 StaffMember 的主键的列。使用<code>@JoinColumn</code>注解的<code>name</code>元素，可以指定该列的名称。</p><h3 id="_1-n-和-n-m-关系" tabindex="-1">1:n 和 n:m 关系 <a class="header-anchor" href="#_1-n-和-n-m-关系" aria-label="Permalink to &quot;1:n 和 n:m 关系&quot;">​</a></h3><p>上面列出的示例的关系目前是单向的，因为<code>StaffMember</code> 有一个 getter 方法可以从<code>WorkingTime</code>对象中检索 ，但反之则不然。</p><p>要使其成为双向的，必须将以下代码添加到<code>StaffMember</code>：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  private</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> Set</span><span style="--shiki-light:#24292E;--shiki-dark:#F69D50;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">WorkingTimeEntity</span><span style="--shiki-light:#24292E;--shiki-dark:#F69D50;">&gt; </span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">workingTimes;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">OneToMany</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">mappedBy</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;staffMember&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  public</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> Set</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">WorkingTimeEntity</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> getWorkingTimes</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.workingTimes;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> setWorkingTimes</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(Set</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">WorkingTimeEntity</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> workingTimes) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.workingTimes </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> workingTimes;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  }</span></span></code></pre></div><p>为了使关系双向，不必更改数据库中的表。而是由<code>@OneToMany</code>注解的<code>mappedBy</code>元素指定与<code>WorkingTime</code>类的<code>staffMember</code>属性相对应的列。当一个 <code>StaffMember</code> 被加载时，Hibernate 会自动搜索相应的<code>WorkingTime</code>对象。</p><p>双向关系的问题在于，如果将一个<code>WorkingTime</code>对象添加到 <code>StaffMember</code> 的集合或列表<code>workingTimes</code>中，除非设置了<code>WorkingTime</code>对象的<code>staffMember</code>属性，否则这对数据库没有任何影响。这就是为什么 devon4j 建议不要使用双向关系而是使用查询来代替。此处显示了如何执行此操作。如果仍然应该使用双向关系，则必须使用适当的添加和删除方法。</p><p>对于 1:n 和 n:m 关系，devon4j 要求使用（无序的）集合而不使用其他集合类型，如上面的清单所示。唯一的例外是，当真正需要排序时，可以使用（排序的）列表。 例如，如果<code>WorkingTime</code>对象应该按它们的开始时间排序，可以这样做：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  private</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> List</span><span style="--shiki-light:#24292E;--shiki-dark:#F69D50;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">WorkingTimeEntity</span><span style="--shiki-light:#24292E;--shiki-dark:#F69D50;">&gt; </span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">workingTimes;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">OneToMany</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">mappedBy</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;staffMember&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">OrderBy</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;startTime asc&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  public</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> List</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">WorkingTimeEntity</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> getWorkingTimes</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.workingTimes;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> setWorkingTimes</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(List</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">WorkingTimeEntity</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> workingTimes) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.workingTimes </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> workingTimes;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  }</span></span></code></pre></div><p><code>@OrderBy</code>注解的值由类的属性名称后跟<code>asc</code>（升序）或<code>desc</code>（降序）组成。</p><p>要存储 <code>n:m</code> 关系的信息，必须使用单独的表，因为一个列不能存储多个值（至少如果数据库模式是第一范式）。 例如，如果想要扩展示例应用程序以便<code>FoodDrink</code>可以保存一个应用程序的所有成分并将成分本身建模为实体（例如，存储有关它们的附加信息），则可以将其建模如下（摘自<code>FoodDrink</code>类）：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  private</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> Set</span><span style="--shiki-light:#24292E;--shiki-dark:#F69D50;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">IngredientEntity</span><span style="--shiki-light:#24292E;--shiki-dark:#F69D50;">&gt; </span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">ingredients;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">ManyToMany</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">JoinTable</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  public</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> Set</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">IngredientEntity</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> getIngredients</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.ingredients;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> setOrders</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(Set</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">IngredientEntity</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> ingredients) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.ingredients </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> ingredients;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  }</span></span></code></pre></div><p>有关关系的信息存储在一个名为<code>BILL_ORDER</code>的表中，该表必须有两列，一列用于引用账单，另一列用于引用订单。请注意，在这种情况下不需要<code>@JoinTable</code>注解，因为单独的表是默认解决方案（对于 n:m 关系相同），除非指定了<code>mappedBy</code>元素。</p><p>对于 1:n 关系，此解决方案的缺点是需要更多连接（在数据库系统中）才能获得包含所有订单的账单。这可能会对性能产生负面影响，因此在大多数情况下，在 Order 表中存储 Bill row/entity 引用的方法可能是更好的解决方案。</p><p>请注意，基于 devon4j 的应用程序不允许双向 n:m 关系。相反，必须引入第三个实体，它“代表”关系（它有两个 n:1 关系）。</p><h3 id="eager-vs-lazy-loading" tabindex="-1">Eager vs Lazy Loading <a class="header-anchor" href="#eager-vs-lazy-loading" aria-label="Permalink to &quot;Eager vs Lazy Loading&quot;">​</a></h3><p>使用 JPA 可以使用延迟加载或立即加载。立即加载意味着对于从数据库中检索到的实体，这些实体引用的其他实体也被检索，而延迟加载意味着仅在实际需要它们时才这样做，即在调用相应的getter方法时。</p><p>强烈建议基于 devon4j 的应用程序 <strong>始终使用延迟加载</strong> 。JPA 默认值为：</p><ul><li><code>@OneToMany</code>： Lazy</li><li><code>@ManyToMany</code>： Lazy</li><li><code>@ManyToOne</code>： Eager</li><li><code>@OneToOne</code>： Eager</li></ul><p>因此，至少对于<code>@ManyToOne</code>并且<code>@OneToOne</code>您始终需要通过提供<code>fetch = FetchType.LAZY</code>.</p><h3 id="级联关系" tabindex="-1">级联关系 <a class="header-anchor" href="#级联关系" aria-label="Permalink to &quot;级联关系&quot;">​</a></h3><p>对于关系，也可以定义操作是否级联（如递归）到相关实体。默认情况下，什么都加载。这可以通过使用指定关系类型 ( <code>@OneToOne</code>, <code>@ManyToOne</code>, <code>@OneToMany</code>, <code>@ManyToOne</code>) 注解的<code>cascade</code>属性来更改。此属性接受一个提供以下选项<code>CascadeType</code>：</p><ul><li>PERSIST（用于<code>EntityManager.persist</code>，与插入到 DB 中的瞬态实体相关）</li><li>REMOVE（用于<code>EntityManager.remove</code>从数据库中删除实体）</li><li>Merge（用于<code>EntityManager.merge</code>）</li><li>REFRESH（用于<code>EntityManager.refresh</code>）</li><li>DETACH（用于<code>EntityManager.detach</code>）</li><li>ALL（级联所有上述操作）</li></ul><p>请参阅<a href="http://meri-stuff.blogspot.de/2012/03/jpa-tutorial.html" target="_blank" rel="noreferrer">此处</a>了解更多信息。</p><h3 id="idref-类型安全外键" tabindex="-1">IdRef 类型安全外键 <a class="header-anchor" href="#idref-类型安全外键" aria-label="Permalink to &quot;IdRef 类型安全外键&quot;">​</a></h3><p>对于简单的用法，您可以将<code>Long</code>其用于所有外键。但是，作为高级和类型安全使用的可选模式，我们提供了 IdRef。</p><h2 id="embeddable" tabindex="-1">Embeddable <a class="header-anchor" href="#embeddable" aria-label="Permalink to &quot;Embeddable&quot;">​</a></h2><p>可嵌入对象是一种将实体的属性分组为单独的 Java（子）对象的方法。与实现关系不同，嵌入不是一个单独的实体，它的属性与实体一起存储（嵌入）在同一个表中。这有助于构建和重用属性组。</p><p>以下示例显示了一个<code>Address</code>实现为可嵌入类：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">Embeddable</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> AddressEmbeddable</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  private</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> String</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> street;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  private</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> String</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> number;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  private</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> Integer</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> zipCode;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  private</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> String</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> city;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">Column</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;STREETNUMBER&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  public</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> String </span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">getNumber</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> number;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> setNumber</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(String </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">number</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.number </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> number;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  ...  </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// other getter and setter methods, equals, hashCode</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><p>如您所见，embeddable 类似于实体类，但带有<code>@Embeddable</code>注解而不是<code>@Entity</code>注解，并且没有主键或修改计数器。Embeddable 不是单独存在的，而是存在于实体的上下文中。作为简化，Embeddables 不需要单独的接口和 ETO ，因为 <a href="https://devonfw.com/website/pages/docs/devonfw-guide_devon4j.wiki_guide-beanmapping.asciidoc.html" target="_blank" rel="noreferrer">bean-mapper</a> 将在将实体转换为 ETO 时自动创建一个副本。但是，在这种情况下，嵌入将成为您<code>api</code>模块的一部分，因此需要依赖<code>JPA</code>.</p><p>除此之外，需要实现<code>equals(Object)</code>和<code>hashCode()</code>方法，因为这是 Hibernate 所要求的（实体不需要，因为它们可以通过它们的主键明确标识）。有关如何实现该<code>hashCode()</code>方法的一些提示，请查看<a href="http://stackoverflow.com/questions/113511/hash-code-implementation" target="_blank" rel="noreferrer">此处</a>。</p><p>在实体类中使用 <code>AddressEmbeddable</code> 可以这样完成：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  private</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> AddressEmbeddable</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> address;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">Embedded</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  public</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> AddressEmbeddable </span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">getAddress</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.address;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> setAddress</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(AddressEmbeddable address) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.address </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> address;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><p><code>@Embedded</code>注解需要用于嵌入的属性。请注意，如果在可嵌入（此处<code>Address</code>）的所有列中都是<code>null</code>，则可嵌入对象本身也在<code>null</code>实体内部。必须考虑避免 NullPointerException。此外，这会导致可嵌入类中的原始类型出现一些问题，这些问题可以通过仅使用对象类型来避免。</p><h2 id="继承" tabindex="-1">继承 <a class="header-anchor" href="#继承" aria-label="Permalink to &quot;继承&quot;">​</a></h2><p>就像普通的 java 类一样，实体类可以从其他类继承。唯一的区别是您需要指定如何将类层次结构映射到数据库表。实体的通用抽象超类可以简单地用<code>@MappedSuperclass</code>注解。</p><p>对于所有其他情况，JPA 提供带有属性的注解，<code>@Inheritance</code>该属性具有以下选项：<code>strategy\`\`InheritanceType</code></p><ul><li><code>SINGLE_TABLE</code>：此策略使用单个表，其中包含存储整个继承层次结构的所有实体类型所需的所有列。如果某个实体由于其类型而不需要某个列，则该列中有一个空值。引入了一个附加列，它表示实体的类型（称为<code>dtype</code>）。</li><li><code>TABLE_PER_CLASS</code>：对于每个具体的实体类，数据库中都有一个表可以存储此类实体及其所有属性。实体仅保存在与其最具体类型对应的表中。要获取超类型的所有实体，需要连接。</li><li><code>JOINED</code>：在这种情况下，包括抽象类在内的每个实体类都有一个表，其中仅包含该特定类的持久属性的列。此外，每个表中都有一个主键列。要获取作为另一个子类的类的实体，需要连接。</li></ul><p>这三种方法中的每一种都有其优点和缺点，这里将详细<a href="http://openjpa.apache.org/builds/1.0.4/apache-openjpa-1.0.4/docs/manual/jpa_overview_mapping_inher.html%23jpa_overview_mapping_inher_tpc" target="_blank" rel="noreferrer">讨论</a>。在大多数情况下，应该使用第一个，因为它通常是进行映射的最快方式，因为在检索、搜索或持久化实体时不需要连接。此外，它相当简单易懂。一个主要缺点是第一种方法可能会导致表包含大量空值，这可能会对数据库大小产生负面影响。</p><p>必须将继承策略注解到类层次结构的最顶层实体（<code>@MappedSuperclass</code>不考虑类），如下例所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">Entity</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">Inheritance</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">strategy</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">InheritanceType.SINGLE_TABLE)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> abstract</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> MyParentEntity</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6CB6FF;"> ApplicationPersistenceEntity</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> implements</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6CB6FF;"> MyParent</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">Entity</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> MyChildEntity</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6CB6FF;"> MyParentEntity</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> implements</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6CB6FF;"> MyChild</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">Entity</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> MyOtherEntity</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6CB6FF;"> MyParentEntity</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> implements</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6CB6FF;"> MyChild</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><p>作为最佳实践，我们建议您尽可能避免实体层次结构，否则尽可能保持层次结构小。为了确保重用或建立通用 API，您可以考虑使用共享接口、<code>@MappedSuperclass</code>或 <code>@Embeddable</code>来代替实体层次结构。</p><h2 id="存储库和-dao" tabindex="-1">存储库和 DAO <a class="header-anchor" href="#存储库和-dao" aria-label="Permalink to &quot;存储库和 DAO&quot;">​</a></h2><p>对于每个实体，都会创建一个代码单元，该代码单元将该实体的所有数据库操作分组。我们建议为此使用 spring-data 存储库，因为它对开发人员最有效。作为替代方案，仍然有使用 DAO 的经典方法。</p><h3 id="并发控制" tabindex="-1">并发控制 <a class="header-anchor" href="#并发控制" aria-label="Permalink to &quot;并发控制&quot;">​</a></h3><p>并发控制定义了对数据库相同数据的并发访问的处理方式。当多个用户（或应用程序服务器的线程）同时访问数据库时，可能会发生异常情况，例如，一个事务能够看到另一个事务的更改，尽管该事务已经看到了，但尚未提交这些更改。数据库系统会根据<a href="http://en.wikipedia.org/wiki/Isolation_(database_systems)" target="_blank" rel="noreferrer"><em>隔离级别</em></a>（<code>jpa.xm</code>中的<code>hibernate.connection.isolation</code>属性，参考<a href="http://docs.jboss.org/hibernate/orm/5.0/manual/en-US/html/ch03.html" target="_blank" rel="noreferrer">此处</a>。或者<code>application.properties</code>中的 <code>quarkus.datasource.jdbc.transaction-isolation-level</code> 属性 ）自动阻止这些异常中的大多数异常。</p><p>另一个异常情况是当两个利益相关者同时访问一条记录、进行一些更改并将它们写回数据库时。JPA 使用不同的锁定策略解决了这个问题（请参阅<a href="http://www.objectdb.com/java/jpa/persistence/lock" target="_blank" rel="noreferrer">此处</a>）。</p><p>作为最佳实践，我们对常规最终用户 <a href="https://devonfw.com/website/pages/docs/devonfw-guide_devon4j.wiki_devon4j.asciidoc_layers.html#devonfw-guide_devon4j.wiki_guide-service-layer.asciidoc" target="_blank" rel="noreferrer">服务</a> (OLTP) 使用乐观锁定，对<a href="https://devonfw.com/website/pages/docs/devonfw-guide_devon4j.wiki_devon4j.asciidoc_layers.html#devonfw-guide_devon4j.wiki_guide-batch-layer.asciidoc" target="_blank" rel="noreferrer">批处理</a>使用悲观锁定。</p><h3 id="乐观锁-optimistic-locking" tabindex="-1">乐观锁 Optimistic Locking <a class="header-anchor" href="#乐观锁-optimistic-locking" aria-label="Permalink to &quot;乐观锁 Optimistic Locking&quot;">​</a></h3><ul><li><code>com.devonfw.module.jpa.persistence.api.AbstractPersistenceEntity</code>类已经通过带<code>@Version</code>注解<code>modificationCounter</code>提供了乐观锁。因此，JPA 会为您处理乐观锁定。当实体被转移到客户端、修改并发回更新时，您需要确保它<code>modificationCounter</code>是数据的一部分。如果您遵循我们关于<a href="https://devonfw.com/website/pages/docs/asciidoc_devonfw-guide_devon4j.wiki_devon4j.asciidoc_guides.html#devonfw-guide_devon4j.wiki_guide-transferobject.asciidoc" target="_blank" rel="noreferrer">传输对象</a>和<a href="https://devonfw.com/website/pages/docs/devonfw-guide_devon4j.wiki_devon4j.asciidoc_layers.html#devonfw-guide_devon4j.wiki_guide-service-layer.asciidoc" target="_blank" rel="noreferrer">服务</a>的指南，这也可以开箱即用。你只需要关心两件事：</li><li>如何处理 关系 中的乐观锁定？ 假设一个实体<code>A</code>包含一组<code>B</code>实体。如果一个用户修改了一个实例，<code>A</code>而另一个用户并行修改了另一个实例中<code>B</code>包含的实例，是否会发生锁定冲突？要解决这个问题，请查看<a href="https://github.com/devonfw/devon4j/blob/develop/modules/jpa-basic/src/main/java/com/devonfw/module/jpa/dataaccess/api/feature/FeatureForceIncrementModificationCounter.java" target="_blank" rel="noreferrer">FeatureForceIncrementModificationCounter</a>。</li><li>如果发生了，UI 中应该发生什么<code>OptimisticLockException</code>？ 根据 KISS，我们的建议是用户收到一条错误消息，告诉他重新对最近的数据进行更改。尝试设计您的系统和工作处理，以使此类冲突很少发生。</li></ul><h3 id="悲观锁-pessimistic-locking" tabindex="-1">悲观锁 Pessimistic Locking <a class="header-anchor" href="#悲观锁-pessimistic-locking" aria-label="Permalink to &quot;悲观锁 Pessimistic Locking&quot;">​</a></h3><p>对于后端服务，尤其是批处理，乐观锁定是不合适的。人类用户不应因为正在编辑同一实体而导致大型批处理过程失败。因此，此类用例使用悲观锁定，这使它们比人类用户具有某种优先级。在您的 DAO 实现中，您可以提供通过带有 <a href="http://docs.oracle.com/javaee/7/api/javax/persistence/LockModeType.html" target="_blank" rel="noreferrer"><code>LockModeType</code></a> 的 <a href="http://docs.oracle.com/javaee/7/api/javax/persistence/EntityManager.html" target="_blank" rel="noreferrer"><code>EntityManager</code></a> 操作来做悲观锁。 这是一个简单的例子：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">  getEntityManager</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">lock</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(entity, LockModeType.READ);</span></span></code></pre></div><p>当通过 <code>LockModeType.READ</code> 使用<code>lock(Object, LockModeType)</code>方法时，Hibernate 会发出一个<code>SELECT … FOR UPDATE</code>. 这意味着没有其他人可以更新实体（有关该声明的更多信息，请参见<a href="http://docs.oracle.com/cd/B28359_01/server.111/b28286/statements_10002.htm" target="_blank" rel="noreferrer">此处</a>）。如果指定了<code>LockModeType.WRITE</code>，Hibernate 会发出a <code>SELECT … FOR UPDATE NOWAIT</code>，它的含义与上面的语句相同，但是如果已经有锁，则程序不会等待该锁被释放。相反，会引发异常。 如果您想稍后修改实体，请使用其中一种类型，对于只读访问不需要锁定。</p><p>正如您可能已经注意到的那样，Hibernate 的行为与人们通过查看所期望的有所不同，<code>LockModeType</code>（尤其<code>LockModeType.READ</code>不应该导致发出<code>SELECT … FOR UPDATE</code> ）。由于未知原因，该框架实际上偏离了 JPA 中<a href="http://docs.oracle.com/javaee/7/api/javax/persistence/LockModeType.html" target="_blank" rel="noreferrer">指定的内容</a>。</p><h2 id="数据库审计" tabindex="-1">数据库审计 <a class="header-anchor" href="#数据库审计" aria-label="Permalink to &quot;数据库审计&quot;">​</a></h2><p>请参阅<a href="https://devonfw.com/website/pages/docs/asciidoc_devonfw-guide_devon4j.wiki_devon4j.asciidoc_guides.html#devonfw-guide_devon4j.wiki_guide-auditing.asciidoc" target="_blank" rel="noreferrer">审核指南</a>。</p><h2 id="测试数据访问" tabindex="-1">测试数据访问 <a class="header-anchor" href="#测试数据访问" aria-label="Permalink to &quot;测试数据访问&quot;">​</a></h2><p>有关实体和存储库或 DAO 的测试，请参阅<a href="https://devonfw.com/website/pages/docs/asciidoc_devonfw-guide_devon4j.wiki_devon4j.asciidoc_guides.html#devonfw-guide_devon4j.wiki_guide-testing.asciidoc_level-2-component-test" target="_blank" rel="noreferrer">测试指南</a>。</p><h2 id="原则" tabindex="-1">原则 <a class="header-anchor" href="#原则" aria-label="Permalink to &quot;原则&quot;">​</a></h2><p>我们强烈推荐以下原则：</p><ul><li>尽可能使用 JPA，仅在 JPA 不提供解决方案的情况下使用供应商（Hibernate）特定功能。在后一种情况下，首先考虑您是否真的需要该功能。</li><li>将您的实体创建为简单的 POJO，并使用 JPA 注解 getter 以定义映射。</li><li>保持实体简单，避免将高级逻辑放入实体方法中。</li></ul><h2 id="数据库配置" tabindex="-1">数据库配置 <a class="header-anchor" href="#数据库配置" aria-label="Permalink to &quot;数据库配置&quot;">​</a></h2><p>有关各个框架的数据库连接和数据库日志配置的详细信息，请参阅相应的配置指南。</p><ul><li>Spring 见<a href="https://devonfw.com/website/pages/docs/asciidoc_devonfw-guide_devon4j.wiki_devon4j.asciidoc_guides.html#devonfw-guide_devon4j.wiki_spring_guide-spring-configuration.asciidoc_database-configuration" target="_blank" rel="noreferrer">这里</a>。</li></ul><p>Quarkus 请参见<a href="https://devonfw.com/website/pages/docs/asciidoc_devonfw-guide_devon4j.wiki_devon4j.asciidoc_guides.html#devonfw-guide_devon4j.wiki_spring_guide-spring-configuration.asciidoc_database-configuration" target="_blank" rel="noreferrer">此处</a>。</p><h3 id="数据库迁移" tabindex="-1">数据库迁移 <a class="header-anchor" href="#数据库迁移" aria-label="Permalink to &quot;数据库迁移&quot;">​</a></h3><p>请参阅<a href="https://devonfw.com/website/pages/docs/devonfw-guide_devon4j.wiki_guide-database-migration.asciidoc.html" target="_blank" rel="noreferrer">数据库迁移</a>。</p><h3 id="pooling" tabindex="-1">Pooling <a class="header-anchor" href="#pooling" aria-label="Permalink to &quot;Pooling&quot;">​</a></h3><p>您通常希望通过回收以前的连接来汇集 JDBC 连接以提高性能。有许多库可用于连接池。我们推荐使用<a href="https://github.com/brettwooldridge/HikariCP" target="_blank" rel="noreferrer">HikariCP</a>。</p><h2 id="安全" tabindex="-1">安全 <a class="header-anchor" href="#安全" aria-label="Permalink to &quot;安全&quot;">​</a></h2><h3 id="sql-注入" tabindex="-1">SQL 注入 <a class="header-anchor" href="#sql-注入" aria-label="Permalink to &quot;SQL 注入&quot;">​</a></h3><p>一个常见的安全威胁是<a href="http://en.wikipedia.org/wiki/SQL_injection" target="_blank" rel="noreferrer">SQL 注入</a>。切勿使用字符串连接构建查询，否则您的代码可能容易受到攻击，如下例所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  String</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> query</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;Select op from OrderPosition op where op.comment = &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> userInput;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  return</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> getEntityManager</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">createQuery</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(query).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">getResultList</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span></code></pre></div><p>通过该参数<code>userInput</code>，攻击者可以注入 SQL (JPQL) 并在数据库中执行任意语句，从而造成极大的破坏。</p><p>为了防止此类注入，您必须严格遵守我们的查询规则：</p><ul><li>对<strong>静态查询</strong>使用命名查询。</li><li>使用 QueryDSL 进行<strong>动态查询</strong>。</li><li>另请参阅<a href="https://www.owasp.org/index.php/SQL_Injection_Prevention_Cheat_Sheet" target="_blank" rel="noreferrer">SQL 注入预防备忘单</a>。</li></ul><h3 id="申请权限有限" tabindex="-1">申请权限有限 <a class="header-anchor" href="#申请权限有限" aria-label="Permalink to &quot;申请权限有限&quot;">​</a></h3><p>我们建议您使用具有有限权限的数据库用户来操作您的应用程序，这样他就不能修改 SQL 模式（例如删除表）。对于初始化模式 (DDL) 或进行模式迁移，请使用应用程序本身不使用的单独用户。</p><h2 id="查询" tabindex="-1">查询 <a class="header-anchor" href="#查询" aria-label="Permalink to &quot;查询&quot;">​</a></h2><p><a href="http://www.oracle.com/technetwork/java/javaee/tech/persistence-jsp-140049.html" target="_blank" rel="noreferrer">Java Persistence API (JPA)</a>定义了自己的查询语言，即java<a href="https://docs.oracle.com/html/E13946_01/ejb3_langref.html" target="_blank" rel="noreferrer"><em>持久性查询语言</em> (JPQL)</a>（另请参阅<a href="https://docs.oracle.com/javaee/7/tutorial/persistence-querylanguage.htm" target="_blank" rel="noreferrer">JPQL 教程</a>），它类似于 SQL，但对实体及其属性而不是表和列进行操作。</p><p>最简单的 CRUD 查询（例如，通过 ID 查找实体）已经构建在 devonfw CRUD 功能中（通过 Repository 或 DAO ）。对于其他情况，您需要编写自己的查询。我们区分<em>静态</em>查询和<em>动态</em>查询。<strong>静态查询</strong>有一个固定的 JPQL 查询字符串，它可能只在运行时使用参数来自定义查询。相反，<strong>动态查询</strong>可以根据给定的搜索条件在运行时更改其子句（<code>WHERE</code>、<code>ORDER BY</code>、<code>JOIN</code>等）。</p><h3 id="静态查询" tabindex="-1">静态查询 <a class="header-anchor" href="#静态查询" aria-label="Permalink to &quot;静态查询&quot;">​</a></h3><p>例如，要查找价格不超过给定<code>maxPrice</code>的所有<a href="https://github.com/devonfw/my-thai-star/blob/develop/java/mtsj/core/src/main/java/com/devonfw/application/mtsj/dishmanagement/dataaccess/api/DishEntity.java" target="_blank" rel="noreferrer">DishEntries</a> （来自 MTS 示例应用程序），我们编写以下 JPQL 查询：</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">SELECT</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> dish </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> DishEntity dish </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">WHERE</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> dish</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">price</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> &lt;=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> :maxPrice</span></span></code></pre></div><p>这里<code>dish</code>用作我们选择的<code>DishEntity</code>别名（变量名）。<code>dish.price</code>我们指的是<code>DishEntity</code> 中的Java属性( <code>price</code>/<code>getPrice()</code>/<code>setPrice(…)</code>) 。从外部提供的命名变量（运行时的搜索条件）以冒号 ( <code>:</code>) 作为前缀指定。这里<code>:maxPrice</code>我们引用了一个需要通过设置的变量<code>query.setParameter(&quot;maxPrice&quot;, maxPriceValue)</code>。JPQL 也支持索引参数 (<code>?</code>)，但不鼓励使用它们，因为它们很容易引起混淆和错误。</p><h4 id="使用查询避免双向关系" tabindex="-1">使用查询避免双向关系 <a class="header-anchor" href="#使用查询避免双向关系" aria-label="Permalink to &quot;使用查询避免双向关系&quot;">​</a></h4><p>使用查询可以避免暴露关系或建模双向关系，这有一些缺点（请参阅[关系]）。这对于不同业务组件的实体之间的关系尤其需要。因此，例如在不使用来自<a href="https://github.com/devonfw/my-thai-star/blob/develop/java/mtsj/core/src/main/java/com/devonfw/application/mtsj/ordermanagement/dataaccess/api/OrderEntity.java" target="_blank" rel="noreferrer"><code>OrderEntity</code></a>的<code>orderLines</code>关系的情况下获取指定OrderEntity的所有 <a href="https://github.com/devonfw/my-thai-star/blob/develop/java/mtsj/core/src/main/java/com/devonfw/application/mtsj/ordermanagement/dataaccess/api/OrderLineEntity.java" target="_blank" rel="noreferrer">OrderLineEntities</a> 时可以使用：</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">SELECT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> line</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> OrderLineEntity </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">line</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> WHERE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> line</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">order</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">id</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> :orderId</span></span></code></pre></div><h3 id="动态查询" tabindex="-1">动态查询 <a class="header-anchor" href="#动态查询" aria-label="Permalink to &quot;动态查询&quot;">​</a></h3><p>对于动态查询，我们使用Querydsl的<a href="http://querydsl.com/static/querydsl/latest/reference/html/ch02.html" target="_blank" rel="noreferrer">JPA</a>模块。<a href="http://www.querydsl.com/" target="_blank" rel="noreferrer">Querydsl</a> 还支持其他模块，例如 MongoDB 和 Apache Lucene。它允许以强大但可读且类型安全的方式实现查询（与 Criteria API 不同）。如果您已经了解 JPQL，您将很快能够阅读和编写 Querydsl 代码。感觉就像 JPQL，但用 Java 实现，而不是纯文本。</p><p>要在 Maven 项目中使用 Querydsl，请添加以下依赖项：</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">dependencies</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">dependency</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">groupId</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;com.querydsl&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">groupId</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">artifactId</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;querydsl-apt&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">artifactId</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">version</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;\${querydsl.version}&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">version</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">scope</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;provided&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">scope</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">dependency</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">dependency</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">groupId</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;com.querydsl&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">groupId</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">artifactId</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;querydsl-jpa&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">artifactId</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">version</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;\${querydsl.version}&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">version</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">dependency</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">dependencies</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;</span></span></code></pre></div><p>接下来，配置注解处理工具（APT）插件：</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">project</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">build</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">plugins</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">      ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">      &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">plugin</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">groupId</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;com.mysema.maven&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">groupId</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">artifactId</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;apt-maven-plugin&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">artifactId</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">version</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;1.1.3&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">version</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">executions</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">          &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">execution</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">            &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">goals</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">              &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">goal</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;process&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">goal</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">            &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">goals</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">            &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">configuration</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">              &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">outputDirectory</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;target/generated-sources/java&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">outputDirectory</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">              &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">processor</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;com.querydsl.apt.jpa.JPAAnnotationProcessor&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">processor</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">            &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">configuration</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">          &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">execution</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">executions</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">      &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">plugin</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">      ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">plugins</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">build</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">project</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;</span></span></code></pre></div><p>这是我们的示例应用程序中的一个示例：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  public</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> List</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">DishEntity</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> findDishes</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(DishSearchCriteriaTo criteria) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    QDishEntity</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> dish</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> QDishEntity.dishEntity;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    JPAQuery</span><span style="--shiki-light:#24292E;--shiki-dark:#F69D50;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">DishEntity</span><span style="--shiki-light:#24292E;--shiki-dark:#F69D50;">&gt; </span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">query</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> JPAQuery&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">OrderEntity</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">getEntityManager</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">());</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    query.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(dish);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    Range</span><span style="--shiki-light:#24292E;--shiki-dark:#F69D50;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">BigDecimal</span><span style="--shiki-light:#24292E;--shiki-dark:#F69D50;">&gt; </span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">priceRange</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> criteria.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">getPriceRange</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (priceRange </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">      BigDecimal</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> min</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> priceRange.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">getMin</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">      if</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (min </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        query.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">where</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(dish.price.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">goe</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(min));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">      }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">      BigDecimal</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> max</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> priceRange.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">getMax</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">      if</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (max </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        query.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">where</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(dish.price.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">loe</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(max));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">      }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    String</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> criteria.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">getName</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> ((name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">name.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">isEmpty</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">())) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">      query.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">where</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(dish.name.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">eq</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(name));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    query.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">orderBy</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(dish.price.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">asc</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(), dish.name.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">asc</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">());</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> query.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">fetch</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  }</span></span></code></pre></div><p>在这个例子中，我们使用所谓的 Q-types ( <code>QDishEntity</code>)。这些是 Querydsl 注解处理器在构建时从实体类生成的类。Q 类型类可以用作代表原始实体类的静态类型。</p><p><code>query.from(dish)</code>方法调用定义查询源，在本例中为表<code>dish</code>。该<code>where</code>方法定义了一个过滤器。例如，第一次调用使用<code>goe</code>运算符过滤掉任何不大于或等于最低价格的菜肴。更多运算符可以在<a href="https://querydsl.com/static/querydsl/latest/apidocs/com/querydsl/core/types/dsl/ComparableExpression.html" target="_blank" rel="noreferrer">这里</a>找到。</p><p>该<code>orderBy</code>方法用于根据一定的标准对查询结果进行排序。在这里，我们首先按价格对结果进行排序，然后按名称对结果进行排序，两者均按升序排列。要按降序排序，请使用<code>.desc()</code>. 要将查询结果划分为多组行，请参见<a href="https://querydsl.com/static/querydsl/latest/reference/html_single/%23d0e377" target="_blank" rel="noreferrer">groupBy</a>方法。</p><h3 id="native-原生查询" tabindex="-1">Native 原生查询 <a class="header-anchor" href="#native-原生查询" aria-label="Permalink to &quot;Native 原生查询&quot;">​</a></h3><p>Spring Data 支持使用 <em>原生查询</em> 。本机查询使用在 JPQL 中未解析的简单本机 SQL 语法。这允许您使用数据库支持的所有功能。这样做的缺点是由于缺少抽象层而丢失了数据库的可移植性。因此，查询可能不适用于另一个数据库，因为它可能使用不同的语法。</p><p>您可以设置<code>@Query</code>的注解的<code>nativeQuery</code>属性为 true 来实现原生查询：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">Query</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;...&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">nativeQuery</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>这不适用于 Quarkus，因为 Quarkus 不支持使用<code>@Query</code>注解的本地查询。<a href="https://devonfw.com/website/pages/docs/devonfw-guide_devon4j.wiki_guide-jpa.asciidoc.html#devonfw-guide_devon4j.wiki_guide-repository.asciidoc_limitations-in-quarkus" target="_blank" rel="noreferrer">参考</a></p></div><p>您还可以使用<code>EntityManager</code>API 的 <code>createNativeQuery</code> 方法直接实现原生查询。 <strong>这种方法也适用于 Quarkus</strong> 。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Query</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> query</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> entityManager.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">createNativeQuery</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;SELECT * FROM Product&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, ProductEntity.class);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">List</span><span style="--shiki-light:#24292E;--shiki-dark:#F69D50;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">ProductEntity</span><span style="--shiki-light:#24292E;--shiki-dark:#F69D50;">&gt; </span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">products</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> query.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">getResultList</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>使用原生查询时务必使用表名，而使用 JPQL 实现查询时必须使用实体名。</p></div><h3 id="使用通配符" tabindex="-1">使用通配符 <a class="header-anchor" href="#使用通配符" aria-label="Permalink to &quot;使用通配符&quot;">​</a></h3><p>对于灵活查询，通常需要允许通配符（尤其是在动态查询中）。虽然用户直观地期望 glob 语法，但 SQL 和 JPQL 标准的工作方式不同。因此，需要映射。devonfw 使用 LikePatternSyntax 在较低级别提供此功能，并使用<a href="https://github.com/devonfw/devon4j/blob/develop/modules/basic/src/main/java/com/devonfw/module/basic/common/api/query/LikePatternSyntax.java" target="_blank" rel="noreferrer">QueryUtil</a>在更高级别提供此功能（请参阅<a href="https://github.com/devonfw/devon4j/blob/develop/modules/jpa-basic/src/main/java/com/devonfw/module/jpa/dataaccess/api/QueryUtil.java%23L54" target="_blank" rel="noreferrer">QueryHelper.newStringClause </a><a href="https://github.com/devonfw/devon4j/blob/develop/modules/jpa-basic/src/main/java/com/devonfw/module/jpa/dataaccess/api/QueryHelper.java%23L199" target="_blank" rel="noreferrer">(...)</a>）。</p><h3 id="分页" tabindex="-1">分页 <a class="header-anchor" href="#分页" aria-label="Permalink to &quot;分页&quot;">​</a></h3><p>在处理大量数据时，需要一种有效的数据检索方法。每次获取整个数据集都太耗时了。相反，<em>分页</em>仅用于处理整个数据集的一小部分。</p><p>如果您使用 Spring Data 存储库，您将通过使用<a href="https://docs.spring.io/spring-data/commons/docs/current/api/org/springframework/data/domain/Pageable.html" target="_blank" rel="noreferrer">Page</a>和<a href="https://docs.spring.io/spring-data/commons/docs/current/api/org/springframework/data/domain/Pageable.html" target="_blank" rel="noreferrer">Pageable</a>接口获得开箱即用的分页支持：</p><p>清单 6. <strong>存储库</strong></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Page</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">DishEntity</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> findAll</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(Pageable pageable);</span></span></code></pre></div><p>然后您可以创建一个 Pageable 对象并将其传递给方法调用，如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> page</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> criteria.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">getPageNumber</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> size</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> criteria.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">getPageSize</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Pageable</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> pageable</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> PageRequest.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">of</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(page, size);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Page</span><span style="--shiki-light:#24292E;--shiki-dark:#F69D50;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">DishEntity</span><span style="--shiki-light:#24292E;--shiki-dark:#F69D50;">&gt; </span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">dishes</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> dishRepository.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">findAll</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(pageable);</span></span></code></pre></div><h4 id="使用-querydsl-进行分页" tabindex="-1">使用 Querydsl 进行分页 <a class="header-anchor" href="#使用-querydsl-进行分页" aria-label="Permalink to &quot;使用 Querydsl 进行分页&quot;">​</a></h4><p>使用 Querydsl 的动态查询也支持分页：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  public</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> Page</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">DishEntity</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> findDishes</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(DishSearchCriteriaTo criteria) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    QDishEntity</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> dish</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> QDishEntity.dishEntity;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    JPAQuery</span><span style="--shiki-light:#24292E;--shiki-dark:#F69D50;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">DishEntity</span><span style="--shiki-light:#24292E;--shiki-dark:#F69D50;">&gt; </span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">query</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> JPAQuery&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">OrderEntity</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">getEntityManager</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">());</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    query.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(dish);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    // conditions</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    int</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> page</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> criteria.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">getPageNumber</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    int</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> size</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> criteria.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">getPageSize</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    Pageable</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> pageable</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> PageRequest.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">of</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(page, size);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    query.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">offset</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(pageable.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">getOffset</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">());</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    query.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">limit</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(pageable.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">getPageSize</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">());</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    List</span><span style="--shiki-light:#24292E;--shiki-dark:#F69D50;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">DishEntity</span><span style="--shiki-light:#24292E;--shiki-dark:#F69D50;">&gt; </span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">dishes</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> query.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">fetch</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> PageImpl&lt;&gt;(dishes, pageable, dishes.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">size</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">());</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  }</span></span></code></pre></div><h4 id="分页示例" tabindex="-1">分页示例 <a class="header-anchor" href="#分页示例" aria-label="Permalink to &quot;分页示例&quot;">​</a></h4><p>对于表实体，我们可以通过访问具有分页支持的 REST 端点来发出搜索请求，如下例所示：</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">POST mythaistar/services/rest/tablemanagement/v</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">/table/search</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#8DDB8C;">  &quot;pagination&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#8DDB8C;">    &quot;size&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#8DDB8C;">    &quot;total&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//Response</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#8DDB8C;">    &quot;pagination&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#8DDB8C;">        &quot;size&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#8DDB8C;">        &quot;page&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#8DDB8C;">        &quot;total&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">11</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    },</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#8DDB8C;">    &quot;result&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#8DDB8C;">            &quot;id&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">101</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#8DDB8C;">            &quot;modificationCounter&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#8DDB8C;">            &quot;revision&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#8DDB8C;">            &quot;waiterId&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#8DDB8C;">            &quot;number&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#8DDB8C;">            &quot;state&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;OCCUPIED&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#8DDB8C;">            &quot;id&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">102</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#8DDB8C;">            &quot;modificationCounter&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#8DDB8C;">            &quot;revision&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#8DDB8C;">            &quot;waiterId&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#8DDB8C;">            &quot;number&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#8DDB8C;">            &quot;state&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;FREE&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>当我们使用<code>total</code>设置为服务器的属性请求时<code>true</code>，服务器会以查询的总行数进行响应。</p></div><p>为了检索具体页面，我们为<code>page</code>属性提供了所需的值。在这里，我们还省略了该<code>total</code>属性，因此服务器不会花费精力来计算它：</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">POST mythaistar/services/rest/tablemanagement/v</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">/table/search</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#8DDB8C;">  &quot;pagination&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#8DDB8C;">    &quot;size&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#8DDB8C;">    &quot;page&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">2</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//Response</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#8DDB8C;">    &quot;pagination&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#8DDB8C;">        &quot;size&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#8DDB8C;">        &quot;page&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#8DDB8C;">        &quot;total&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">null</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    },</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#8DDB8C;">    &quot;result&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#8DDB8C;">            &quot;id&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">103</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#8DDB8C;">            &quot;modificationCounter&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#8DDB8C;">            &quot;revision&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#8DDB8C;">            &quot;waiterId&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#8DDB8C;">            &quot;number&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#8DDB8C;">            &quot;state&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;FREE&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#8DDB8C;">            &quot;id&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">104</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#8DDB8C;">            &quot;modificationCounter&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#8DDB8C;">            &quot;revision&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#8DDB8C;">            &quot;waiterId&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#8DDB8C;">            &quot;number&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#8DDB8C;">            &quot;state&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;FREE&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><h3 id="查询元参数" tabindex="-1">查询元参数 <a class="header-anchor" href="#查询元参数" aria-label="Permalink to &quot;查询元参数&quot;">​</a></h3><p>查询可以有元参数，并通过<code>SearchCriteriaTo</code>. 除了分页（见上文），我们还获得了<a href="https://github.com/devonfw/devon4j/blob/develop/modules/jpa-basic/src/main/java/com/devonfw/module/jpa/dataaccess/api/QueryHelper.java%23L51" target="_blank" rel="noreferrer">超时支持</a>。</p><h3 id="高级查询" tabindex="-1">高级查询 <a class="header-anchor" href="#高级查询" aria-label="Permalink to &quot;高级查询&quot;">​</a></h3><p>编写查询有时会变得相当复杂。上面给出的当前示例仅显示了非常简单的基础知识。在本主题中，需要考虑许多高级功能，例如：</p><ul><li><a href="https://www.w3schools.com/sql/sql_join.asp" target="_blank" rel="noreferrer">Joins</a></li><li><a href="https://docs.oracle.com/html/E13946_04/ejb3_langref.html%23ejb3_langref_constructor" target="_blank" rel="noreferrer">构造函数查询</a></li><li><a href="https://www.w3schools.com/sql/sql_orderby.asp" target="_blank" rel="noreferrer">排序</a>方式（排序）</li><li><a href="https://www.w3schools.com/sql/sql_groupby.asp" target="_blank" rel="noreferrer">分组</a></li><li><a href="https://www.w3schools.com/sql/sql_having.asp" target="_blank" rel="noreferrer">Having</a></li><li><a href="https://www.w3schools.com/sql/sql_union.asp" target="_blank" rel="noreferrer">Unions</a></li><li><a href="https://docs.oracle.com/cd/E11035_01/kodo41/full/html/ejb3_langref.html%23ejb3_langref_subqueries" target="_blank" rel="noreferrer">子查询</a></li><li>聚合函数，例如<a href="https://www.w3schools.com/sql/sql_count_avg_sum.asp" target="_blank" rel="noreferrer">count/avg/sum</a></li><li><a href="https://www.w3schools.com/sql/sql_distinct.asp" target="_blank" rel="noreferrer">不同的选择</a></li><li>SQL 提示（参见例如<a href="https://docs.oracle.com/cd/B19306_01/server.102/b14211/hintsref.htm%23i8327" target="_blank" rel="noreferrer">Oracle 提示</a>或<a href="http://sqlhints.com/" target="_blank" rel="noreferrer">SQL-Server 提示</a>） - 仅在需要进行最终性能调整时</li></ul><p>此列表仅包含最重要的方面。由于我们无法在此处涵盖所有这些主题，因此它们已链接到可以帮助和指导您的外部文档。</p><h2 id="春季数据" tabindex="-1">春季数据 <a class="header-anchor" href="#春季数据" aria-label="Permalink to &quot;春季数据&quot;">​</a></h2><p>Spring和 Quarkus 都支持 <a href="https://projects.spring.io/spring-data-jpa/" target="_blank" rel="noreferrer">Spring Data JPA</a>。但是，在 Quarkus 中，这种方法仍然存在一些局限性。有关详细信息，请参阅官方<a href="https://quarkus.io/guides/spring-data-jpa" target="_blank" rel="noreferrer">Quarkus Spring 数据指南</a>。</p><h3 id="动机" tabindex="-1">动机 <a class="header-anchor" href="#动机" aria-label="Permalink to &quot;动机&quot;">​</a></h3><p>Spring Data 的好处是（有关示例和说明，请参见下一节）：</p><ul><li>您只需要为每个实体提供一个单一的存储库接口。不需要单独的实现或其他代码工件，如 XML 描述符、<code>NamedQueries</code>类等。</li><li>您将所有信息放在一个地方（存储库接口），它们实际上属于一起（在经典方法中，您有XML 文件中的静态查询<code>NamedQueries</code>、类中的常量以及 DAO 实现类中的引用用法）。</li><li>静态查询最容易实现，因为您不需要编写任何方法体。这意味着您可以更快地发展。</li><li>对分页的支持已经内置。同样对于静态查询方法，除了使用签名中的分页对象外，您无需执行任何操作。</li><li>您仍然可以自由地通过存储库接口中的默认方法编写自定义实现（例如，用于动态查询）。</li></ul><h3 id="依赖" tabindex="-1">依赖 <a class="header-anchor" href="#依赖" aria-label="Permalink to &quot;依赖&quot;">​</a></h3><p>如果您想切换到 Spring 或 Quarkus 应用程序或添加 Spring Data 支持，您只需添加相应的 maven 依赖项：</p><p>清单 7. <strong>spring</strong></p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">dependency</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">groupId</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;org.springframework.boot&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">groupId</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">artifactId</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;spring-boot-starter-data-jpa&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">artifactId</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">dependency</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;</span></span></code></pre></div><p>清单 8. <strong>quarkus</strong></p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">dependency</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">groupId</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;io.quarkus&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">groupId</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">artifactId</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;quarkus-spring-data-jpa&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">artifactId</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">dependency</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;</span></span></code></pre></div><h3 id="仓库" tabindex="-1">仓库 <a class="header-anchor" href="#仓库" aria-label="Permalink to &quot;仓库&quot;">​</a></h3><p>对于每个实体<code>«Entity»Entity</code>，都会创建一个扩展<a href="https://docs.spring.io/spring-data/jpa/docs/current/api/org/springframework/data/jpa/repository/JpaRepository.html" target="_blank" rel="noreferrer">JpaRepository</a>的名为<code>«Entity»Repository</code>接口。这样的存储库类似于经典方法中使用的数据访问对象（DAO）。</p><p>清单 9. <strong>Repository</strong></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> ProductRepository</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6CB6FF;"> JpaRepository</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">ProductEntity</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">Long</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt; {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><p>Spring Data 存储库提供了一些访问数据的基本实现，例如返回一个类型的所有实例 ( <code>findAll</code>) 或通过其 ID ( <code>findById</code>) 返回一个实例。</p><h3 id="自定义方法实现" tabindex="-1">自定义方法实现 <a class="header-anchor" href="#自定义方法实现" aria-label="Permalink to &quot;自定义方法实现&quot;">​</a></h3><p>此外，可以通过使用所谓的存储库片段来丰富存储库，例如添加 QueryDSL 功能或覆盖默认实现：</p><h4 id="例子" tabindex="-1">例子 <a class="header-anchor" href="#例子" aria-label="Permalink to &quot;例子&quot;">​</a></h4><p>以下示例显示了如何编写这样的存储库：</p><p>清单 10. <strong>Repository</strong></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> ProductRepository</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6CB6FF;"> JpaRepository</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">ProductEntity</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">Long</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#6CB6FF;">ProductFragment</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">Query</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;SELECT product FROM ProductEntity product&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> //</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">      +</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot; WHERE product.title = :title&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  List&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">ProductEntity</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">findByTitle</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">Param</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;title&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) String </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">title</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">Query</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;SELECT product FROM ProductEntity product&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> //</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">      +</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot; WHERE product.title = :title&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  Page&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">ProductEntity</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">findByTitlePaginated</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">Param</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;title&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) String </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">title</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, Pageable </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">pageable</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><p>清单 11. <strong>Repository fragment</strong></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> ProductFragment</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  Page&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">ProductEntity</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">findByCriteria</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(ProductSearchCriteriaTo </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">criteria</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><p>清单 12. <strong>Fragment implementation</strong></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> ProductFragmentImpl</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> implements</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6CB6FF;"> ProductFragment</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">Inject</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  EntityManager</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> entityManager;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  public</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> Page&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">ProductEntity</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">findByCriteria</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(ProductSearchCriteriaTo </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">criteria</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    QProductEntity</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> product</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> QProductEntity.productEntity;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    JPAQuery</span><span style="--shiki-light:#24292E;--shiki-dark:#F69D50;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">ProductEntity</span><span style="--shiki-light:#24292E;--shiki-dark:#F69D50;">&gt; </span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">query</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> JPAQuery&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">ProductEntity</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.entityManager);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    query.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(product);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    String</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> title</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> criteria.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">getTitle</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> ((title </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&amp;&amp;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> !</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">title.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">isEmpty</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">()) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">      query.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">where</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(product.title.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">eq</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(title));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    List</span><span style="--shiki-light:#24292E;--shiki-dark:#F69D50;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">ProductEntity</span><span style="--shiki-light:#24292E;--shiki-dark:#F69D50;">&gt; </span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">products</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> query.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">fetch</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> PageImpl&lt;&gt;(products, PageRequest.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">of</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(criteria.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">getPageNumber</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(), criteria.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">getPageSize</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">()), products.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">size</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">());</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><p><code>ProductRepository</code>具有以下特点：</p><ul><li>Spring Data 的 CRUD 支持（有关详细信息，请参阅<a href="https://docs.spring.io/spring-data/data-jpa/docs/current/api/org/springframework/data/jpa/repository/JpaRepository.html" target="_blank" rel="noreferrer">JavaDoc</a>）。</li><li>支持<a href="https://github.com/devonfw/devon4j/blob/develop/modules/jpa-spring-data/src/main/java/com/devonfw/module/jpa/dataaccess/api/data/QueryDslSupport.java" target="_blank" rel="noreferrer">QueryDSL 集成</a>、<a href="https://github.com/devonfw/devon4j/blob/develop/modules/jpa-basic/src/main/java/com/devonfw/module/jpa/dataaccess/api/QueryUtil.java" target="_blank" rel="noreferrer">分页等</a>。</li><li>一种静态查询方法，用于从数据库中查找具有给定标题的<code>findByTitle</code>所有实例。<code>ProductEntity</code>请注意将<code>@Param</code>方法参数与查询中的变量（<code>:title</code>）链接起来的注解。</li><li>通过 findByTitlePaginated 方法支持分页也是如此。</li><li>一种动态查询方法<code>findByCriteria</code>，通过片段实现显示 QueryDSL 和分页集成到 Spring。</li></ul><p><code>ProductRepository</code>您可以在我们的<a href="https://github.com/devonfw-sample/devon4quarkus-reference/tree/master/src/main/java/com/devonfw/quarkus/productmanagement/domain/repo" target="_blank" rel="noreferrer">Quarkus 参考应用程序</a>中找到它的实现。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>Quarkus 中，<code>@Query</code>目前不支持通过注解进行的原生查询和命名查询</p></div><h4 id="在-devon4j-spring-中集成-spring-data" tabindex="-1">在 devon4j-spring 中集成 Spring Data <a class="header-anchor" href="#在-devon4j-spring-中集成-spring-data" aria-label="Permalink to &quot;在 devon4j-spring 中集成 Spring Data&quot;">​</a></h4><p>对于 Spring 应用程序，devon4j 提供了与 QueryDSL 无缝集成的专有解决方案，并使用默认方法而不是片段方法。</p><h4 id="没有片段方法的自定义方法" tabindex="-1">没有片段方法的自定义方法 <a class="header-anchor" href="#没有片段方法的自定义方法" aria-label="Permalink to &quot;没有片段方法的自定义方法&quot;">​</a></h4><p>片段方法有点费力，因为实现自定义方法总是需要三种类型（存储库接口、片段接口和片段实现）。我们不能简单地在存储库中使用默认方法，因为我们不能将其<code>EntityManager</code>直接注入到存储库接口中。</p><p>作为一种解决方法，您可以创建一个<code>GenericRepository</code>接口，就像在<a href="https://github.com/devonfw/devon4j/tree/master/modules/jpa-spring-data/src/main/java/com/devonfw/module/jpa/dataaccess/impl/data" target="_blank" rel="noreferrer">devon4j jpa-spring-data 模块</a>中所做的那样。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> GenericRepository</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">E</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt; {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  EntityManager </span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">getEntityManager</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> GenericRepositoryImpl</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">E</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">implements</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6CB6FF;"> GenericRepository</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">E</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt; {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">Inject</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  EntityManager</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> entityManager;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">Override</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  public</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> EntityManager </span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">getEntityManager</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.entityManager;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><p>然后，您的所有存储库接口都可以扩展<code>GenericRepository</code>，您可以使用默认方法直接在存储库接口中实现查询：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> ProductRepository</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6CB6FF;"> JpaRepository</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">ProductEntity</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">Long</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#6CB6FF;">GenericRepository</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">ProductEntity</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt; {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  default</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> Page&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">ProductEntity</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">findByTitle</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(Title </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">title</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    EntityManager</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> entityManager</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> getEntityManager</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    Query</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> query</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> entityManager.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">createNativeQuery</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;select * from Product where title = :title&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, ProductEntity.class);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    query.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">setParameter</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;title&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, title);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    List</span><span style="--shiki-light:#24292E;--shiki-dark:#F69D50;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">ProductEntity</span><span style="--shiki-light:#24292E;--shiki-dark:#F69D50;">&gt; </span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">products</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> query.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">getResultList</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> PageImpl&lt;&gt;(products);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><h3 id="缺点" tabindex="-1">缺点 <a class="header-anchor" href="#缺点" aria-label="Permalink to &quot;缺点&quot;">​</a></h3><p>Spring Data 也有一些缺点：</p><ul><li>某种不那么容易理解的幕后魔法。因此，如果您想扩展所有存储库而不通过父存储库接口中的默认方法提供实现，则需要深入研究 Spring Data。我们假设您不需要它，并希望 Spring Data 和 devon 已经提供的开箱即用已经足够了。</li><li>Spring Data 的魔力还包括从方法名称中猜测查询。这不容易理解，尤其是调试。我们的建议是根本不使用此功能，而是<code>@Query</code>通过默认方法提供注解或实现。</li></ul><h3 id="quarkus-的局限性" tabindex="-1">Quarkus 的局限性 <a class="header-anchor" href="#quarkus-的局限性" aria-label="Permalink to &quot;Quarkus 的局限性&quot;">​</a></h3><ul><li><code>@Query</code>使用注解不支持本机和命名查询。您将收到类似的信息：<em>构建步骤 io.quarkus.spring.data.deployment.SpringDataJPAProcessor#build 引发异常：java.lang.IllegalArgumentException：当前不支持 @Query 的属性 nativeQuery</em></li><li>为代码库中的所有存储库接口自定义基础存储库，这是在 Spring Data 中通过注册扩展类来完成的<code>SimpleJpaRepository</code></li></ul><h2 id="数据访问对象" tabindex="-1">数据访问对象 <a class="header-anchor" href="#数据访问对象" aria-label="Permalink to &quot;数据访问对象&quot;">​</a></h2><p><em>数据访问对象</em> (DAO) 是持久层的一部分。他们负责一个特定的实体，应该命名为<code>«Entity»Dao</code>and <code>«Entity»DaoImpl</code>。DAO 为相应的实体提供所谓的 CRUD 功能（创建、检索、更新、删除）。此外，DAO 可以提供高级操作，例如查询或锁定方法。</p><h3 id="dao-接口" tabindex="-1">DAO 接口 <a class="header-anchor" href="#dao-接口" aria-label="Permalink to &quot;DAO 接口&quot;">​</a></h3><p>对于每个 DAO，都有一个名为<code>«Entity»Dao</code>定义 API 的接口。<code>ApplicationDao</code>对于 CRUD 支持和通用命名，我们从devon 应用程序模板附带的接口中派生它：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> MyEntityDao</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6CB6FF;"> ApplicationDao</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">MyEntity</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt; {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  List&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">MyEntity</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">findByCriteria</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(MyEntitySearchCriteria </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">criteria</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><p>所有 CRUD 操作都继承自，<code>ApplicationDao</code>因此您只需声明其他方法。</p><h3 id="dao-实施" tabindex="-1">DAO 实施 <a class="header-anchor" href="#dao-实施" aria-label="Permalink to &quot;DAO 实施&quot;">​</a></h3><p>实现 DAO 非常简单。我们创建一个名为的类<code>«Entity»DaoImpl</code>，它扩展<code>ApplicationDaoImpl</code>并实现了您的<code>«Entity»Dao</code>接口：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> MyEntityDaoImpl</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6CB6FF;"> ApplicationDaoImpl</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">MyEntity</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">implements</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6CB6FF;"> MyEntityDao</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  public</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> List&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">MyEntity</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">findByCriteria</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(MyEntitySearchCriteria </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">criteria</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    TypedQuery</span><span style="--shiki-light:#24292E;--shiki-dark:#F69D50;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">MyEntity</span><span style="--shiki-light:#24292E;--shiki-dark:#F69D50;">&gt; </span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">query</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> createQuery</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(criteria, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">getEntityManager</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">());</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> query.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">getResultList</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><p><code>«Entity»Dao</code>同样，您只需要实现您在接口中声明的其他非 CRUD 方法。在 DAO 实现中，您可以使用该方法从 JPA<code>getEntityManager()</code>访问。<code>EntityManager</code>您将需要<code>EntityManager</code>创建和执行查询。</p><h4 id="dao-实现的静态查询" tabindex="-1">DAO 实现的静态查询 <a class="header-anchor" href="#dao-实现的静态查询" aria-label="Permalink to &quot;DAO 实现的静态查询&quot;">​</a></h4><p>所有静态查询都在文件中声明<code>src\\main\\resources\\META-INF\\orm.xml</code>：</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&lt;?</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">xml</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6CB6FF;"> version</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;1.0&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6CB6FF;"> encoding</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;UTF-8&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">?&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">entity-mappings</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6CB6FF;"> version</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;1.0&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6CB6FF;"> xmlns</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;http://java.sun.com/xml/ns/persistence/orm&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6CB6FF;"> xmlns:xsi</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#6CB6FF;">  xsi:schemaLocation</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;http://java.sun.com/xml/ns/persistence/orm http://java.sun.com/xml/ns/persistence/orm_1_0.xsd&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">named-query</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6CB6FF;"> name</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;find.dish.with.max.price&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">query</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;&lt;![SELECT dish FROM DishEntity dish WHERE dish.price &lt;= :maxPrice]]&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">query</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">named-query</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">hibernate-mapping</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;</span></span></code></pre></div><p>当您的应用程序启动时，所有这些静态查询都将创建为准备好的语句。这可以提高性能，并确保您在启动应用程序时而不是稍后使用查询时收到无效 JPQL 查询的错误。</p><p>为了避免查询名称 (<code>get.open.order.positions.for.order</code>) 的重复出现，我们为每个命名查询定义一个常量：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> NamedQueries</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> final</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> String</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> FIND_DISH_WITH_MAX_PRICE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;find.dish.with.max.price&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><p>请注意，通过重构可以轻松更改 java 常量 (<code>FIND_DISH_WITH_MAX_PRICE</code>) 的名称。此外，您可以通过搜索常量的引用来跟踪查询的使用位置。</p><p>以下清单显示了如何使用此查询：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">public</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> List</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">DishEntity</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> findDishByMaxPrice</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(BigDecimal maxPrice) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  Query</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> query</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> getEntityManager</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">createNamedQuery</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(NamedQueries.FIND_DISH_WITH_MAX_PRICE);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  query.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">setParameter</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;maxPrice&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, maxPrice);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> query.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">getResultList</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><p>通过我们为预定义的静态查询<code>EntityManager.createNamedQuery(String)</code>创建一个实例。<code>Query</code>接下来我们使用<code>setParameter(String, Object)</code>为查询提供一个参数 ( <code>maxPrice</code>)。必须对查询的所有参数执行此操作。</p><p>请注意，不允许使用将整个查询作为字符串（可能已经包含参数）的<code>createQuery(String)</code>方法来避免 SQL 注入漏洞。调用该方法时，将执行<code>getResultList()</code>查询并将结果作为<code>List</code>. 作为替代方案，有一个名为 的方法<code>getSingleResult()</code>，如果查询返回的正是一个实体，则该方法返回实体，否则抛出异常。</p><h2 id="jpa-性能" tabindex="-1">JPA 性能 <a class="header-anchor" href="#jpa-性能" aria-label="Permalink to &quot;JPA 性能&quot;">​</a></h2><p>使用 JPA 时，开发人员有时看不到或不了解触发数据库语句的位置和时间。</p><blockquote><p>建立期望 开发人员不应该期望在 POJO 上撒些神奇的小精灵，希望它们会变得持久。</p></blockquote><p>— <a href="https://epdf.tips/seam-in-action.html" target="_blank" rel="noreferrer">丹·艾伦</a></p><p>因此，如果您不了解 JPA 底层发生了什么，您很容易因延迟加载和其他影响而遇到性能问题。</p><h3 id="n加1问题" tabindex="-1">N加1问题 <a class="header-anchor" href="#n加1问题" aria-label="Permalink to &quot;N加1问题&quot;">​</a></h3><p>最突出的现象是调用<code>N+1 问题</code>. 我们使用<a href="https://github.com/devonfw/my-thai-star" target="_blank" rel="noreferrer">MTS</a>演示应用程序中的实体作为示例来解释问题。有一个 <a href="https://github.com/devonfw/my-thai-star/blob/develop/java/mtsj/core/src/main/java/com/devonfw/application/mtsj/dishmanagement/dataaccess/api/DishEntity.java" target="_blank" rel="noreferrer">DishEntity</a> 与 <a href="https://github.com/devonfw/my-thai-star/blob/develop/java/mtsj/core/src/main/java/com/devonfw/application/mtsj/dishmanagement/dataaccess/api/IngredientEntity.java" target="_blank" rel="noreferrer">IngredientEntity</a>有<code>@ManyToMany</code>关系。现在我们假设我们要迭代这样一道菜的所有成分：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">DishEntity</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> dish</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> dao.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">findDishById</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(dishId);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">BigDecimal</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> priceWithAllExtras</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> dish.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">getPrice</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (IngredientEntity</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> ingredient</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> :</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> dish.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">getExtras</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">()) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  priceWithAllExtras </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> priceWithAllExtras.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(ingredient.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">getPrice</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">());</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><p>现在<code>dish.getExtras()</code>是懒加载。因此，JPA 供应商将提供一个包含延迟初始化实例的列表，<code>IngredientEntity</code>其中仅包含该实体的 ID。现在，每次调用<code>ingredient.getPrice()</code>我们都会在技术上触发一条 SQL 查询语句，以<code>IngredientEntity</code>通过其 ID 从数据库中加载特定的。现在<code>findDishById</code>导致了 1 个初始查询语句，并且对于任何数量<code>N</code>的成分，我们都导致了一个额外的查询语句。这使得总的<code>N+1</code>陈述。由于导致对数据库的语句是一项昂贵的操作，并且有很多开销（创建连接等），这会导致性能下降，因此是一个问题（N+1 问题）。</p><h3 id="解决-n-加-1-问题" tabindex="-1">解决 N 加 1 问题 <a class="header-anchor" href="#解决-n-加-1-问题" aria-label="Permalink to &quot;解决 N 加 1 问题&quot;">​</a></h3><p>要解决 N+1 问题，您需要将代码更改为仅触发一条语句。这可以以各种方式存档。最通用的解决方案是使用为了将嵌套的子实体<code>FETCH JOIN</code>预加载到 JPA 供应商实现的第一级缓存中。<code>N</code>这将表现得非常相似，就好像<code>@ManyToMany</code>关系<code>IngredientEntity</code>具有<code>FetchType.EAGER</code>但仅针对特定查询而不是一般查询。因为更改<code>@ManyToMany</code>为<code>FetchType.EAGER</code>会导致其他只需要菜肴而不需要额外成分的用例的性能不佳。出于这个原因，所有关系，包括<code>@OneToOne</code>应该始终是<code>FetchType.LAZY</code>。回到我们的示例，我们只需将其替换<code>dao.findDishById(dishId)</code>为<code>dao.findDishWithExtrasById(dishId)</code>我们通过以下 JPQL 查询实现的示例：</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">SELECT</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> dish </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> DishEntity dish</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  LEFT JOIN</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> FETCH</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> dish</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">extras</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  WHERE</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> dish</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">id</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> :dishId</span></span></code></pre></div><p>其余代码不必更改，但现在<code>dish.getExtras()</code>将从<code>IngredientEntity</code>上面初始查询获取的第一级缓存中获取。</p><p>请注意，如果您只需要额外费用的总和，您还可以使用聚合函数创建查询：</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">SELECT</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> sum</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">dish</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">extras</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.price) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> DishEntity dish</span></span></code></pre></div><p>如您所见，您需要了解这些概念才能获得良好的性能。</p><p>有许多高级主题，例如为查询优化器创建数据库索引或计算统计信息以获得最佳性能。对于此类高级主题，我们建议您的团队中有一位关心此类事情的数据库专家。但是，了解<em>N+1 问题</em>及其解决方案是团队中每个 Java 开发人员都需要了解的内容。</p><h2 id="idref" tabindex="-1">IdRef <a class="header-anchor" href="#idref" aria-label="Permalink to &quot;IdRef&quot;">​</a></h2><p>IdRef 可用于引用 TO 中的其他实体，以使它们类型安全且在语义上更具表现力。对于需要大量使用关系和外键的更复杂的应用程序，它是 devon4j 中的一个可选概念。</p><h3 id="动机-1" tabindex="-1">动机 <a class="header-anchor" href="#动机-1" aria-label="Permalink to &quot;动机&quot;">​</a></h3><p>假设您有如下方法签名：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Long </span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">approve</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(Long cId, Long cuId);</span></span></code></pre></div><p>那么参数有哪些呢？返回什么？</p><p><code>IdRef</code>只是用作外键的 Long 的包装器。这使我们的签名更具表现力和不言自明：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">IdRef</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Contract</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> approve</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(IdRef</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Contract</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> cId, IdRef</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Customer</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> cuId);</span></span></code></pre></div><p>现在我们可以很容易地看到，结果和参数是外键以及它们通过它们的泛型类型引用的实体。我们可以从泛型类型中读取这些实体的 javadoc 并了解上下文。最后，在将<code>IdRef</code>对象传递给此类方法时，如果我们不小心将参数按错误的顺序放置，则会出现编译错误。</p><h3 id="idref-和-mapping" tabindex="-1">IdRef 和 Mapping <a class="header-anchor" href="#idref-和-mapping" aria-label="Permalink to &quot;IdRef 和 Mapping&quot;">​</a></h3><p>为了轻松地将关系从实体映射到<a href="https://devonfw.com/website/pages/docs/asciidoc_devonfw-guide_devon4j.wiki_devon4j.asciidoc_guides.html#devonfw-guide_devon4j.wiki_guide-transferobject.asciidoc" target="_blank" rel="noreferrer">传输对象</a>并返回，我们还可以轻松地将相应的 getter 和 setter 放入我们的实体中：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> ContractEntity</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6CB6FF;"> ApplicationPersistenceEntity</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> implements</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6CB6FF;"> Contract</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  private</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> CustomerEntity</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> customer;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  ...</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">ManyToOne</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">fetch</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> FetchType.LAZY)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">JoinColumn</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;CUSTOMER_ID&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  public</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> CustomerEntity </span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">getCustomer</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.customer;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> setCustomer</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(CustomerEntity </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">customer</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.customer </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> customer;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">Transient</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  public</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> IdRef&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">Customer</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">getCustomerId</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> IdRef.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">of</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.customer);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> setCustomerId</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(IdRef&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">Customer</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt; </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">customerId</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.customer </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> JpaHelper.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">asEntity</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(customerId, CustomerEntity.class);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><p>现在，确保您的以下内容具有相同的 getter 和<code>customerId</code>setter <code>Eto</code>：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> ContractEto</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6CB6FF;"> AbstractEto</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> implements</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6CB6FF;"> Contract</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  private</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> IdRef</span><span style="--shiki-light:#24292E;--shiki-dark:#F69D50;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">Customer</span><span style="--shiki-light:#24292E;--shiki-dark:#F69D50;">&gt; </span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">customerId;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  ...</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  public</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> IdRef&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">Customer</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">getCustomerId</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.customerId;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> setCustomerId</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(IdRef&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">Customer</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt; </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">customerId</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.customerId </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> customerId;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><p>这样，bean-mapper 可以自动从您的实体 ( <code>ContractEntity</code>) 映射到您的 Eto ( <code>ContractEto</code>)，反之亦然。</p><h3 id="jpahelper-和-entitymanager-访问" tabindex="-1">JpaHelper 和 EntityManager 访问 <a class="header-anchor" href="#jpahelper-和-entitymanager-访问" aria-label="Permalink to &quot;JpaHelper 和 EntityManager 访问&quot;">​</a></h3><p>在上面的示例中，我们使用<code>JpaHelper.asEntity</code>将外键 ( <code>IdRef&lt;Customer&gt;</code>) 转换为相应的实体 ( <code>CustomerEntity</code>)。这将在内部用于<code>EntityManager.getReference</code>正确创建 JPA 实体。可用于<code>Long</code>代替的替代“解决方案”<code>IdRef</code>通常是：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> setCustomerId</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(IdRef</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Customer</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> customerId) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    Long</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> id</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (customerId </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">      id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> customerId.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">getId</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">      this</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.customer </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">      this</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.customer </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> CustomerEntity</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">      this</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.customer.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">setId</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(id);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  }</span></span></code></pre></div><p>虽然这种“解决方案”在大多数情况下都有效，但我们发现了一些更复杂的情况，在这些情况下它会因非常奇怪的休眠异常而失败。当通过干净地创建实体时，<code>EntityManager.getReference</code>它在所有情况下都有效。那么如何<code>JpaHelper.asEntity</code>作为静态方法访问<code>EntityManager</code>呢？因此我们需要初始化它，否则你可能会看到这个异常：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span>java.lang.IllegalStateException: EntityManager has not yet been initialized!</span></span>
<span class="line"><span>	at com.devonfw.module.jpa.dataaccess.api.JpaEntityManagerAccess.getEntityManager(JpaEntityManagerAccess.java:38)</span></span>
<span class="line"><span>	at com.devonfw.module.jpa.dataaccess.api.JpaHelper.asEntity(JpaHelper.java:49)</span></span></code></pre></div><p>对于您的应用程序中的主要用途，我们假设只有一个<code>EntityManager</code>. 因此，我们可以在 Spring Boot 设置期间初始化此实例。这是我们在创建 devon4j 应用程序时在<a href="https://github.com/devonfw/devon4j/blob/master/modules/jpa-basic/src/main/java/com/devonfw/module/jpa/dataaccess/api/JpaInitializer.java" target="_blank" rel="noreferrer">JpaInitializer</a>中为您提供的内容。</p><h4 id="jpahelper-和-spring-test" tabindex="-1">JpaHelper 和 Spring Test <a class="header-anchor" href="#jpahelper-和-spring-test" aria-label="Permalink to &quot;JpaHelper 和 Spring Test&quot;">​</a></h4><p>此外，您还希望您的代码在集成测试中工作。Spring-test 在后台提供了很多神奇的功能，使您可以轻松进行集成测试。为了在运行多个测试时提高性能，spring 很聪明，可以避免多次创建相同的 spring-context。因此，它存储这些上下文，以便如果使用之前已经设置的特定Spring配置执行测试用例，则可以重用相同的Spring上下文，而不是再次创建它。但是，您的测试可能有多个Spring配置，导致多个Spring上下文。更糟糕的是，这些测试可以以任何顺序运行，从而导致在Spring上下文之间来回切换。因此，在 Spring Boot 设置期间的静态初始化程序可能会导致奇怪的错误，因为您可能会出错<code>EntityManager</code>实例。为了解决此类问题，我们通过<a href="https://github.com/devonfw/devon4j/blob/master/modules/test-jpa/src/main/java/com/devonfw/module/test/common/base/DbTest.java%23L32" target="_blank" rel="noreferrer">DbTest</a>提供了一种解决方案模式，以确保为每个测试<code>EntityManager</code>初始化正确的实例。因此<code>ComponentDbTest</code>，<code>SubsystemDbTest</code>在<code>DbTesT</code>使用<code>JpaHelper</code>. 如果您正在扩展<code>ApplicationComponentTest</code>或<code>ApplicationSubsystemTest</code>.</p><h2 id="事务处理" tabindex="-1">事务处理 <a class="header-anchor" href="#事务处理" aria-label="Permalink to &quot;事务处理&quot;">​</a></h2><p>对于事务处理，我们通过 AOP 注解作为切面来添加事务控制。这是通过使用注解对代码进行<code>@Transactional</code>注解来完成的。您可以在类级别注解容器 bean 以使所有方法具有事务性，也可以注解单个方法以使它们具有事务性：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">Transactional</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  public</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> Output </span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">getData</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(Input input) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  }</span></span></code></pre></div><h3 id="jta-进口" tabindex="-1">JTA 进口 <a class="header-anchor" href="#jta-进口" aria-label="Permalink to &quot;JTA 进口&quot;">​</a></h3><p>以下是事务支持的导入语句：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> javax.transaction.Transactional;</span></span></code></pre></div><table tabindex="0"><thead><tr><th>警告</th><th>使用上面的 import 语句来遵循 JEE 并避免使用<code>org.springframework.transaction.annotation.Transactional</code>.</th></tr></thead></table><h3 id="jta-依赖" tabindex="-1">JTA 依赖 <a class="header-anchor" href="#jta-依赖" aria-label="Permalink to &quot;JTA 依赖&quot;">​</a></h3><p>请注意，在<a href="https://jakarta.ee/" target="_blank" rel="noreferrer">Jakarta EE</a>中，依赖项已更改。当您想从 Jakarta EE 开始时，您应该使用这些依赖项来获取依赖注入的注解：</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">&lt;!-- Java Transaction API (JTA) --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">dependency</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">groupId</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;jakarta.transaction&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">groupId</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">artifactId</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;jakarta.transaction-api&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">artifactId</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">dependency</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;</span></span></code></pre></div><p>请注意，使用 quarkus，您可以将它们作为传递依赖项开箱即用。上面的 Jakarate EE 依赖项替换了这些 JEE 依赖项：</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">&lt;!-- Java Transaction API (JTA) --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">dependency</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">groupId</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;javax.transaction&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">groupId</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">artifactId</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;javax.transaction-api&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">artifactId</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">dependency</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;</span></span></code></pre></div><h3 id="处理违反约束" tabindex="-1">处理违反约束 <a class="header-anchor" href="#处理违反约束" aria-label="Permalink to &quot;处理违反约束&quot;">​</a></h3><p>使用<code>@Transactional</code>神奇地将事务处理包装在您的代码周围。由于在提交事务时数据库最后会检查约束，因此此方面将在您的代码之外引发约束冲突。如果您必须手动处理约束违规，您必须在带有注解的逻辑之外的代码中执行此操作<code>@Transactional</code>。这可以在服务操作中通过捕获<code>ConstraintViolationException</code>( <code>org.hibernate.exception.ConstraintViolationException</code>for hibernate) 来完成。作为一种通用方法，您可以通过<a href="https://devonfw.com/website/pages/docs/devonfw-guide_devon4j.wiki_guide-rest.asciidoc.html#devonfw-guide_devon4j.wiki_guide-rest.asciidoc_rest-exception-handling" target="_blank" rel="noreferrer">REST 异常处</a>理来解决这个问题。</p><h3 id="提处理" tabindex="-1">提处理 <a class="header-anchor" href="#提处理" aria-label="Permalink to &quot;提处理&quot;">​</a></h3><p>批处理的事务控制要复杂得多，在<a href="https://devonfw.com/website/pages/docs/devonfw-guide_devon4j.wiki_devon4j.asciidoc_layers.html#devonfw-guide_devon4j.wiki_guide-batch-layer.asciidoc" target="_blank" rel="noreferrer">批处理层</a>中进行了描述。</p>`,292)]))}const c=i(e,[["render",h]]);export{o as __pageData,c as default};
