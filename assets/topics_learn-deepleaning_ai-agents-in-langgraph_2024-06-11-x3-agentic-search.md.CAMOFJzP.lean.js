import{_ as i,a,af as n,o as t}from"./chunks/framework.C87LdZyP.js";const e="/assets/126668661785041.Ck17fVw_.png",l="/assets/127697492142708.6yUvX51r.png",A=JSON.parse('{"title":"《AI Agents in LangGraph》003：代理搜索","description":"","frontmatter":{"title":"《AI Agents in LangGraph》003：代理搜索","date":"2024-06-11 13:00:00","tags":["LearnDL","LangGraph","Agent"],"category":["AI"]},"headers":[],"relativePath":"topics/learn-deepleaning/ai-agents-in-langgraph/2024-06-11-x3-agentic-search.md","filePath":"topics/learn-deepleaning/ai-agents-in-langgraph/2024-06-11-x3-agentic-search.md","lastUpdated":1718193786000}'),p={name:"topics/learn-deepleaning/ai-agents-in-langgraph/2024-06-11-x3-agentic-search.md"};function h(r,s,k,d,o,g){return t(),a("div",null,s[0]||(s[0]=[n('<div class="admonition abstract"><p class="admonition-title">abstract</p><p>今天分享 <strong>DeepLearning.AI</strong> 的课程：《使用LangGraph构架AI代理》。</p></div><p>今天讲 Agent 搜索工具。</p><h2 id="为什么" tabindex="-1">为什么 <a class="header-anchor" href="#为什么" aria-label="Permalink to &quot;为什么&quot;">​</a></h2><p><img src="'+e+'" alt=""></p><p>搜索工具你可以认为是一个通用 RAG 工具，</p><ul><li>他比大模型拥有贡多的信息，覆盖更广的知识面</li><li>也可以指定来源搜索，进行精确检索，</li><li>搜索工具还可以减少大模型搞得幻觉。</li></ul><h2 id="搜索工具" tabindex="-1">搜索工具 <a class="header-anchor" href="#搜索工具" aria-label="Permalink to &quot;搜索工具&quot;">​</a></h2><p>23年的时候，我们就用过很多搜索工具，当然这些搜索服务基本都是收费的（可能有免费额度）。</p><p>我们来看一下搜索工具内部的工作原理：</p><p><img src="'+l+`" alt=""></p><ul><li>首先将问题拆分成子问题，</li><li>每个子问题进行检索，</li><li>所有问题的检索结果进行排序和过滤</li><li>最终问题的结果</li></ul><h2 id="实现" tabindex="-1">实现 <a class="header-anchor" href="#实现" aria-label="Permalink to &quot;实现&quot;">​</a></h2><p>使用 Tavily 进行搜索很简单，首先创建 Client,</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"># libraries</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> dotenv </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> load_dotenv</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> os</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> tavily </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> TavilyClient</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"># load environment variables from .env file</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">_ </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> load_dotenv()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"># connect</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">client </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> TavilyClient(</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">api_key</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">os.environ.get(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;TAVILY_API_KEY&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">))</span></span></code></pre></div><p>然后执行 Search 方法，</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"># run search</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> client.search(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;What is in Nvidia&#39;s new Blackwell GPU?&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">                       include_answer</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">True</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"># print the answer</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">result[</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;answer&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">]</span></span></code></pre></div><p>更多的用法可以查看其网站文档，文章里就不过多介绍了。</p><hr><div style="text-align:center;color:#00000099;font-size:14px;">END</div>`,19)]))}const y=i(p,[["render",h]]);export{A as __pageData,y as default};
