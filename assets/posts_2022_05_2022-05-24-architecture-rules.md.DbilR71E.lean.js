import{_ as e,a as t,af as r,o}from"./chunks/framework.C87LdZyP.js";const u=JSON.parse('{"title":"架构设计原则","description":"","frontmatter":{"title":"架构设计原则","date":"2022-05-23T00:00:00.000Z","tags":["其它"],"category":["其它"]},"headers":[],"relativePath":"posts/2022/05/2022-05-24-architecture-rules.md","filePath":"posts/2022/05/2022-05-24-architecture-rules.md","lastUpdated":1718173059000}'),h={name:"posts/2022/05/2022-05-24-architecture-rules.md"};function i(l,a,n,s,d,c){return o(),t("div",null,a[0]||(a[0]=[r('<h2 id="n-1设计" tabindex="-1">N+1设计 <a class="header-anchor" href="#n-1设计" aria-label="Permalink to &quot;N+1设计&quot;">​</a></h2><p>系统中的每个组件都应做到没有单点故障；</p><h2 id="回滚设计" tabindex="-1">回滚设计 <a class="header-anchor" href="#回滚设计" aria-label="Permalink to &quot;回滚设计&quot;">​</a></h2><p>确保系统可以向前兼容，在系统升级时应能有办法回滚版本；</p><h2 id="禁用设计" tabindex="-1">禁用设计 <a class="header-anchor" href="#禁用设计" aria-label="Permalink to &quot;禁用设计&quot;">​</a></h2><p>应该提供控制具体功能是否可用的配置，在系统出现故障时能够快速下线功能；</p><h2 id="监控设计" tabindex="-1">监控设计 <a class="header-anchor" href="#监控设计" aria-label="Permalink to &quot;监控设计&quot;">​</a></h2><p>在设计阶段就要考虑监控的手段；</p><h2 id="多活数据中心设计" tabindex="-1">多活数据中心设计 <a class="header-anchor" href="#多活数据中心设计" aria-label="Permalink to &quot;多活数据中心设计&quot;">​</a></h2><p>若系统需要极高的高可用，应考虑在多地实施数据中心进行多活，至少在一个机房断电的情况下系统依然可用；</p><h2 id="采用成熟的技术" tabindex="-1">采用成熟的技术 <a class="header-anchor" href="#采用成熟的技术" aria-label="Permalink to &quot;采用成熟的技术&quot;">​</a></h2><p>刚开发的或开源的技术往往存在很多隐藏的bug，出了问题没有商业支持可能会是一个灾难；</p><h2 id="资源隔离设计" tabindex="-1">资源隔离设计 <a class="header-anchor" href="#资源隔离设计" aria-label="Permalink to &quot;资源隔离设计&quot;">​</a></h2><p>应避免单一业务占用全部资源；</p><h2 id="架构应能水平扩展" tabindex="-1">架构应能水平扩展 <a class="header-anchor" href="#架构应能水平扩展" aria-label="Permalink to &quot;架构应能水平扩展&quot;">​</a></h2><p>系统只有做到能水平扩展，才能有效避免瓶颈问题；</p><h2 id="非核心则购买" tabindex="-1">非核心则购买 <a class="header-anchor" href="#非核心则购买" aria-label="Permalink to &quot;非核心则购买&quot;">​</a></h2><p>非核心功能若需要占用大量的研发资源才能解决，则考虑购买成熟的产品；</p><h2 id="使用商用硬件" tabindex="-1">使用商用硬件 <a class="header-anchor" href="#使用商用硬件" aria-label="Permalink to &quot;使用商用硬件&quot;">​</a></h2><p>商用硬件能有效降低硬件故障的机率；</p><h2 id="快速迭代" tabindex="-1">快速迭代 <a class="header-anchor" href="#快速迭代" aria-label="Permalink to &quot;快速迭代&quot;">​</a></h2><p>系统应该快速开发小功能模块，尽快上线进行验证，早日发现问题大大降低系统交付的风险；</p><h2 id="无状态设计" tabindex="-1">无状态设计 <a class="header-anchor" href="#无状态设计" aria-label="Permalink to &quot;无状态设计&quot;">​</a></h2><p>服务接口应该做成无状态的，当前接口的访问不依赖于接口上次访问的状态。</p>',24)]))}const b=e(h,[["render",i]]);export{u as __pageData,b as default};
