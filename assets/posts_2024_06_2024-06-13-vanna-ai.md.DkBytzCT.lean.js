import{_ as a,a as n,af as i,o as p}from"./chunks/framework.C87LdZyP.js";const t="/assets/207760598230708.B9Q3mQYy.png",l="/assets/207852980321041.D4yccRMv.png",e="/assets/209579807127625.DMvVhsBN.png",h="/assets/210723369077375.DgaN6ecX.png",r="/assets/210761734461541.B4uZmqUI.png",o="/assets/210921437203875.tY7rahOn.png",k="/assets/211037097418875.7YEbG74B.png",g="/assets/211076649730916.DJA58nZW.png",d="/assets/211329425392708.6AJaQABa.png",c="/assets/211685631089625.D7ZJbXvj.png",m="/assets/211771149531750.DSP_DtBp.png",y="/assets/212018147854541.DlX7ELzO.png",u="/assets/212065710852291.COoQmdFU.png",A="/assets/212526911076750.xQYmj63m.png",F="/assets/212711669159666.BRxk7I9Z.png",v="/assets/214204424351875.Dm7sJrKd.png",C="/assets/207919664701416.CLw3fIXu.png",I=JSON.parse('{"title":"VannaAI：RAG+AI 生成 SQL 使用和Prompt解析","description":"","frontmatter":{"title":"VannaAI：RAG+AI 生成 SQL 使用和Prompt解析","date":"2024-06-13 10:00:00","tags":["llm-tools","vanna.ai"],"category":["AI"]},"headers":[],"relativePath":"posts/2024/06/2024-06-13-vanna-ai.md","filePath":"posts/2024/06/2024-06-13-vanna-ai.md","lastUpdated":1721617651000}'),b={name:"posts/2024/06/2024-06-13-vanna-ai.md"};function D(S,s,B,_,L,E){return p(),n("div",null,s[0]||(s[0]=[i(`<div class="admonition abstract"><p class="admonition-title">abstract</p><p>Vanna.AI 是一种<strong>开源</strong>的<strong>创新</strong>AI辅助 <strong>SQL生成和查询</strong> 工具，他不仅优化了创通的 Chat2SQL 流程， 还创新性的结合 RAG 技术支持多种方案的<strong>训练</strong>，使用<strong>自定义模型</strong>来提升 SQL 生成的准确性。 本章带您初步了解 <strong>Vanna 的使用</strong>、<strong>架构原理</strong>、<strong>提示词解析</strong>等内容。</p></div><p>本文介绍了如下内容：</p><ul><li>VannaAI 基本能力，</li><li><strong>使用</strong>方法和<strong>演示</strong>、</li><li>使用Streamlit 应用运行 VannaAI，</li><li>VannaAI 的限制，</li><li>VannaAI <strong>架构</strong>，</li><li>VannaAI Prompt <strong>提示词解析</strong>，</li><li>VannaAI 不同计划的区别。</li></ul><p>!!! article 阅读更多</p><ul><li><a href="./../../../topics/learn-deepleaning/building-evaluating-advanced-rag/2024-06-08-advanced-rag-pipeline">《构建和评估高级RAG》001：实现高级RAG管道</a></li><li><a href="./../../../topics/learn-deepleaning/building-evaluating-advanced-rag/2024-06-09-x3-sentence-window-retrieval">《构建和评估高级RAG》003：语句窗口检索(SWR)</a></li><li><a href="./../../../topics/llm-everything/articles/2023-06-25-practise-009-openai-sql-chart">《万物皆可LLM》009：大语言模型下的数据问答 BI 实现</a></li><li><a href="./../../../topics/knowledge-graph/articles/2023-08-05-konwledge-graph-013-data-import">《构建个人知识图谱》013：多模态识别并进行知识图谱的导入</a> !!!</li></ul><h2 id="主要功能" tabindex="-1">主要功能 <a class="header-anchor" href="#主要功能" aria-label="Permalink to &quot;主要功能&quot;">​</a></h2><p>先简单介绍一下他的主要功能:</p><ul><li><strong>自动SQL生成</strong>：这个自不必说，而且SQL生成速度很快，准确度也很高；</li><li><strong>高精度</strong>：VannaAI SQL 的高精度来源于可定制训练的架构；</li><li><strong>可定制模型</strong>：这个是特别棒的一点，也是在 AI 应用上大家值得借鉴的；</li><li><strong>多数据库支持</strong>：支持MySQL、Postgres等等几乎你所有能见到的数据库和云数据库。</li><li><strong>灵活前端集成</strong>：课余 Flask、Streamlit、Jupyter、Slackbot、Web应用进行集成。</li></ul><p>这些功能或多或少的都会在后面的内容里面体现到。</p><h2 id="最简单开始" tabindex="-1">最简单开始 <a class="header-anchor" href="#最简单开始" aria-label="Permalink to &quot;最简单开始&quot;">​</a></h2><p>访问 <code>vanna.ai</code> 免费注册账号之后，您就可以快速开启 Vanna 的奇妙体验。</p><blockquote><p>你可以从官网或者 Github 站点获取更多信息： <a href="https://github.com/vanna-ai/vanna" target="_blank" rel="noreferrer">https://github.com/vanna-ai/vanna</a></p></blockquote><p>注册好之后，拷贝页面代码如下，（连接默认的样式数据库<code>Chinook.sqlite</code>分析），</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"># vanna site start</span></span>
<span class="line"><span style="--shiki-light:#B31D28;--shiki-dark:#FF938A;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">pip install vanna</span></span>
<span class="line"><span style="--shiki-light:#B31D28;--shiki-dark:#FF938A;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">pip install </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;vanna[qdrant,ollama,mysql,gemini]&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> vanna.remote </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> VannaDefault</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">vn </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> VannaDefault(</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">model</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;chinook&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">api_key</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;you api key&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">vn.connect_to_sqlite(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;https://vanna.ai/Chinook.sqlite&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">#vn.connect_to_mysql(host=&#39;my-host&#39;, dbname=&#39;my-db&#39;, user=&#39;my-user&#39;, password=&#39;my-password&#39;, port=123)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">vn.ask(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;What are the top 10 artists by sales?&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> vanna.flask </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> VannaFlaskApp</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">VannaFlaskApp(vn).run()</span></span></code></pre></div><p>执行之后，你可以从控制台看到：</p><ul><li>完整的 Prompt，</li><li>SQL过程，</li><li>查询结果。</li></ul><p><img src="`+t+'" alt=""></p><p>以及可视化的图表：</p><p><img src="'+l+`" alt=""></p><div class="admonition note"><p class="admonition-title">ApiKey</p><p>ApiKey 和 Model 可以在 <a href="https://vanna.ai/account/profile" target="_blank" rel="noreferrer">Profile 页面</a>创建和获取。</p></div><h2 id="streamlit" tabindex="-1">Streamlit <a class="header-anchor" href="#streamlit" aria-label="Permalink to &quot;Streamlit&quot;">​</a></h2><p>VannaAI 提供了多种前传展示，下面我们运行一下官方提供的 Streamlit 程序。</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> clone</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> https://github.com/vanna-ai/vanna-streamlit.git</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> vanna-streamlit</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">pip</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> install</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> -r</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> requirements.txt</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">streamlit</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> run</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> app.py</span></span></code></pre></div><p>如果是在 Colab 上运行，可以使用 <code>localtunnel</code> 来暴露外网地址：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">!</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">streamlit</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> run</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> app.py</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> &amp; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">npx</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> localtunnel</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> --port</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 8501</span></span></code></pre></div><p><img src="`+e+'" alt=""></p><p>左侧的功能我们都打开：</p><ul><li>显示SQL</li><li>显示表格</li><li>显示绘图代码</li><li>显示绘图</li><li>显示总结</li><li>显示后续问题</li></ul><p>先点击<strong>建议问题</strong>，可以看到他给出了 10 个建议的问题：</p><p><img src="'+h+'" alt=""></p><p>接着点击<code>各个国家的销售额怎么样</code>这个问题，</p><p><img src="'+r+`" alt=""></p><p>首先是 <strong>SQL</strong> 和 <strong>查询结果</strong>，</p><p>可以看到生成的SQL干干净净的：</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">SELECT</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> BillingCountry </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">AS</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> Country, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">SUM</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(Total) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">AS</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> TotalSales</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> Invoice</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">GROUP BY</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> BillingCountry;</span></span></code></pre></div><p><img src="`+o+'" alt=""></p><p>接着是<strong>绘图代码</strong>和<strong>绘图</strong>结果，也是完美展示：</p><p><img src="'+k+'" alt=""></p><p>最后是<strong>总结</strong>和<strong>后续问题</strong>：</p><p><img src="'+g+`" alt=""></p><p>总结了总销售额，最高的的三个销售额：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span>按国家/地区划分的销售额分布显示，</span></span>
<span class="line"><span>美国的总销售额最高，为 523.06 美元，</span></span>
<span class="line"><span>其次是加拿大，为 303.96 美元，</span></span>
<span class="line"><span>然后是法国，为 195.10 美元。</span></span></code></pre></div><p>我们点击问题，对欧洲各国的销售额进行追问：</p><p><img src="`+d+'" alt=""></p><p>回答 <strong>数据中未提供欧洲地区各个国家的总销售额。</strong>。 和我预想的不一样，我想大概原因是，<strong>从SQL角度无法筛选出欧洲地区的国家</strong>， 大模型可以判断出哪些国家是欧洲的，但是Vanna没有这个机制，对于大数据量也不适合有这个机制。</p><p>现在我手动提问， <strong>销售额最低的三个国家谁，他们销售额占总销售额多少？</strong></p><p>三个国家正确： <img src="'+c+'" alt=""></p><p>但是第二个小问题，回答的不对，</p><p><img src="'+m+`" alt=""></p><p>我换个方式提问，把问题描述的更清楚一些：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span>销售额最低的三个国家谁，</span></span>
<span class="line"><span>这三个国家的销售额分别占所有国家总销售额多少？</span></span></code></pre></div><p>这次结果正确了，表格分两列展示出来数值和占比，</p><p><img src="`+y+'" alt=""></p><p>画的图也对</p><p><img src="'+u+'" alt=""></p><h2 id="图形单一" tabindex="-1">图形单一 <a class="header-anchor" href="#图形单一" aria-label="Permalink to &quot;图形单一&quot;">​</a></h2><p>用下来，功能很不错，不过有个小问题，他好像只会用柱状图，不会用其他都图形展示结果，看久了有点儿单一。</p><p>如果你告诉他用什么图形格式，他会回答你SQL搞不定：</p><p><img src="'+A+'" alt=""></p><h2 id="架构" tabindex="-1">架构 <a class="header-anchor" href="#架构" aria-label="Permalink to &quot;架构&quot;">​</a></h2><p>现在再会过来看 Vanna 的架构，</p><p><img src="'+F+`" alt="Vanna AI 官网架构图"></p><p>过程总共8个步骤形成闭环：</p><ul><li>用户进行提问，</li><li>Vanna AI 进行搜索，搜索的范围包括：数据库表结构、文档、<strong>训练模型</strong>数据的正确答案，</li><li>根据这些信息形成提示语 Prompt（这就是一个 RAG 的过程）</li><li>把 Prompt 发给大语言模型</li><li>大模型根据 Prompt 生成 SQL 查询语句</li><li>Vanna AI 执行 SQL 语句</li><li>将查询结果展示成各种形式（表格、SQL、图表、总结等），同时生成后续提问</li><li>判断结果的对错，讲正确的结果写入<strong>训练模型</strong></li></ul><h2 id="提示语" tabindex="-1">提示语 <a class="header-anchor" href="#提示语" aria-label="Permalink to &quot;提示语&quot;">​</a></h2><p>我们哪一个例子来学习一下他的提示语，如果你也有类似的 Chat BI 或者 Chat2SQL 的需求，可以直接拿来参考。</p><p>比如如下问题：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span>销售额最低的三个国家谁，</span></span>
<span class="line"><span>这三个国家的销售额分别占所有国家总销售额多少？</span></span></code></pre></div><p>提示语是一个系统提示语加多轮问答的形式。</p><p><img src="`+v+`" alt=""></p><p>我们先看看系统提示语：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span>您是 SQLite 专家。请帮助生成 SQL 查询来回答问题。您的回复应仅基于给定的上下文，并遵循回复指南和格式说明。</span></span>
<span class="line"><span></span></span>
<span class="line"><span>===数据表</span></span>
<span class="line"><span>...这里是表结构，我省略了...</span></span>
<span class="line"><span></span></span>
<span class="line"><span>===附加上下文</span></span>
<span class="line"><span>这是一个 SQLite 数据库。对于日期，请记住使用 SQLite 语法。</span></span>
<span class="line"><span></span></span>
<span class="line"><span>===回复指南</span></span>
<span class="line"><span>1. 如果提供的上下文足够，请生成有效的 SQL 查询，而无需对问题进行任何解释。</span></span>
<span class="line"><span>2. 如果提供的上下文几乎足够，但需要了解特定列中的特定字符串，请生成中间 SQL 查询以查找该列中的不同字符串。在查询前面加上注释，说明 middle_sql</span></span>
<span class="line"><span>3. 如果提供的上下文不足，请解释无​​法生成的原因。</span></span>
<span class="line"><span>4. 请使用最相关的表。</span></span>
<span class="line"><span>5. 如果之前已经问过并回答过该问题，请准确重复之前的答案。</span></span></code></pre></div><p>中间的多样本提示就没啥好分析的，就是简单的问题和LLM进行SQL回复。</p><p>最后问出问题：</p><div class="language-json5 vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json5</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">    &#39;role&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;user&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">    &#39;content&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;销售额最低的三个国家谁，</span><span style="--shiki-light:#005CC5;--shiki-dark:#F47067;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">这三个国家的销售额分别占所有国家总销售额多少？&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  }</span></span></code></pre></div><p>这次提问最终 LLM 回答：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span>LLM Response: \`\`\`sql</span></span>
<span class="line"><span>WITH CountrySales AS (</span></span>
<span class="line"><span>    SELECT BillingCountry AS Country, SUM(Total) AS TotalSales</span></span>
<span class="line"><span>    FROM Invoice</span></span>
<span class="line"><span>    GROUP BY BillingCountry</span></span>
<span class="line"><span>)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>SELECT Country, TotalSales,</span></span>
<span class="line"><span>    TotalSales * 1.0 / (SELECT SUM(TotalSales) FROM CountrySales) AS PercentageOfTotalSales</span></span>
<span class="line"><span>FROM CountrySales</span></span>
<span class="line"><span>ORDER BY TotalSales</span></span>
<span class="line"><span>LIMIT 3;</span></span>
<span class="line"><span>\\\`\`\`</span></span></code></pre></div><p>Vanna AI 提取出 SQL：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span>Extracted SQL: WITH CountrySales AS (</span></span>
<span class="line"><span>    SELECT BillingCountry AS Country, SUM(Total) AS TotalSales</span></span>
<span class="line"><span>    FROM Invoice</span></span>
<span class="line"><span>    GROUP BY BillingCountry</span></span>
<span class="line"><span>)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>SELECT Country, TotalSales,</span></span>
<span class="line"><span>    TotalSales * 1.0 / (SELECT SUM(TotalSales) FROM CountrySales) AS PercentageOfTotalSales</span></span>
<span class="line"><span>FROM CountrySales</span></span>
<span class="line"><span>ORDER BY TotalSales</span></span>
<span class="line"><span>LIMIT 3;</span></span></code></pre></div><p>这样，最重要的一步 SQL 生成就完成了。</p><h2 id="vannaai-计划" tabindex="-1">VannaAI 计划 <a class="header-anchor" href="#vannaai-计划" aria-label="Permalink to &quot;VannaAI 计划&quot;">​</a></h2><p>首先，VannaAI 是<strong>开源</strong>的，你当然可以<strong>完全在本地运行</strong>，使用<strong>本地的大模型</strong>、<strong>本地向量库</strong>。</p><p>VannaAI 云服务支持多个计划，包含免费的计划和付费计划。 使用 VannaAI 云服务的优点是，简单、大模型性能好。</p><p>免费计划的 AI SQL 生成准确度已经挺高了，大家可以试试。</p><p><img src="`+C+'" alt=""></p><p>!!! article 阅读更多</p><ul><li><a href="./../../../topics/learn-deepleaning/building-evaluating-advanced-rag/2024-06-08-advanced-rag-pipeline">《构建和评估高级RAG》001：实现高级RAG管道</a></li><li><a href="./../../../topics/learn-deepleaning/building-evaluating-advanced-rag/2024-06-09-x3-sentence-window-retrieval">《构建和评估高级RAG》003：语句窗口检索(SWR)</a></li><li><a href="./../../../topics/llm-everything/articles/2023-06-25-practise-009-openai-sql-chart">《万物皆可LLM》009：大语言模型下的数据问答 BI 实现</a></li><li><a href="./../../../topics/knowledge-graph/articles/2023-08-05-konwledge-graph-013-data-import">《构建个人知识图谱》013：多模态识别并进行知识图谱的导入</a> !!!</li></ul>',87)]))}const Q=a(b,[["render",D]]);export{I as __pageData,Q as default};
