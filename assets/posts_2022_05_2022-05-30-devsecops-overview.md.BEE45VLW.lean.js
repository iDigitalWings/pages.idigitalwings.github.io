import{_ as s,a as p,af as a,o as r}from"./chunks/framework.C87LdZyP.js";const o="/assets/learn-DevOps-Security-best-practices.Bn_-iYG9.png",t="/assets/devsecops-benefits-1.CKU5aYdG.png",v="/assets/DevSecOps-Pipeline.Bo5a1XBR.png",S=JSON.parse('{"title":"DevSecOps:  概述（Overview）","description":"","frontmatter":{"title":"DevSecOps:  概述（Overview）","date":"2022-05-30T00:00:00.000Z","tags":["devsecops","devops"],"category":["运维"]},"headers":[],"relativePath":"posts/2022/05/2022-05-30-devsecops-overview.md","filePath":"posts/2022/05/2022-05-30-devsecops-overview.md","lastUpdated":1718175555000}'),c={name:"posts/2022/05/2022-05-30-devsecops-overview.md"};function i(n,e,l,D,d,O){return r(),p("div",null,e[0]||(e[0]=[a('<h2 id="什么是-devsecops" tabindex="-1">什么是 DevSecOps？ <a class="header-anchor" href="#什么是-devsecops" aria-label="Permalink to &quot;什么是 DevSecOps？&quot;">​</a></h2><p>DevSecOps 是指将安全实践集成到 DevOps 软件交付模型中。它的基础是一种文化，在这种文化中，通过流程和工具实现开发和运营，共同承担交付安全软件的责任。</p><p><strong>DevSecOps 模型</strong>的定义，在高功能层面上，是在软件开发的生命周期中尽早集成安全目标。虽然安全是“每个人的责任”，但 DevOps 团队在开发和运营的交叉点上具有独特的定位，能够在广度和深度上应用安全性。</p><h2 id="devops-和-devsecops-有什么区别" tabindex="-1">DevOps 和 DevSecOps 有什么区别？ <a class="header-anchor" href="#devops-和-devsecops-有什么区别" aria-label="Permalink to &quot;DevOps 和 DevSecOps 有什么区别？&quot;">​</a></h2><p>DevOps 和 DevSecOps 之间的区别，简而言之，就是共享责任的文化。DevOps 是一个被谈论和书写了十多年的概念，并且出现了许多 DevOps 的定义。DevOps 的核心是一种将开发和运营实践作为共同责任的组织范式。</p><p><img src="'+o+'" alt="DevOps 安全性比较"><em>DevOps 与 DevSecOps 比较</em></p><p>最初是功能强大的软件工程团队之间共享的一组松散的通用实践，现在转变为现代的工程文化和流程声明：DevOps。共同承担开发和运营责任的组织能够更快地迭代，从而更加成功。DevSecOps 扩展了这一理念，将安全目标编码为整体目标结构的一部分。DevSecOps 应该被认为是 DevOps 的自然延续，而不是一个单独的想法或概念。成功应用 DevOps 实践的团队应该将 DevSecOps 视为进化步骤，而不是革命性步骤。</p><p>许多人会同意，目标是创建一个环境，通过无缝和可持续的流程从代码转移到生产，从而创造商业价值。随着这种新模型的出现，<a href="https://opensource.com/article/19/10/devsecops-pipeline-and-tools" target="_blank" rel="noreferrer">工具</a>和方法论加快了步伐并导致了瓶颈，反馈周期慢的传统安全实践阻碍了高节奏的 DevOps 实践。结果，安全实践通常只能在后期制作或由外部团队注入流程中完成，从而减慢速度。</p><p>为了使 DevOps 和 DevSecOps 之间的区别更加清晰，DevSecOps 将 DevOps 的共同责任文化扩展到还包括安全实践。旨在识别和理想解决安全问题的活动是在应用程序开发生命周期的早期注入的，而不是在产品发布之后。这是通过使开发团队能够在软件开发生命周期 (SDLC) 内独立执行许多安全任务来实现的。</p><p>该方法有助于最大限度地减少影响生产的漏洞，从而降低与修复安全漏洞相关的成本。它创造了可扩展性，同时还建立了一种协作文化，使安全性更接近 DevOps 目标。DevSecOps 旨在将安全构建到交付过程的每个阶段，从需求阶段开始，并制定安全自动化计划。</p><h2 id="devsecops-的重要性" tabindex="-1">DevSecOps 的重要性 <a class="header-anchor" href="#devsecops-的重要性" aria-label="Permalink to &quot;DevSecOps 的重要性&quot;">​</a></h2><h3 id="为什么-devsecops-实践很重要" tabindex="-1">为什么 DevSecOps 实践很重要？ <a class="header-anchor" href="#为什么-devsecops-实践很重要" aria-label="Permalink to &quot;为什么 DevSecOps 实践很重要？&quot;">​</a></h3><p>数字化转型已成为几乎所有企业的生存需求。这种转变包括三个重要的举措：更多的软件、云技术和 DevOps 方法。</p><p>更多的软件意味着更多的组织风险变得数字化，从而提高了技术债务水平，从而提高了应用程序的安全性，使得保护数字资产变得越来越具有挑战性。</p><p>云意味着使用引入不同风险、变化更快、更公开可访问的新技术——消除或重新定义安全边界的概念。这也意味着许多 IT 和基础架构风险都转移到了云端，而其他风险则变成了纯粹的软件定义，从而降低了许多风险，同时突出了权限和访问管理的重要性。</p><p>最后，DevOps 意味着软件开发和交付方式的改变，加快了从编写代码到交付客户价值再到向市场学习和适应的周期。获得授权的开发团队比以往任何时候都更快地持续交付软件，自主制定技术和实施决策，无需中介。随着团队越来越重视自给自足——你编写它，你运行它，阻碍开发的传统缓慢反馈循环是不能容忍的。</p><p>随着组织其他部门的发展，安全团队面临着更大的需求，并且往往成为更多的瓶颈。为节奏较慢的前云时代设计的遗留应用程序安全工具和实践将安全团队置于交付高质量应用程序的关键路径上。由于严重的安全人才短缺，这些团队人手不足，成为瓶颈，无法跟上。结果，开发团队发布了不安全的应用程序，安全团队精疲力尽，安全成为反对者，否定了企业正在寻求的加速。</p><p>为了应对这些挑战，人们开始改变他们的做法，这催生了 DevSecOps。DevSecOps 文化将<a href="https://snyk.io/learn/devops-security/" target="_blank" rel="noreferrer">安全性带入了 DevOps</a>领域，使开发团队能够按照自己的节奏保护他们构建的内容，同时还可以在开发人员和安全从业者之间建立更好的协作。它允许安全团队成为一个支持组织，提供专业知识和工具来增加这种开发人员的自主权，同时仍然提供业务需求的监督级别。</p><h3 id="devsecops-模型的-6-大优势" tabindex="-1">DEVSECOPS 模型的 6 大优势 <a class="header-anchor" href="#devsecops-模型的-6-大优势" aria-label="Permalink to &quot;DEVSECOPS 模型的 6 大优势&quot;">​</a></h3><p><img src="'+t+'" alt="DevSecOps 模式的 6 大优势"></p><ol><li><strong>更快的交付：</strong> 当安全性集成到管道中时，软件交付的速度得到了提高。在部署之前识别并修复错误，使开发人员可以专注于交付功能。</li><li><strong>改进的安全态势：</strong> 从设计阶段开始，安全就是一项功能。责任共担模型可确保从构建、部署到保护生产工作负载的安全性紧密集成。</li><li><strong>降低成本：</strong> 在部署之前识别漏洞和错误会导致风险和运营成本的指数级降低。</li><li><strong>提升 DevOps 的价值：</strong> 通过将安全实践集成到 DevOps 中，改善整体安全态势作为一种共同责任的文化。<a href="./resources/2022-05-30-devsecops-overview/dso_2020.pdf">Snyk/Puppet 2020 DevSecOps 洞察报告</a>发现成熟的 DevSecOps 组织就是这种情况。</li><li><strong>提高安全集成和速度：</strong> 通过消除在开发后改进安全控制的需要，降低了安全软件交付的成本和时间。</li><li><strong>实现更大的整体业务成功：</strong> 对已开发软件的安全性和采用新技术的更大信任有助于提高收入增长和扩大业务范围。</li></ol><h2 id="devsecops-采用-将安全性集成到-ci-cd-管道中" tabindex="-1">DevSecOps 采用：将安全性集成到 CI/CD 管道中 <a class="header-anchor" href="#devsecops-采用-将安全性集成到-ci-cd-管道中" aria-label="Permalink to &quot;DevSecOps 采用：将安全性集成到 CI/CD 管道中&quot;">​</a></h2><p>大多数现代 DevOps 组织将依赖于持续集成和持续部署/交付系统的某种组合，以<a href="https://snyk.io/learn/what-is-ci-cd-pipeline-and-tools-explained/" target="_blank" rel="noreferrer">CI/CD 管道</a>的形式。该管道是一个很好的基础，可以在此基础上执行各种自动化安全测试和验证，而无需人工操作员的手工劳动。</p><p><img src="'+v+'" alt="DevSecOps 采用：将安全性集成到 CI/CD 管道中"><em>DevSecOps 采用：将安全性集成到 CI/CD 管道中</em></p><p>要在应用程序开发的早期集成安全目标，请在编写第一行代码之前开始。安全可以在系统、应用程序或个人用户故事的初始概念期间集成并开始有效的威胁建模。静态分析、linter 和策略引擎可以在开发人员签入代码的任何时候运行，确保在更改进一步向上游移动之前处理任何容易得到的结果。</p><p>可以整体应用软件组成分析，以确认任何开源依赖项都具有兼容的许可证并且没有漏洞。这样做的一个行为副产品是，开发人员对他们的应用程序的安全性有一种主人翁感，可以立即获得关于他们编写的代码的相对安全性的反馈。</p><p>签入并构建代码后，您就可以开始使用安全集成测试了。在隔离的容器沙箱中运行代码可以自动测试网络调用、输入验证和授权等内容。这些测试会生成快速反馈，从而能够快速迭代和对已识别的任何问题进行分类，从而最大限度地减少对整个流程的干扰。如果发生无法解释的网络调用或未经处理的输入之类的事情，则测试会失败，并且管道会以报告和通知的形式向相关团队生成可操作的反馈。</p><p>一旦部署工件通过了第一组集成测试，它就会进入下一阶段的集成测试。现在它将被部署到更广泛的沙箱中，即最终生产环境的有限副本。在这个阶段，可以执行进一步的安全集成测试，尽管目标不同。</p><p>现在，可以测试正确的日志记录和访问控制等内容。应用程序是否正确记录相关的安全和性能指标？访问是否仅限于正确的个人子集（或完全阻止）？失败再次导致相关团队采取行动。</p><p>最后，应用程序进入生产阶段。然而，DevSecOps 的工作仍在继续。自动修补和配置管理可确保生产环境始终运行最新和最安全的软件依赖项版本。理想情况下，不可变的基础设施意味着整个环境经常被拆除和重建，不断地在管道的广度上进行一系列测试。</p><p>利用 DevSecOps CI/CD 管道有助于在每个阶段集成安全目标，而不会增加繁琐的官僚主义和把关，从而可以保持业务价值的快速交付。</p><h2 id="赋能-devsecops-文化" tabindex="-1">赋能 DevSecOps 文化 <a class="header-anchor" href="#赋能-devsecops-文化" aria-label="Permalink to &quot;赋能 DevSecOps 文化&quot;">​</a></h2><p>那么，一个组织如何才能从“DevOps”进化到“DevSecOps”呢？这不像只是交给已经很忙的 DevOps 团队一组安全 KPI 并收工那么简单。它需要一种协作、共享的快速迭代文化。</p><p>如果及早集成安全目标是目标，那么这样做需要尽可能轻松。将安全团队和目标集成到价值流中的负担不应落到开发人员身上。添加额外的步骤只会延长向客户交付功能所需的时间。安全应该是一个灵活的组织，采用务实的方法来应用安全性，同时将干扰降至最低。</p><p>在规划过程中，尤其是与基础设施相关的过程中，安全工程师应该参与讨论，有权反对糟糕/不安全的选择，但知识渊博，可以提供替代方案。通常，负担过重的安全团队只是简单地说“不”，然后将寻找替代方案的工作外包给 DevOps 团队。再次，这可以追溯到为安全组织提供适当级别的资源。</p><p>随着安全和 DevOps 的早期和经常协作，安全目标已经紧密地融入了基础设施的结构中。部署到生产中的功能和应用程序将是安全、开发和运营之间全面有效协作的结果。安全性不必事后要求开发团队提供额外的功能或审计；他们会知道这些是从第一天开始就内置的。</p><p>如果您的组织已经发展到实践 DevSecOps，您就知道您不仅在快速迭代，通过新特性和改进的功能取悦您的客户，而且您正在以相应的安全级别提供这种体验。</p><hr><ul><li><a href="https://snyk.io/series/devsecops/" target="_blank" rel="noreferrer">https://snyk.io/series/devsecops/</a></li></ul>',39)]))}const f=s(c,[["render",i]]);export{S as __pageData,f as default};
