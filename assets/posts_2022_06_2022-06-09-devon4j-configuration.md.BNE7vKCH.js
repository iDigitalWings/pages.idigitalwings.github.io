import{_ as l}from"./chunks/ArticleMetadata.BIgknxGB.js";import{_ as p,m as s,a as c,u as d,B as h,e as o,x as u,aj as _,o as i,p as m,q as f}from"./chunks/framework.Ba_Ek9Jm.js";import"./chunks/theme.CTeeA9eH.js";const N=JSON.parse('{"title":"Devon4j: 配置","description":"","frontmatter":{"title":"Devon4j: 配置","date":"2022-06-09T00:00:00.000Z","tags":["devon4j"],"category":["架构"]},"headers":[],"relativePath":"posts/2022/06/2022-06-09-devon4j-configuration.md","filePath":"posts/2022/06/2022-06-09-devon4j-configuration.md","lastUpdated":1718173059000}'),b={name:"posts/2022/06/2022-06-09-devon4j-configuration.md"},q=o("h1",{id:"devon4j-配置",tabindex:"-1"},[u("Devon4j: 配置 "),o("a",{class:"header-anchor",href:"#devon4j-配置","aria-label":'Permalink to "Devon4j: 配置"'},"​")],-1),v=_('<p>应用程序需要可配置以便允许内部设置（如 CDI），但也允许对已部署的包进行外部配置（例如集成到运行时环境中）。我们依赖于遵循“约定优于配置”模式的综合配置方法。本指南通过详细说明和如何处理配置的最佳实践对此进行了补充。</p><p>一般来说，我们区分以下几种配置，这些配置将在以下部分中进行说明：</p><ul><li>由开发人员维护的内部应用程序配置</li><li>运营商维护的外部环境配置</li><li>由业务管理员维护的外部化业务配置</li></ul><h2 id="内部应用程序配置" tabindex="-1">内部应用程序配置 <a class="header-anchor" href="#内部应用程序配置" aria-label="Permalink to &quot;内部应用程序配置&quot;">​</a></h2><p>应用程序配置包含应用程序的所有内部设置和连接（bean 连接、数据库映射等），并由应用程序开发人员在开发时维护。</p><h3 id="外化配置" tabindex="-1">外化配置 <a class="header-anchor" href="#外化配置" aria-label="Permalink to &quot;外化配置&quot;">​</a></h3><p>外部化配置是单独提供给部署包的配置，并且可以不受重新部署的干扰。</p><h4 id="环境配置" tabindex="-1">环境配置 <a class="header-anchor" href="#环境配置" aria-label="Permalink to &quot;环境配置&quot;">​</a></h4><p>环境配置包含特定于不同环境的配置参数（通常是端口号、主机名、密码、登录名、超时、证书等）。这些都在负责应用程序的运营商的控制之下。</p><p>环境配置保存在<code>application.properties</code>文件中，定义了各种属性。这些属性在每个主题指南的相应配置部分中进行了说明：</p><ul><li>持久化等中间件配置</li><li>服务配置</li><li>日志</li></ul><p>通过为每个属性提供注释，确保您的属性得到彻底记录。此内联文档对您的运维部门最有价值。</p><p>有关构建<code>application.properties</code>文件或者 Quarkus</p><p>配置的更多信息，请参阅 Spring 和 Quarkus 文档。</p><h3 id="业务配置" tabindex="-1">业务配置 <a class="header-anchor" href="#业务配置" aria-label="Permalink to &quot;业务配置&quot;">​</a></h3><p>通常应用程序不需要业务配置。如果他们这样做，管理员通常应该可以通过 GUI 对其进行编辑。因此，业务配置值应该以键/值对的形式存储在数据库中。</p><p>因此，我们建议创建一个（至少）包含以下列的专用表：</p><ul><li>ID</li><li>属性名称</li><li>属性类型（布尔、整数、字符串）</li><li>属性值</li><li>描述</li></ul><p>根据该表中的条目，管理 GUI 可能会显示用于修改业务配置的通用表单。布尔值应显示为复选框，整数和字符串值应显示为文本字段。这些值应根据其类型进行验证，因此如果您尝试将字符串保存在整数属性中，则会引发错误。</p><p>我们建议分层业务配置采用以下基本布局：</p><p><code>component.[subcomponent].[subcomponent].propertyname</code></p><h2 id="安全" tabindex="-1">安全 <a class="header-anchor" href="#安全" aria-label="Permalink to &quot;安全&quot;">​</a></h2><p>通常，您需要将密码（用于数据库、第三方服务等）作为配置的一部分。这些通常是特定于环境的（见上文）。但是，通过 DevOps 和持续部署，您可能会倾向于将此类配置提交到您的版本控制中（例如<code>git</code>）。使用纯文本密码执行此操作是一个严重的问题，尤其是对于生产系统而言。永远不要那样做！相反，我们提供了一些如何处理合理配置的建议：</p><h3 id="密码加密" tabindex="-1">密码加密 <a class="header-anchor" href="#密码加密" aria-label="Permalink to &quot;密码加密&quot;">​</a></h3><p>一个简单但合理的方法是配置使用主密码加密的密码。主密码应该是特定于每个环境的强机密。它绝不能提交给版本控制。</p><p>对于Spring，我们使用<code>jasypt-spring-boot</code>。</p><h3 id="这是含糊的安全吗" tabindex="-1">这是含糊的安全吗？ <a class="header-anchor" href="#这是含糊的安全吗" aria-label="Permalink to &quot;这是含糊的安全吗？&quot;">​</a></h3><ul><li>是的，从保护目标环境中的密码的角度来看，这只不过是含糊的安全性。 如果攻击者以某种方式获得了对机器的完全访问权限，这只会导致他花费更多时间。</li><li>不，如果有人只获取了配置文件。 因此，您的所有开发人员都可以访问存储配置的版本控制。其他人可能有权访问包含此配置的软件版本。但是如果没有只有特定操作员知道的主密码，其他人就无法解密密码（除了暴力破解需要很长时间，详情请参阅 jasypt）。</li></ul>',28);function j(e,k,g,P,x,D){const r=l,n=s("ClientOnly");return i(),c("div",null,[q,d(n,null,{default:h(()=>{var a,t;return[(((a=e.$frontmatter)==null?void 0:a.aside)??!0)&&(((t=e.$frontmatter)==null?void 0:t.showArticleMetadata)??!0)?(i(),m(r,{key:0,article:e.$frontmatter},null,8,["article"])):f("",!0)]}),_:1}),v])}const S=p(b,[["render",j]]);export{N as __pageData,S as default};
