import{_ as e,a,af as o,o as r}from"./chunks/framework.C87LdZyP.js";const s="/assets/2723710610481041.BtXtt3WN.png",i="/assets/2761159046206583.DXd1jlC8.png",p="/assets/2725291170457166.DCqYNosY.png",n="/assets/2725552684957416.2LJhzNqb.png",l="/assets/2726367682596625.GXs5OTxn.png",h="/assets/2726819940511625.DAmzbh4M.png",c="/assets/2726956884105291.iNnpIBji.png",g="/assets/2727408983266958.CDrO-Grk.png",q=JSON.parse('{"title":"PromptEngineering：思维树 (ToT)","description":"","frontmatter":{"title":"PromptEngineering：思维树 (ToT)","date":"2023-07-11T00:00:00.000Z","tags":["ai","ml"],"category":["AI"]},"headers":[],"relativePath":"topics/prompt-engineering/articles/2023-07-11-Prompt-Engineering-ToT.md","filePath":"topics/prompt-engineering/articles/2023-07-11-Prompt-Engineering-ToT.md","lastUpdated":1718173059000}'),T={name:"topics/prompt-engineering/articles/2023-07-11-Prompt-Engineering-ToT.md"};function d(m,t,u,b,f,k){return r(),a("div",null,t[0]||(t[0]=[o('<div class="admonition abstract"><p class="admonition-title">abstract</p><p>今天介绍思维树（Tree of Thought / ToT）提示技术，框架基于思维链提示进行了总结，引导语言模型探索把思维作为中间步骤来解决通用问题。</p></div><p>我们前面介绍过的提示工程技术有前面介绍了思维链提示、自洽性，今天介绍思维树。</p><p><img src="'+s+'" alt="几种提示方法对比(参考论文绘制)"></p><p>对于需要探索或预判战略的复杂任务来说，传统或简单的提示技巧是不够的。 最近，<a href="https://arxiv.org/abs/2305.10601" target="_blank" rel="noreferrer">Shunyu Yao 等人</a> (2023) 提出了<strong>思维树</strong>（Tree of Thoughts、ToT）框架， 该框架基于<strong>思维链提示</strong>进行了总结，<strong>引导语言模型探索把思维作为中间步骤来解决通用问题</strong>。</p><h2 id="什么是思维树-tot" tabindex="-1">什么是思维树 ToT <a class="header-anchor" href="#什么是思维树-tot" aria-label="Permalink to &quot;什么是思维树 ToT&quot;">​</a></h2><p><img src="'+i+'" alt="思维树的推理过程"></p><p>思维树（ToT）维护着一棵由思维路径组成的树，思维由连贯的语言序列表示， 这个序列就是解决问题的中间步骤。 使用这种方法，LM(语言模型)能够自己对严谨推理过程的中间思维进行评估。 语言模型将生成及评估思维的能力与搜索算法（如广度优先搜索和深度优先搜索）相结合， 在系统性探索思维的时候可以向前验证和回溯。</p><blockquote><p>ToT 需要针对不同的任务定义思维/步骤的数量以及每步的候选项数量。</p></blockquote><h2 id="算-24-游戏" tabindex="-1">算 24 游戏 <a class="header-anchor" href="#算-24-游戏" aria-label="Permalink to &quot;算 24 游戏&quot;">​</a></h2><p>例如，论文中的<code>算 24 游戏</code>是一种数学推理任务，需要分成 3 个思维步骤， 每一步都需要一个中间方程。 而每个步骤保留最优的 5 个候选项。</p><p>ToT 完成算 24 的游戏任务要执行广度优先搜索（BFS）， 每步思维的候选项都要求 LM 给出能否得到 24 的评估： “sure/maybe/impossible”（一定能/可能/不可能） 。</p><blockquote><p>目的是得到经过少量向前尝试就可以验证正确（sure）的局部解， 基于‘太大/太小’的常识消除那些不可能（impossible）的局部解， 其余的局部解作为‘maybe’保留。</p></blockquote><p>每步思维都要抽样得到 3 个评估结果。整个过程如<a href="https://arxiv.org/abs/2305.10601" target="_blank" rel="noreferrer">下图</a>所示：</p><p><img src="'+p+'" alt=""></p><h2 id="创意写作任务" tabindex="-1">创意写作任务 <a class="header-anchor" href="#创意写作任务" aria-label="Permalink to &quot;创意写作任务&quot;">​</a></h2><p>作者还提出了一个创意写作任务。：输入是 4 个随机句子，输出应该是一个连贯的段落，其中有 4 个段落，分别以 4 个输入句子结尾。这样的任务是开放式的、探索性的，挑战创造性思维和高层次的规划。</p><p>构建一个深度为 2 的 ToT（并且只有 1 个中间思考步骤）。LM 首先生成 <code>k=5</code> 个计划并投票选出最佳方案。</p><p><img src="'+n+'" alt=""></p><p>对 100 个任务进行 GPT-4 评分，ToT (7.56) 被认为比 IO (6.19) 和 CoT (6.93) 生成更连贯的段落。</p><p><img src="'+l+'" alt=""></p><h2 id="局限性" tabindex="-1">局限性 <a class="header-anchor" href="#局限性" aria-label="Permalink to &quot;局限性&quot;">​</a></h2><p>对于 GPT-4 已经擅长的许多现有任务来说，刻意使用 ToT 可能不是必需的， 但是当处理现实中更复杂的任务（例如编码、数据分析、机器人等）时，这些问题为 ToT 的研究和应用提供了新的机会。</p><p>另外，为了提高性能，ToT 这样的搜索方法比采样方法需要更多的资源（例如 GPT-4 API 成本）， 但 ToT 的模块化灵活性允许用户自定义这种性能成本权衡（通过定义思维步骤和数量）。</p><h2 id="提示语来实现tot" tabindex="-1">提示语来实现ToT <a class="header-anchor" href="#提示语来实现tot" aria-label="Permalink to &quot;提示语来实现ToT&quot;">​</a></h2><p><a href="https://github.com/dave1010/tree-of-thought-prompting" target="_blank" rel="noreferrer">Hulbert (2023) </a> 在 Github 上提出了思维树（ToT）提示法，将 ToT 框架的主要概念概括成了一段简短的提示词， 指导 LLM 在一次提示中对中间思维做出评估。</p><p>他总结的 ToT 提示词的例子如下：</p><blockquote><p>假设三位不同的专家来回答这个问题。 所有专家都写下他们思考这个问题的第一个步骤，然后与大家分享。 然后，所有专家都写下他们思考的下一个步骤并分享。 以此类推，直到所有专家写完他们思考的所有步骤。 只要大家发现有专家的步骤出错了，就让这位专家离开。 请问...</p></blockquote><p>给大家看一个例子：</p><div class="admonition note"><p class="admonition-title">球在哪里问题？</p><p>鲍勃在客厅里。 他端着杯子走向厨房。 他把一个球放进杯子里，把杯子拿进卧室。 他把杯子倒过来，然后走向花园。 他把杯子放在花园里，然后走向车库。 请问球在哪里?</p></div><h4 id="gpt3-直接提问-❌" tabindex="-1">GPT3 直接提问 ❌ <a class="header-anchor" href="#gpt3-直接提问-❌" aria-label="Permalink to &quot;GPT3 直接提问  ❌&quot;">​</a></h4><p><img src="'+h+'" alt="GPT3 给出了错误答案"></p><p>仔细思考，有逻辑地解释你的答案。</p><h4 id="使用思维链-cot-❌" tabindex="-1">使用思维链 CoT ❌ <a class="header-anchor" href="#使用思维链-cot-❌" aria-label="Permalink to &quot;使用思维链 CoT  ❌&quot;">​</a></h4><p>CoT 技术可以通过在提示中添加类似于以下内容的内容来实现：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">仔细思考，有逻辑地解释你的答案。</span></span></code></pre></div><p>这种方法提高了 LLM 回答许多问题的表现，尽管其有效性各不相同。</p><p>以下是 ChatGPT 3.5 响应的示例：</p><p><img src="'+c+'" alt=""></p><h4 id="使用-tot-✅" tabindex="-1">使用 ToT ✅ <a class="header-anchor" href="#使用-tot-✅" aria-label="Permalink to &quot;使用 ToT  ✅&quot;">​</a></h4><p>我们尝试使用 ToT 风格的提示来改进 CoT 的结果：</p><p><img src="'+g+'" alt=""></p><p>这次他意识到了问题，并且给出了正确答案。</p><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p>语言模型现阶段基于算法和算力还是有很多能力的局限。特别是对推理和复杂问题， 思维树(ToT)能让语言模型在推理过程中自动进行思考、投票，从而让模型在<strong>参数不变的情况下获得能力的提升</strong>。</p><h3 id="论文和资源" tabindex="-1">论文和资源 <a class="header-anchor" href="#论文和资源" aria-label="Permalink to &quot;论文和资源&quot;">​</a></h3><ul><li><a href="https://arxiv.org/pdf/2305.10601.pdf" target="_blank" rel="noreferrer">Tree of Thoughts: Deliberate Problem Solving with Large Language Models</a></li><li><a href="https://arxiv.org/abs/2305.08291" target="_blank" rel="noreferrer">Large Language Model Guided Tree-of-Thought</a></li><li><a href="https://github.com/kyegomez/tree-of-thoughts" target="_blank" rel="noreferrer">tree-of-thoughts</a></li></ul>',46)]))}const P=e(T,[["render",d]]);export{q as __pageData,P as default};
